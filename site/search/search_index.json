{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to Younger's Notebook!","text":""},{"location":"#_1","title":"\u968f\u4fbf\u804a\u804a","text":"<p>\u7b14\u8005\u662f\u4e00\u540d\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u4e13\u4e1a\u7684\u5b66\u751f\uff0c\u6765\u81ea\u6d59\u6c5f\u5927\u5b66\u7afa\u9662\u6df7\u5408\u73ed23\u7ea7\uff0c\u4eca\u5e74\u5927\u4e8c\u3002</p> <p>\u5728\u8fd9\u51e0\u5e74\u7684\u5b66\u4e60\u751f\u6d3b\u4e2d\uff0c\u65e9\u6709\u60f3\u901a\u8fc7\u535a\u5ba2\u7684\u5f62\u5f0f\uff0c\u5c06\u81ea\u5df1\u7684\u5b66\u4e60\u8d44\u6599\u548c\u5b66\u4e60\u5fc3\u5f97\u5206\u4eab\u5230\u7f51\u4e0a\u7684\u7ecf\u5386\u3002\u7ec8\u4e8e\u5728\u6b64\u4ed8\u8bf8\u4e8e\u5b9e\u8df5\uff0c\u5176\u5b9e\u6709\u4e9b\u8fdf\u4e86\uff0c\u90e8\u5206\u8bfe\u7a0b\u5c31\u53ea\u597d\u62f7\u8d1d\u5176\u4ed6\u4f18\u79c0\u540c\u5b66\u7684\u7b14\u8bb0\u4e86\u3002</p> <p>\u6211\u7684\u535a\u5ba2\u7a7a\u95f4\u91cc\u9762\u653e\u7f6e\u4e86\u5404\u95e8\u8bfe\u7a0b\u7684\u5b66\u4e60\u8d44\u6599\u3001\u7b14\u8bb0\u548c\u5386\u5e74\u5377\u7b49\uff0c\u5982\u6709\u9519\u8bef\uff0c\u6b22\u8fce\u5404\u4f4d\u6279\u8bc4\u4e0e\u6307\u6b63\uff01</p> <p>\u535a\u5ba2\u8fd8\u6709\u4e00\u4e9b\u6211\u81ea\u5df1\u7684\u968f\u7b14\u548c\u5927\u5b66\u751f\u6d3b\u7684\u611f\u60f3\uff0c\u5e0c\u671b\u5bf9\u5404\u4f4d\u6709\u5e2e\u52a9\uff01</p>"},{"location":"LeetCode/Introduction/","title":"Introduction","text":"<p>\u529b\u6263\u529b\u6263\uff01\u52a0\u6cb9\u5427</p> <p>\u4e0d\u79ef\u8dec\u6b65\u65e0\u4ee5\u81f3\u5343\u91cc~~</p>"},{"location":"LeetCode/chapter1/","title":"1.\u4e24\u6570\u4e4b\u548c","text":"<p>\u54c8\u5e0c\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n) <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        unordered_map&lt;int,int&gt; hash;\n        int i;\n        for(i=0;i&lt;nums.size();i++){\n            auto it = hash.find(target-nums[i]);\n            if(it != hash.end()){\n                return {it-&gt;second,i};\n            }\n            hash[nums[i]]=i;\n        }\n        return {};\n    }\n};\n</code></pre> map\u7b2c\u4e00\u4e2a\u662f\u952e\u503c\uff0c\u7b2c\u4e8c\u4e2a\u662f\u503c\uff0c\u6211\u4eec\u7684\u54c8\u5e0c\u8868\u5c06\u5177\u4f53\u6570\u5b57\u4f5c\u4e3a\u952e\u503c\uff0c\u7d22\u5f15\u4f5c\u4e3a\u503c\uff0chash.find\u51fd\u6570\u627e\u952e\u503c\u7684\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u975e\u5e38\u597d\u7528\u3002\u82e5\u6ca1\u627e\u5230\uff0c\u5c31\u628a\u8fd9\u7ec4\u952e\u503c\u548c\u503c\u585e\u5165\u54c8\u5e0c\u8868\u4e2d\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u67e5\u627e\u3002</p> <p>\u5173\u4e8eunordered_map\u7684\u5185\u5bb9\u3002</p> <p>\u793a\u4f8b\uff1a\u4f7f\u7528 <code>unordered_map</code> \u5b58\u50a8\u548c\u68c0\u7d22\u5b66\u751f\u5206\u6570</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;unordered_map&gt;\nint main() {\n    // \u521b\u5efa\u4e00\u4e2aunordered_map\uff0c\u952e\u662f\u5b66\u751f\u7684\u59d3\u540d\uff08string\u7c7b\u578b\uff09\uff0c\u503c\u662f\u5b66\u751f\u7684\u5206\u6570\uff08int\u7c7b\u578b\uff09\n    std::unordered_map&lt;std::string, int&gt; studentScores;\n    // \u63d2\u5165\u4e00\u4e9b\u5b66\u751f\u7684\u5206\u6570\n    studentScores[\"Alice\"] = 85;\n    studentScores[\"Bob\"] = 90;\n    studentScores[\"Charlie\"] = 78;\n    // \u67e5\u627e\u5e76\u8f93\u51faAlice\u7684\u5206\u6570\n    std::string studentName = \"Alice\";\n    auto search = studentScores.find(studentName);\n    if (search != studentScores.end()) {\n        std::cout &lt;&lt; studentName &lt;&lt; \"'s score is \" &lt;&lt; search-&gt;second &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; studentName &lt;&lt; \" not found\" &lt;&lt; std::endl;\n    }\n    // \u904d\u5386unordered_map\u5e76\u8f93\u51fa\u6240\u6709\u5b66\u751f\u7684\u5206\u6570\n    std::cout &lt;&lt; \"All students' scores:\" &lt;&lt; std::endl;\n    for (const auto&amp; pair : studentScores) {\n        std::cout &lt;&lt; pair.first &lt;&lt; \": \" &lt;&lt; pair.second &lt;&lt; std::endl;\n    }\n    // \u5c1d\u8bd5\u5220\u9664\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u952e\n    studentScores.erase(\"David\");\n    // \u5220\u9664Bob\u7684\u8bb0\u5f55\n    if (studentScores.erase(\"Bob\") &gt; 0) {\n        std::cout &lt;&lt; \"Bob's record has been removed.\" &lt;&lt; std::endl;\n    }\n    // \u518d\u6b21\u904d\u5386unordered_map\n    std::cout &lt;&lt; \"Students' scores after removal:\" &lt;&lt; std::endl;\n    for (const auto&amp; pair : studentScores) {\n        std::cout &lt;&lt; pair.first &lt;&lt; \": \" &lt;&lt; pair.second &lt;&lt; std::endl;\n    }\n    return 0;\n}\n</code></pre> <p>\u8be6\u89e3</p> <ol> <li>\u521b\u5efa <code>unordered_map</code>\uff1a    <pre><code>std::unordered_map&lt;std::string, int&gt; studentScores;\n</code></pre>    \u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a <code>unordered_map</code> \u5bb9\u5668\uff0c\u952e\u662f <code>std::string</code> \u7c7b\u578b\uff0c\u503c\u662f <code>int</code> \u7c7b\u578b\u3002</li> <li>\u63d2\u5165\u5143\u7d20\uff1a    <pre><code>studentScores[\"Alice\"] = 85;\nstudentScores[\"Bob\"] = 90;\nstudentScores[\"Charlie\"] = 78;\n</code></pre>    \u901a\u8fc7\u952e\u503c\u5bf9\u7684\u65b9\u5f0f\u63d2\u5165\u6570\u636e\u3002\u6bcf\u4e2a\u5b66\u751f\u7684\u59d3\u540d\u4f5c\u4e3a\u952e\uff0c\u5206\u6570\u4f5c\u4e3a\u503c\u3002</li> <li>\u67e5\u627e\u5143\u7d20\uff1a    <pre><code>auto search = studentScores.find(studentName);\n</code></pre>    \u4f7f\u7528 <code>find</code> \u65b9\u6cd5\u6765\u67e5\u627e\u952e\u4e3a \"Alice\" \u7684\u5143\u7d20\u3002\u5982\u679c\u627e\u5230\u4e86\uff0c<code>find</code> \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u6307\u5411\u8fd9\u4e2a\u5143\u7d20\uff1b\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u6307\u5411 <code>unordered_map</code> \u7684 <code>end()</code>\u3002</li> <li>\u8bbf\u95ee\u503c\uff1a    <pre><code>if (search != studentScores.end()) {\n    std::cout &lt;&lt; studentName &lt;&lt; \"'s score is \" &lt;&lt; search-&gt;second &lt;&lt; std::endl;\n}\n</code></pre>    \u5982\u679c\u627e\u5230\u4e86\u5143\u7d20\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee\u952e\u503c\u5bf9\u4e2d\u7684\u503c\uff08<code>search-&gt;second</code>\uff09\u3002</li> <li>\u904d\u5386 <code>unordered_map</code>\uff1a    <pre><code>for (const auto&amp; pair : studentScores) {\n    std::cout &lt;&lt; pair.first &lt;&lt; \": \" &lt;&lt; pair.second &lt;&lt; std::endl;\n}\n</code></pre>    \u4f7f\u7528\u8303\u56f4 <code>for</code> \u5faa\u73af\u904d\u5386 <code>unordered_map</code>\u3002<code>pair</code> \u662f\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c<code>pair.first</code> \u662f\u952e\uff0c<code>pair.second</code> \u662f\u503c\u3002</li> <li>\u5220\u9664\u5143\u7d20\uff1a    <pre><code>studentScores.erase(\"David\");\n</code></pre>    \u5c1d\u8bd5\u5220\u9664\u952e\u4e3a \"David\" \u7684\u5143\u7d20\uff0c\u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002    <pre><code>if (studentScores.erase(\"Bob\") &gt; 0) {\n    std::cout &lt;&lt; \"Bob's record has been removed.\" &lt;&lt; std::endl;\n}\n</code></pre>    \u5220\u9664\u952e\u4e3a \"Bob\" \u7684\u5143\u7d20\uff0c<code>erase</code> \u65b9\u6cd5\u8fd4\u56de\u5220\u9664\u7684\u5143\u7d20\u6570\u91cf\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u56e0\u4e3a \"Bob\" \u5b58\u5728\uff0c\u6240\u4ee5\u8fd4\u56de 1\uff0c\u5e76\u8f93\u51fa\u5220\u9664\u4fe1\u606f\u3002</li> <li>\u518d\u6b21\u904d\u5386 <code>unordered_map</code>\uff1a    <pre><code>for (const auto&amp; pair : studentScores) {\n    std::cout &lt;&lt; pair.first &lt;&lt; \": \" &lt;&lt; pair.second &lt;&lt; std::endl;\n}\n</code></pre>    \u518d\u6b21\u904d\u5386 <code>unordered_map</code>\uff0c\u6b64\u65f6 \"Bob\" \u7684\u8bb0\u5f55\u5df2\u7ecf\u88ab\u5220\u9664\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86 <code>unordered_map</code> \u7684\u57fa\u672c\u7528\u6cd5\uff0c\u5305\u62ec\u63d2\u5165\u3001\u67e5\u627e\u3001\u904d\u5386\u548c\u5220\u9664\u64cd\u4f5c\u3002\u7531\u4e8e <code>unordered_map</code> \u4e0d\u4fdd\u8bc1\u5143\u7d20\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u8f93\u51fa\u7684\u987a\u5e8f\u53ef\u80fd\u4e0e\u63d2\u5165\u7684\u987a\u5e8f\u4e0d\u540c\u3002</li> </ol>"},{"location":"LeetCode/chapter1/#_1","title":"\u65e0\u91cd\u590d\u6570\u5b57\u7684\u6700\u957f\u5b50\u4e32","text":"<pre><code>class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_set&lt;char&gt; a;\n        int right=-1;\n        int i;\n        int ans=0;\n        int n=s.size();\n\n        for(i=0;i&lt;n;i++){           \n            if(i!=0){\n                a.erase(s[i-1]);\n            }\n\n            while(right&lt;n-1&amp;&amp;!a.count(s[right+1])){\n                a.insert(s[right+1]);\n                right++;\n            }\n\n\n            ans=max(ans,right-i+1);\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u8fd9\u9898\u4e2dunordered_set\u662f\u4e00\u4e32\u65e0\u5e8f\u4e32\uff0c\u63d2\u5165\u67e5\u627e\u7b49\u590d\u6742\u5ea6\u90fd\u662fO(1)\uff0c\u6700\u597d\u4e00\u5f00\u59cb\u5c31\u5b9a\u4e49int n=s.size()\uff0c\u540e\u9762\u90fd\u7528n\u4ee3\u66ff\uff0c\u5982\u679c\u4e0d\u662f\u8fd9\u6837\u53ef\u80fd\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3as.size()\u8fd4\u56desize_t\u3002\u540c\u65f6\u8fd8\u6709s.erase(),s.insert(),s.count()\u7b49\u51fd\u6570\u597d\u7528\uff0c\u641e\u6e05\u695a\u7528\u719f\u7ec3\u5373\u53ef\u3002</p>"},{"location":"LeetCode/chapter1/#_2","title":"\u6700\u957f\u56de\u6587\u5b50\u4e32","text":"<p><pre><code>class Solution {\npublic:\n    string longestPalindrome(string s) {\n        int n=s.size();\n        if(n&lt;=1) return s;\n\n        //vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n));\n        int dp[n][n];\n        int begin=0;\n        int maxlen =1;\n\n        for(int i=0;i&lt;n;i++) dp[i][i]=1;\n\n        for(int l=2;l&lt;=n;l++){\n            for(int i = 0;i &lt; n;i++){\n                int j= l+i-1;\n                if(j&gt;=n) break;\n                if(s[i]!=s[j]) {dp[i][j]=0;}\n                else{\n                    if(j-i&lt;3)dp[i][j]=1;\n                    else dp[i][j]=dp[i+1][j-1];\n                }\n\n\n                if(dp[i][j]&amp;&amp;j-i+1&gt;maxlen){\n                    begin=i;\n                    maxlen=j-i+1;\n                }\n            }\n        }\n\n        return s.substr(begin,maxlen);\n    }\n};\n</code></pre> \u52a8\u6001\u89c4\u5212\u90e8\u5206\u633a\u7ecf\u5178\u7684\uff0c\u53ef\u4ee5\u91cd\u65b0\u505a\u3002\u540c\u65f6\uff0c\u5173\u6ce8\u5b57\u7b26\u4e32\u5b50\u4e32\u7684\u8868\u793a\u4e3as.substr(begin,len).</p>"},{"location":"LeetCode/chapter1/#7","title":"7.\u6574\u6570\u53cd\u8f6c","text":"<pre><code>class Solution {\npublic:\n    int reverse(int x) {\n        int ans = 0;\n        int n;\n        while (x!=0){\n            if (ans &lt; INT_MIN / 10 || ans &gt; INT_MAX / 10) {\n                return 0;\n            }\n\n            n = x % 10;\n            x/=10;\n            ans = ans*10+n;\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u5728\u60a8\u63d0\u4f9b\u7684\u4ee3\u7801\u4e2d\uff0c<code>if (ans &lt; INT_MIN / 10 || ans &gt; INT_MAX / 10)</code> \u8fd9\u4e00\u884c\u662f\u7528\u6765\u68c0\u67e5\u6574\u6570\u6ea2\u51fa\u7684\u3002\u5728\u53cd\u8f6c\u6574\u6570\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c <code>ans</code> \u7684\u503c\u8d85\u51fa\u4e86 <code>int</code> \u7c7b\u578b\u7684\u8303\u56f4\uff0c\u90a3\u4e48\u4e58\u4ee5 10 \u5e76\u52a0\u4e0a\u65b0\u7684\u6570\u5b57 <code>n</code> \u5c06\u4f1a\u5bfc\u81f4\u6ea2\u51fa\u3002 \u8fd9\u91cc\u662f\u8be6\u7ec6\u89e3\u91ca\uff1a - <code>INT_MIN</code> \u548c <code>INT_MAX</code> \u662f\u5b9a\u4e49\u5728 <code>&lt;climits&gt;</code> \u5934\u6587\u4ef6\u4e2d\u7684\u5b8f\uff0c\u5206\u522b\u8868\u793a <code>int</code> \u7c7b\u578b\u80fd\u8868\u793a\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002 - \u5f53\u4f60\u5c1d\u8bd5\u53cd\u8f6c\u4e00\u4e2a\u6574\u6570\u65f6\uff0c\u4f8b\u5982\u5c06 <code>123</code> \u53cd\u8f6c\u4e3a <code>321</code>\uff0c\u6bcf\u6b21\u5faa\u73af\u4e2d\u4f60\u90fd\u4f1a\u5c06\u5f53\u524d\u7684 <code>ans</code> \u4e58\u4ee5 10\uff0c\u7136\u540e\u52a0\u4e0a\u65b0\u7684\u6570\u5b57\u3002\u5982\u679c <code>ans</code> \u5df2\u7ecf\u63a5\u8fd1 <code>INT_MAX</code> \u6216 <code>INT_MIN</code>\uff0c\u518d\u4e58\u4ee5 10 \u5c31\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6ea2\u51fa\u3002 \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u4ee3\u7801\u5728\u6bcf\u6b21\u5faa\u73af\u4e4b\u524d\u68c0\u67e5 <code>ans</code> \u662f\u5426\u5728\u5b89\u5168\u8303\u56f4\u5185\u3002\u5177\u4f53\u6765\u8bf4\uff1a - <code>ans &lt; INT_MIN / 10</code> \u68c0\u67e5 <code>ans</code> \u662f\u5426\u5c0f\u4e8e <code>int</code> \u7c7b\u578b\u6700\u5c0f\u503c\u7684\u5341\u5206\u4e4b\u4e00\u3002\u5982\u679c\u662f\u8fd9\u6837\uff0c\u90a3\u4e48\u5728\u4e58\u4ee5 10 \u540e\u52a0\u4e0a\u4efb\u4f55\u8d1f\u6570\uff08\u56e0\u4e3a <code>n</code> \u662f <code>x</code> \u7684\u6700\u540e\u4e00\u4f4d\u6570\u5b57\uff0c<code>x</code> \u662f\u8d1f\u6570\u65f6 <code>n</code> \u4e5f\u662f\u8d1f\u6570\uff09\u90fd\u4f1a\u5bfc\u81f4\u6ea2\u51fa\u3002 - <code>ans &gt; INT_MAX / 10</code> \u68c0\u67e5 <code>ans</code> \u662f\u5426\u5927\u4e8e <code>int</code> \u7c7b\u578b\u6700\u5927\u503c\u7684\u5341\u5206\u4e4b\u4e00\u3002\u5982\u679c\u662f\u8fd9\u6837\uff0c\u90a3\u4e48\u5728\u4e58\u4ee5 10 \u540e\u52a0\u4e0a\u4efb\u4f55\u6b63\u6570\u90fd\u4f1a\u5bfc\u81f4\u6ea2\u51fa\u3002 \u5982\u679c <code>ans</code> \u8d85\u51fa\u4e86\u8fd9\u4e2a\u8303\u56f4\uff0c\u51fd\u6570\u5c31\u4f1a\u8fd4\u56de 0\uff0c\u8868\u793a\u53d1\u751f\u4e86\u6ea2\u51fa\uff0c\u53cd\u8f6c\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c\u3002\u8fd9\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u6ea2\u51fa\u68c0\u67e5\u65b9\u6cd5\uff0c\u53ef\u4ee5\u786e\u4fdd\u5728\u53cd\u8f6c\u6574\u6570\u65f6\u4e0d\u4f1a\u8d85\u51fa <code>int</code> \u7c7b\u578b\u7684\u9650\u5236\u3002</p>"},{"location":"LeetCode/chapter1/#9","title":"9.\u56de\u6587\u6570","text":"<pre><code>class Solution {\npublic:\n    bool isPalindrome(int x) {\n        std::string a=to_string(x);\n        std::string b=a;\n        std::reverse(b.begin(),b.end());\n        //if(!std::strcmp(a,b)) return true;\n        //else return false;\n        return a==b;\n    }\n};\n</code></pre> <p>\u5173\u6ce8c\u98ce\u683c\u5b57\u7b26\u4e32\u548cc++\u6807\u51c6\u5b57\u7b26\u4e32\u7684\u533a\u522b\uff01</p> <p>C\u98ce\u683c\u5b57\u7b26\u4e32\u548cC++\u6807\u51c6\u5b57\u7b26\u4e32\uff08<code>std::string</code>\uff09\u5728\u591a\u4e2a\u65b9\u9762\u5b58\u5728\u5dee\u5f02\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4e3b\u8981\u7684\u533a\u522b\uff1a 1. \u7c7b\u578b\u548c\u5c01\u88c5:    - C\u98ce\u683c\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u4ee5 null \u5b57\u7b26 (<code>'\\0'</code>) \u7ed3\u5c3e\u7684\u5b57\u7b26\u6570\u7ec4\uff08<code>char[]</code>\uff09\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u7c7b\uff0c\u5b83\u5c01\u88c5\u4e86\u5b57\u7b26\u6570\u7ec4\u5e76\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u64cd\u4f5c\u5b57\u7b26\u4e32\u7684\u6210\u5458\u51fd\u6570\u3002 2. \u5185\u5b58\u7ba1\u7406:    - C\u98ce\u683c\u5b57\u7b26\u4e32\u9700\u8981\u624b\u52a8\u7ba1\u7406\u5185\u5b58\uff0c\u5305\u62ec\u5206\u914d\u3001\u91ca\u653e\u548c\u8c03\u6574\u5927\u5c0f\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u81ea\u52a8\u7ba1\u7406\u5185\u5b58\uff0c\u5b83\u4f1a\u6839\u636e\u9700\u8981\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u3002 3. \u529f\u80fd:    - C\u98ce\u683c\u5b57\u7b26\u4e32\u7684\u529f\u80fd\u6709\u9650\uff0c\u901a\u5e38\u53ea\u80fd\u901a\u8fc7\u6807\u51c6\u5e93\u51fd\u6570\uff08\u5982 <code>strcpy</code>, <code>strlen</code>, <code>strcmp</code> \u7b49\uff09\u8fdb\u884c\u64cd\u4f5c\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u6210\u5458\u51fd\u6570\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e <code>append</code>, <code>find</code>, <code>replace</code>, <code>substr</code> \u7b49\uff0c\u4ee5\u53ca\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u4f7f\u5f97\u5b57\u7b26\u4e32\u64cd\u4f5c\u66f4\u52a0\u65b9\u4fbf\u548c\u76f4\u89c2\u3002 4. \u5b89\u5168\u6027:    - C\u98ce\u683c\u5b57\u7b26\u4e32\u5bb9\u6613\u51fa\u9519\uff0c\u4f8b\u5982\u7f13\u51b2\u533a\u6ea2\u51fa\u3001\u5fd8\u8bb0\u6dfb\u52a0 null \u7ec8\u6b62\u5b57\u7b26\u7b49\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u66f4\u52a0\u5b89\u5168\uff0c\u56e0\u4e3a\u5b83\u4f1a\u68c0\u67e5\u8fb9\u754c\u5e76\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u9632\u6b62\u9519\u8bef\u3002 5. \u957f\u5ea6\u548c\u5bb9\u91cf:    - \u5bf9\u4e8eC\u98ce\u683c\u5b57\u7b26\u4e32\uff0c\u8981\u83b7\u53d6\u957f\u5ea6\u9700\u8981\u4f7f\u7528 <code>strlen</code> \u51fd\u6570\uff0c\u800c\u4e14\u6ca1\u6709\u76f4\u63a5\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u5bb9\u91cf\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u63d0\u4f9b\u4e86 <code>size()</code> \u6210\u5458\u51fd\u6570\u6765\u83b7\u53d6\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u4ee5\u53ca <code>capacity()</code> \u6765\u83b7\u53d6\u5f53\u524d\u5206\u914d\u7684\u5185\u5b58\u5bb9\u91cf\u3002 6. \u8fed\u4ee3\u5668:    - C\u98ce\u683c\u5b57\u7b26\u4e32\u6ca1\u6709\u63d0\u4f9b\u8fed\u4ee3\u5668\u6982\u5ff5\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u63d0\u4f9b\u4e86\u8fed\u4ee3\u5668\uff0c\u53ef\u4ee5\u7528\u4e8e\u6807\u51c6\u5e93\u7b97\u6cd5\uff0c\u5982 <code>std::sort</code> \u6216 <code>std::find</code>\u3002 7. \u6027\u80fd:    - C\u98ce\u683c\u5b57\u7b26\u4e32\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u66f4\u9ad8\u6548\uff0c\u5c24\u5176\u662f\u5728\u5904\u7406\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u65f6\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u7c7b\u5c01\u88c5\u5e26\u6765\u7684\u989d\u5916\u5f00\u9500\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u6027\u80fd\uff0c\u5c24\u5176\u662f\u5728\u590d\u6742\u64cd\u4f5c\u548c\u5185\u5b58\u7ba1\u7406\u65b9\u9762\u3002 8. \u517c\u5bb9\u6027:    - C\u98ce\u683c\u5b57\u7b26\u4e32\u53ef\u4ee5\u5728C\u548cC++\u4e2d\u4f7f\u7528\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u53ea\u80fd\u5728C++\u4e2d\u4f7f\u7528\u3002 9. \u6784\u9020\u548c\u9500\u6bc1:    - C\u98ce\u683c\u5b57\u7b26\u4e32\u901a\u5e38\u4e0d\u9700\u8981\u663e\u5f0f\u7684\u6784\u9020\u548c\u9500\u6bc1\u8fc7\u7a0b\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u6709\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\uff0c\u5b83\u4eec\u5728\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61\u65f6\u88ab\u8c03\u7528\u3002 \u8fd9\u4e9b\u533a\u522b\u4f7f\u5f97C++\u6807\u51c6\u5b57\u7b26\u4e32\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u66f4\u65b9\u4fbf\u3001\u66f4\u5b89\u5168\u3001\u66f4\u7075\u6d3b\uff0c\u800cC\u98ce\u683c\u5b57\u7b26\u4e32\u5728\u67d0\u4e9b\u7279\u5b9a\u7684\u5e94\u7528\u4e2d\u53ef\u80fd\u66f4\u8f7b\u91cf\u7ea7\u548c\u9ad8\u6548\u3002</p>"},{"location":"LeetCode/chapter1/#c","title":"\u5173\u4e8ec++\u6807\u51c6\u5b57\u7b26\u4e32\u51fd\u6570","text":"<p>csdn\u4e0a\u8bb2\u7684\u597d\uff0cclick here</p>"},{"location":"LeetCode/chapter2/","title":"11.\u79f0\u6700\u591a\u6c34\u7684\u5bb9\u5668","text":"<pre><code>class Solution {\npublic:\n    int maxArea(vector&lt;int&gt;&amp; height) {\n        int n=height.size();\n        if(n==1) return 0;\n\n        int left=0;\n        int right=n-1;\n        int m=0;\n        int max=0;\n        int now;\n\n        while(right-left&gt;0){\n            m=std::min(height[left],height[right]);\n            now=(right-left)*m;\n\n            if(now&gt;max) max=now;\n\n            if(m==height[left]){\n                while(left&lt;right&amp;&amp;height[left]&lt;=m) left++;\n            }else{\n                while(left&lt;right&amp;&amp;height[right]&lt;=m) right--;\n            }\n\n        }\n\n        return max;\n</code></pre> <p>\u53cc\u6307\u9488\u6cd5\uff0c\u53ef\u4ee5\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u4f4e\u5230O(1)\u91cf\u7ea7\u3002\u6ce8\u610f\u672c\u9898\u5185\u5c42while\u5224\u65ad\u6761\u4ef6\u4e0d\u8981\u6f0f\u4e86left &lt; right,\u5426\u5219\u5faa\u73af\u53ef\u80fd\u6c38\u8fdc\u505c\u4e0d\u4e0b\u6765\u3002</p>"},{"location":"LeetCode/chapter2/#12","title":"12.\u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57","text":"<p><pre><code>const pair&lt;int,string&gt; values[]={\n    {1000,\"M\"},{900,\"CM\"},{500,\"D\"},{400,\"CD\"},{100,\"C\"},{90,\"XC\"},{50,\"L\"},{40,\"XL\"},{10,\"X\"},{9,\"IX\"},{5,\"V\"},\n    {4,\"IV\"},{1,\"I\"}\n};\n\nclass Solution {\npublic:\n    string intToRoman(int num) {\n        string a;\n        for(auto const [v,s]:values){\n            while(num&gt;=v){\n                num-=v;\n                a+=s;\n            }\n            if(num==0) break;\n        }\n        return a;\n    }\n};\n</code></pre> \u8fd9\u662f\u65b9\u6cd5\u4e00\uff0c\u8d2a\u5fc3\u601d\u8def\uff0c\u6bcf\u6b21\u627e\u5230\u6700\u5927\u7684\u6570\u5b57\u8fdb\u884c\u51cf\u64cd\u4f5c\u3002\u5173\u6ce8\u4e00\u4e0bc++\u4e2dpair\u7684\u4f7f\u7528\u3002\u5728for\u5faa\u73af\u4e2d\u662f(auto const [v,s]:values)\u7528\u4e2d\u62ec\u53f7\uff0c\u800c\u4e0d\u662f\u82b1\u62ec\u53f7{v,s}\u3002</p> <p>\u540c\u65f6\uff0c\u5173\u4e8epair\u7684\u7528\u6cd5\uff0c\u53ef\u4ee5\u7528std::make_pair(a,b)\u6784\u5efa\u4e00\u4e2apair</p> <p>\u65b9\u6cd5\u4e8c\u5176\u5b9e\u66f4\u52a0\u7b80\u5355\uff0c\u5c31\u662f\u7528\u6807\u51c6\u5b57\u7b26\u4e32\u7684\u52a0\u6cd5\u3002\u5982\u4e0b <pre><code>const string thousands[] = {\"\", \"M\", \"MM\", \"MMM\"};\nconst string hundreds[]  = {\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"};\nconst string tens[]      = {\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"};\nconst string ones[]      = {\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"};\n\nclass Solution {\npublic:\n    string intToRoman(int num) {\n        return thousands[num / 1000] + hundreds[num % 1000 / 100] + tens[num % 100 / 10] + ones[num % 10];\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/chapter2/#13","title":"13.\u7f57\u9a6c\u6570\u5b57\u8f6c\u6210\u6574\u6570","text":"<p>\u679a\u4e3e\u6240\u6709\u60c5\u51b5\u5373\u53ef <pre><code>class Solution {\npublic:\n    int romanToInt(string s) {\n        int num=0;\n        int i=0;\n        int n=s.size();\n        while(i&lt;n){\n            if(s[i]=='M') {num+=1000;i++;}\n            if(s[i]=='D') {num+=500;i++;}\n            if(s[i]=='C') {\n                if(s[i+1]=='M'){num+=900;i+=2;}\n                else if(s[i+1]=='D'){num+=400;i+=2;}\n                else{num+=100;i++;}\n            }\n            if(s[i]=='X'){\n                if(s[i+1]=='C'){num+=90;i+=2;}\n                else if(s[i+1]=='L'){num+=40;i+=2;}\n                else{num+=10;i++;}\n            }\n            if(s[i]=='L'){num+=50;i++;}\n            if(s[i]=='V'){num+=5;i++;}\n            if(s[i]=='I'){\n                if(s[i+1]=='X'){num+=9;i+=2;}\n                else if(s[i+1]=='V'){num+=4;i+=2;}\n                else{num+=1;i++;}\n            }\n        }\n    return num;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/chapter2/#_1","title":"\u6700\u957f\u516c\u5171\u524d\u7f00","text":"<p><pre><code>class Solution {\npublic:\n    string longestCommonPrefix(vector&lt;string&gt;&amp; strs) {\n        string a;\n        int i=0;\n        while(strs[0][i]==strs[1][i]&amp;&amp;strs[0][i]==strs[2][i]){\n            a+=strs[0][i];\n            i++;\n        }\n        return a;\n    }\n};\n</code></pre> \u8fd9\u662f\u4e00\u4e2a\u9519\u8bef\u7684\u505a\u6cd5\uff0c\u6ca1\u6709\u8003\u8651\u5230\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u540c\uff0c\u4f1a\u4ea7\u751f\u8d8a\u754c\u62a5\u9519\u73b0\u8c61\u3002</p> <p>\u6b63\u786e\u7684\u505a\u6cd5\u5982\u4e0b\uff1a <pre><code>class Solution {\npublic:\n    string longestCommonPrefix(vector&lt;string&gt;&amp; strs) {\n       // if(strs.empty()) return \"\";\n        int n=strs.size();\n        string a;\n\n        for(int i=0;i&lt;strs[0].size();i++){\n            for(int j=0;j&lt;n;j++){\n                if(strs[j][i]!=strs[0][i]||i&gt;strs[j].size()){\n                    return a;\n                }\n            }\n            a+=strs[0][i];\n        }\n        return a;\n    }\n};\n</code></pre></p> <p>\u96be\u5ea6\u666e\u901a</p>"},{"location":"LeetCode/chapter2/#15","title":"15.\u4e09\u6570\u4e4b\u548c","text":"<p>\u8fd9\u9053\u9898\u662f\u7b2c\u4e00\u9898\u4e24\u6570\u4e4b\u548c\u7684\u52a0\u5f3a\u7248</p> <p>\u65b9\u6cd5\u4e00\u4ecd\u7136\u7528\u54c8\u5e0c\u8868\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nn)\uff0c\u5173\u952e\u5728\u4e8e\u6bcf\u4e00\u6b65\u7684\u4e25\u8c28\u6027\uff0c\u9996\u5148\u8981\u5c06nums[]\u6392\u5e8f\uff0c\u4ece\u800c\u8df3\u8fc7\u91cd\u590d\u7684\u3002\u5176\u6b21\uff0c\u5e94\u8be5\u5728\u904d\u5386\u7b2c\u4e00\u5c42i\u5faa\u73af\u8fc7\u7a0b\u4e2d\u6bcf\u6b21\u65b0\u5efa\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0c\u4e0d\u53ef\u4e00\u5f00\u59cb\u5728\u53cc\u5faa\u73af\u5916\u9762\u76f4\u63a5\u5efa\u7acb\u54c8\u5e0c\u8868\u3002\u5e76\u4e14\uff0c\u5173\u4e8ei\u548cj\u7684\u8df3\u8fc7\u91cd\u590d\u7684\u64cd\u4f5c\u8fd8\u662f\u6709\u70b9\u590d\u6742\u7684 <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n\n        std::sort(nums.begin(), nums.end()); // \u5148\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n        for(int i=0;i&lt;nums.size();i++){\n            if(i&gt;0&amp;&amp;nums[i]==nums[i-1]) continue;\n            unordered_map&lt;int,int&gt; hash;\n            for(int j=i+1;j&lt;nums.size();j++){\n                //if(j&gt;0&amp;&amp;nums[j]==nums[j-1]) continue;\n                auto it = hash.find(-nums[i]-nums[j]);\n                if(it!=hash.end()){\n                    ans.push_back({nums[i],nums[j],it-&gt;first});\n                    while(j+1&lt;nums.size()&amp;&amp;nums[j]==nums[j+1]) j++;\n                }\n                    //hash[nums[i]]=i;\n\n                    hash[nums[j]]=j;\n\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> \u65b9\u6cd5\u4e8c*\u662f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u904d\u5386first\u7136\u540esecond\u548cthird\u6307\u9488\u5206\u522b\u4ece\u5de6\u8fb9\u548c\u53f3\u8fb9\u5411\u5bf9\u65b9\u79fb\u52a8\u4ee5\u4fbf\u5bfb\u627e\u5230\u6700\u7ec8\u7684\u9700\u8981\u7684\u7b54\u6848\uff0c\u5177\u4f53\u8fc7\u7a0b\u4e2d\u7684\u6bcf\u4e00\u6b65\u7684\u6761\u4ef6\u90fd\u5f88\u4e25\u8c28\uff0c\u5bb9\u6613\u9519\u8bef <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        int n=nums.size();\n        std::sort(nums.begin(),nums.end());\n        int third;\n        for(int first=0;first&lt;n;first++){\n            if(first&gt;0&amp;&amp;nums[first]==nums[first-1]) continue;\n            third=n-1;\n            for(int second=first+1;second&lt;n;second++){\n                if(second&gt;first+1 &amp;&amp; nums[second]==nums[second-1]) continue;\n                while(second&lt;third&amp;&amp;nums[first]+nums[second]+nums[third]&gt;0) third--;\n                if(second==third)break;\n\n                if(nums[first]+nums[second]+nums[third]==0) ans.push_back({nums[first],nums[second],nums[third]});\n            }\n        }\n        return ans;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/chapter2/#17","title":"17.\u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c","text":"<p><pre><code>class Solution {\npublic:\n    int threeSumClosest(vector&lt;int&gt;&amp; nums, int target) {\n        int n= nums.size();\n        int best=1e5;\n        int current;\n        int second;\n        int third;\n        std::sort(nums.begin(),nums.end());\n\n        for(int first=0;first&lt;n;first++){\n                second=first+1;\n                third=n-1;\n                while(second&lt;third){\n                    int sum=nums[first]+nums[second]+nums[third];\n                    if(sum==target) return target;\n                    if(abs(sum-target)&lt;abs(best-target)) best = sum;\n                    if(sum&gt;target){\n                        third--; \n                    }else{\n                        second++;\n                    }\n                }  \n            }\n        return best;\n        }\n};\n</code></pre> \u540c\u6837\u662f\u53cc\u6307\u9488\u6cd5\u3002\u5173\u6ce8\u7edd\u5bf9\u503c\u51fd\u6570abs\u7684\u8fd0\u7528\uff0c\u4ee5\u53ca\u53ef\u4ee5\u5728\u8868\u793a\u4e00\u4e2a\u5f88\u5927\u7684\u6570\u65f6\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\uff0c\u6bd4\u5982\u8fd9\u9053\u9898\u4e2d\u7684best=1e5;\u8868\u793a\u4e00\u4e58\u5341\u7684\u4e94\u6b21\u65b9\u3002</p>"},{"location":"LeetCode/chapter2/#17_1","title":"17.\u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408","text":"<p>\u8fd9\u662f\u4e00\u9053\u5f88\u7ecf\u5178\u7684\u56de\u6eaf\u7b97\u6cd5\u9898\uff0c\u540c\u65f6\u4e5f\u662f\u5bf9c++\u5404\u79cd\u5bb9\u5668\u64cd\u4f5c\u3001\u8bed\u6cd5\u8fd0\u7528\u7684\u7ecf\u5178\u3002\u672c\u4eba\u7684\u89e3\u7b54\uff1a <pre><code>void backtrack(vector&lt;string&gt; &amp;ans,string &amp;a,int index,string &amp;digits,unordered_map&lt;char,string&gt; &amp;phonemap){\n    if(index==digits.length()){\n        ans.push_back(a);\n    }\n    char k = digits[index];\n    for(char c:phonemap[k]){\n        a.push_back(c);\n        backtrack(ans,a,index+1,digits,phonemap);\n        a.pop_back();\n    }\n}\n\nclass Solution {\npublic:\n    vector&lt;string&gt; letterCombinations(string digits) {\n        if(digits.empty()) return {};\n        unordered_map&lt;char,string&gt; phonemap{\n            {'2',\"abc\"},{'3',\"def\"},{'4',\"ghi\"},\n            {'5',\"jkl\"},{'6',\"mno\"},{'7',\"pqrs\"},\n            {'8',\"tuv\"},{'9',\"wxyz\"}\n        };\n        string a;\n        vector&lt;string&gt; ans;\n        backtrack(ans,a,0,digits,phonemap);\n        return ans;\n    }\n};\n</code></pre> \u51e0\u70b9\u5173\u6ce8\u4e00\u4e0b\u5427\uff1a 1. unordered map\u54c8\u5e0c\u8868\u7684\u5efa\u7acb 2. \u5bf9\u4e8e\u7a7a\u5bb9\u5668vector\u7684\u8fd4\u56de\uff0c\u7528\u82b1\u62ec\u53f7\u5373\u53ef\uff0creturn {}; 3. string digits.length(),\u6807\u51c6\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u51fd\u6570 4. \u5411\u91cfvector\u64cd\u4f5c\u51fd\u6570\uff0cpush_back\u548cpop_back(),\u8fdb\u6808\u6216\u51fa\u6808 VS set a.insert()\u51fd\u6570\uff0c\u8fd9\u4e9b\u5404\u81ea\u7684\u51fd\u6570\u4e0d\u8981\u6df7\u6dc6 5. map\u4e2d\u54c8\u5e0c\u8868\u7d22\u5f15\u76f4\u63a5\u7528phonemap[k]\uff0c\u5b98\u65b9\u9898\u89e3\u4e5f\u884c\u5427\uff0c\u7528\u4e86at\u51fd\u6570     <code>cpp  char digit = digits[index];             const string&amp; letters = phoneMap.at(digit);             for (const char&amp; letter: letters) {</code></p>"},{"location":"LeetCode/chapter2/#19n","title":"19.\u5220\u9664\u5217\u8868\u7684\u5012\u6570\u7b2cn\u4e2a\u7ed3\u70b9","text":"<pre><code>**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode *dump= new ListNode(0,head);\n        ListNode *tempt=new ListNode;\n        tempt=head;\n        int l=0;\n        while (tempt){\n            l++;\n            tempt=tempt-&gt;next;\n        }\n        tempt=dump;\n\n        if(l==n) return head-&gt;next;\n        for(int i=0;i&lt;l-n;i++){\n            tempt=tempt-&gt;next;\n        }\n        tempt-&gt;next=tempt-&gt;next-&gt;next;\n        return head;\n    }\n};\n</code></pre> <p>\u590d\u4e60\u4e00\u4e0b\u94fe\u8868\u5427\uff0c\u987a\u4fbf\u628ac++\u4e2d\u7684new\u51fd\u6570\u7528\u719f\u7ec3\uff0c\u4f8b\u5982\u672c\u9898\u4e2dListNode* dump=new ListNode(0,head);\u540c\u65f6\uff0c\u94fe\u8868\u7ecf\u5e38\u5efa\u7acb\u4e00\u4e2a\u7a7a\u8868\u5934\u6765\u907f\u514d\u5bf9\u5934\u8282\u70b9\u7684\u5206\u7c7b\u8ba8\u8bba\u3002\u8fd8\u86ee\u597d\u7684\u4e00\u9053\u57fa\u7840\u9898\u3002</p>"},{"location":"LeetCode/chapter2/#20","title":"20.\u6709\u6548\u7684\u62ec\u53f7","text":"<p><pre><code>class Solution {\npublic:\n    bool isValid(string s) {\n        int n=s.size();\n        if(n%2==1) return false;\n        stack&lt;char&gt; stk;\n        unordered_map&lt;char,char&gt; m={\n            {')','('},{']','['},{'}','{'}\n        };\n        for(char c:s){\n            if(m.count(c)){\n                if(stk.empty()||stk.top()!=m[c]){\n                    return false;\n                }else{\n                    stk.pop();\n                }\n            }else{\n                stk.push(c);\n            }\n        }\n        return stk.empty();\n    }\n};\n</code></pre> \u6ce8\u610f\u5806\u6808\u7684\u4f7f\u7528\uff01stack\u7c7b\u7684\u51fd\u6570\uff0cpop(),empty(),push(\u00b7\u00b7\u00b7)\u3002\u540c\u65f6\uff0c\u5173\u4e8emap\uff0cmap.count()\u51fd\u6570\u662f\u7528\u4e8e\u952e\u7684\u8ba1\u6570\uff0c\u800c\u4e0d\u662f\u503c\u7684\u8ba1\u6570\u3002</p> <p>\u6216\u8005\u7528\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u76f4\u63a5\u679a\u4e3e\u4e09\u79cd\u60c5\u51b5\uff1a <pre><code>class Solution {\npublic:\n    bool isValid(string s) {\n      stack&lt;int&gt; st;\n      for (int i = 0; i &lt; s.size(); i++) {\n        if (s[i] == '(' || s[i] == '[' || s[i] == '{') st.push(i);\n        else {\n          if (st.empty()) return false;\n          if (s[i] == ')' &amp;&amp; s[st.top()] != '(') return false;\n          if (s[i] == '}' &amp;&amp; s[st.top()] != '{') return false;\n          if (s[i] == ']' &amp;&amp; s[st.top()] != '[') return false;\n          st.pop();\n        }\n      }\n      return st.empty();\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/chapter3/","title":"21.\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868","text":"<p><pre><code>lass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {\n        ListNode* head=new ListNode();\n        ListNode* tempt=head;\n\n        while(list1&amp;&amp;list2){\n            if(list1-&gt;val&lt;list2-&gt;val){\n                ListNode *p=new ListNode();\n                p-&gt;val=list1-&gt;val;\n                tempt-&gt;next=p;\n                tempt=tempt-&gt;next;\n                list1=list1-&gt;next;\n            }else{\n                ListNode *p=new ListNode();\n                p-&gt;val=list2-&gt;val;\n                tempt-&gt;next=p;\n                tempt=tempt-&gt;next;\n                list2=list2-&gt;next;\n            }\n        }\n        if(list1){\n            tempt-&gt;next=list1;\n\n        }\n        if(list2){\n            tempt-&gt;next=list2;\n        }\n        return head-&gt;next;\n    }\n};\n\n\n//\u6216\u8005\n\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode *a, ListNode *b) {\n        if ((!a) || (!b)) return a ? a : b;\n        ListNode head, *tail = &amp;head, *aPtr = a, *bPtr = b;\n        while (aPtr &amp;&amp; bPtr) {\n            if (aPtr-&gt;val &lt; bPtr-&gt;val) {\n                tail-&gt;next = aPtr; aPtr = aPtr-&gt;next;\n            } else {\n                tail-&gt;next = bPtr; bPtr = bPtr-&gt;next;\n            }\n            tail = tail-&gt;next;\n        }\n        tail-&gt;next = (aPtr ? aPtr : bPtr);\n        return head.next;\n    }\n</code></pre> \u65b9\u6cd5\u4e00\u5c31\u662f\u6700\u5e38\u89c4\u7684\u8fed\u4ee3\u6cd5\u3002\u65b0\u5efa\u4e00\u4e2atempt\u8282\u70b9\u6bcf\u6b21\u53f3\u79fb\u3002\u7136\u540e\u6bcf\u6b21\u6bd4\u8f83\u540e\u65b0\u5efa\u4e00\u4e2ap\u8282\u70b9\u63a5\u5728tempt\u540e\u9762\u3002\u7136\u540etempt\u53f3\u79fb\u5373\u53ef\uff0c\u6700\u540e\u628a\u6ca1\u6bd4\u8f83\u5b8c\u7684\u5269\u4f59\u5e8f\u5217\u76f4\u63a5\u63a5\u4e0a</p> <p>\u65b9\u6cd5\u4e8c\u662f\u7b80\u4fbf\u7684\u9012\u5f52\u6cd5\uff0c\u5f88\u5999\u3002 <pre><code>class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        if (l1 == nullptr) {\n            return l2;\n        } else if (l2 == nullptr) {\n            return l1;\n        } else if (l1-&gt;val &lt; l2-&gt;val) {\n            l1-&gt;next = mergeTwoLists(l1-&gt;next, l2);\n            return l1;\n        } else {\n            l2-&gt;next = mergeTwoLists(l1, l2-&gt;next);\n            return l2;\n        }\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/chapter3/#22","title":"22.\u62ec\u53f7\u751f\u6210","text":"<p>\u8fd9\u9898\u53c8\u662f\u56de\u6eaf\u6cd5\uff0b\u9012\u5f52\u7684\u7ecf\u5178\u5e94\u7528\uff0c\u6ce8\u610fgenerate\u51fd\u6570\u4e2d\u5012\u6570\u7b2c\u4e8c\u6b65a.pop_back\u5343\u4e07\u4e0d\u8981\u6f0f\u4e86\uff01\u4e0d\u53ef\u6539\u53d8a\u5b57\u7b26\u4e32\uff0c\u56e0\u4e3a\u540e\u9762\u7684\u56de\u6eaf\u9700\u8981\u3002 <pre><code>class Solution {\n\n    bool valid(string &amp;a){\n            int balance=0;\n            for(char c:a){\n                if(c=='(') balance++;\n                if(c==')') balance--;\n                if(balance&lt;0) return false;\n            }\n            if (balance==0) return true;\n            else return false;\n        }\n\n    void generate(string &amp;a,vector&lt;string&gt; &amp;ans,int n){\n        if(a.size()==n&amp;&amp;valid(a)){\n            ans.push_back(a);\n            return ;\n        }\n        if(a.size()==n&amp;&amp;!valid(a)) return;\n\n            a+='(';\n            generate(a,ans,n);\n            a.pop_back();\n            a+=')';\n            generate(a,ans,n);\n           a.pop_back();//\u8fd9\u4e00\u6b65\u5343\u4e07\u4e0d\u8981\u5fd8\u8bb0\uff0c\u4e3a\u4e86\u4e4b\u540e\u7684\u56de\u6eaf\uff0c\u5b57\u7b26\u4e32a\u662f\u4e0d\u53ef\u6539\u53d8\u7684\uff01\uff01\u6ce8\u610f\n            return;\n    }\n\npublic:\n    vector&lt;string&gt; generateParenthesis(int n) {\n        vector&lt;string&gt; ans;\n        string a=\"\";\n        generate(a,ans,2*n);\n        return ans;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/chapter3/#23k","title":"23.\u5408\u5e76k\u4e2a\u5347\u5e8f\u5217\u8868","text":"<p>\u65b9\u6cd5\u4e00 \u4f7f\u7528\u9012\u5f52\u6cd5\uff0c\u5148\u7ed9\u51fa\u5408\u5e76\u4e24\u4e2a\u5e8f\u5217\u7684\u51fd\u6570\uff0c\u518d\u4f9d\u6b21\u904d\u5386vector&lt; ListNode&gt;\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u5e8f\u5217\u4f9d\u6b21\u4e24\u4e24\u5408\u5e76\uff0c\u6700\u7ec8\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(nkK)\uff0c\u8fd9\u662f\u4e00\u4e2a\u5e38\u89c4\u7684\u65b9\u6cd5\u3002</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergetwo(ListNode*head,ListNode *one){\n        //ListNode* ans= new ListNode();\n        if(head==nullptr){\n            return one;\n        }\n        if(one==nullptr){\n            return head;\n        }\n        if(head-&gt;val&lt;one-&gt;val){\n            head-&gt;next=mergetwo(head-&gt;next,one);\n        }else{\n            one-&gt;next=mergetwo(head,one-&gt;next);\n        }\n\n        return head-&gt;val&lt;one-&gt;val?head:one;\n\n    }\n\n    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n        ListNode* head = nullptr;\n        //\u5343\u4e07\u4e0d\u53ef\u5199\u6210ListNode *head=new ListNode()!\u56e0\u4e3ahead\u5fc5\u987b\u662f\u4e00\u4e2a\u7a7a\u8282\u70b9\uff01\n        int n= lists.size();\n        for(int i=0;i&lt;n;i++){\n            head=mergetwo(head,lists[i]);\n        }\n        return head;\n\n    }\n};\n</code></pre> <p>\u65b9\u6cd5\u4e8c\u7528\u5f52\u5e76\uff0cmergetwo\u51fd\u6570\u4e0d\u53d8\uff0c\u4e3b\u51fd\u6570\u53d8\u4e00\u4e0b\uff0c\u6539\u8fdb\u5982\u4e0b, <pre><code>ListNode* merge(vector &lt;ListNode*&gt; &amp;lists, int l, int r) {\n        if (l == r) return lists[l];\n        if (l &gt; r) return nullptr;\n        int mid = (l + r) &gt;&gt; 1;\n        return mergeTwoLists(merge(lists, l, mid), merge(lists, mid + 1, r));\n    }\n\nListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n        return merge(lists, 0, lists.size() - 1);\n    }\n</code></pre></p> <p>\u65b9\u6cd5\u4e09 \u4f18\u5148\u961f\u5217\uff0c\u5230\u65f6\u5019\u518d\u770b</p>"},{"location":"LeetCode/chapter3/#24","title":"24.\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u7ed3\u70b9","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\n\n\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        if(head==nullptr||head-&gt;next==nullptr) return head;\n\n        ListNode* tail=new ListNode();\n        tail=head-&gt;next;\n\n        head-&gt;next = swapPairs(head-&gt;next-&gt;next);\n        tail-&gt;next=head;\n        return tail;\n\n    }\n};\n</code></pre> <p>\u9012\u5f52\u554a\uff0c\u51e0\u6b65\u5c31\u7ed3\u675f\u4e86</p>"},{"location":"LeetCode/chapter3/#25k","title":"25.k\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u5217\u8868","text":"<p>\u4e00\u9053\u7efc\u5408\u7684\u6bd4\u8f83\u96be\u7684\u9898\u76ee\uff0c\u4e0d\u4ec5\u8981\u719f\u7ec3\u8fd0\u7528\u9012\u5f52\uff08\u8fd9\u91cc\u4e24\u5c42\u9012\u5f52\uff09\uff0c\u8fd8\u8981\u719f\u7ec3\u94fe\u8868\u7684\u7ffb\u8f6c\u3002</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\n\n    bool lastnodes(ListNode* head,int k){\n        for(int i=0;i&lt;k;i++){\n            if(head==nullptr) return false;\n            head=head-&gt;next;\n        }\n        return true;\n    }\n\n    ListNode* reversek(ListNode* head,ListNode* tail){\n        ListNode* curr=head;\n        ListNode* q=new ListNode();//q\u5e94\u8be5\u662fNULL\u624d\u5bf9\uff01\u53ea\u662f\u5728\u8fd9\u9053\u9898\u4e2d\u53ef\u4ee5\u4e3a\u65b0\u5efa\u7a7a\u95f4\u3002\n        ListNode* p=new ListNode();\n\n        while(curr!=tail){\n\n            p=curr-&gt;next;\n            curr-&gt;next=q;\n            q=curr;\n            curr=p;\n        }\n        tail-&gt;next=q;\n        return tail;\n    }\n\npublic:\n    ListNode* reverseKGroup(ListNode* head, int k) {\n        if(lastnodes(head,k)==false) return head;\n        ListNode* tail=new ListNode();\n        tail=head;\n        for(int i=0;i&lt;k-1;i++){\n            tail=tail-&gt;next;\n        }\n       ListNode* nextgrouphead=tail-&gt;next;\n       ListNode* newhead=reversek(head,tail);\n       head-&gt;next=reverseKGroup(nextgrouphead,k);\n       return newhead;\n    }\n};\n</code></pre>"},{"location":"LeetCode/chapter3/#26","title":"26.\u5220\u9664\u6709\u5e8f\u6570\u7ec4\u7684\u91cd\u590d\u9879","text":"<pre><code>class Solution {\npublic:\n    int removeDuplicates(vector&lt;int&gt;&amp; nums) {\n        if (nums.empty()) return 0;  // \u5982\u679c\u6570\u7ec4\u4e3a\u7a7a\uff0c\u76f4\u63a5\u8fd4\u56de 0\n\n        int k = 1;  // \u8bb0\u5f55\u4e0d\u91cd\u590d\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u521d\u59cb\u4e3a 1\uff08\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e00\u5b9a\u4e0d\u91cd\u590d\uff09\n        for (int i = 1; i &lt; nums.size(); i++) {\n            if (nums[i] != nums[k - 1]) {  // \u5982\u679c\u5f53\u524d\u5143\u7d20\u4e0e\u4e0a\u4e00\u4e2a\u4e0d\u91cd\u590d\u5143\u7d20\u4e0d\u540c\n                nums[k] = nums[i];         // \u5c06\u5f53\u524d\u5143\u7d20\u653e\u5230 k \u7684\u4f4d\u7f6e\n                k++;                       // \u589e\u52a0\u4e0d\u91cd\u590d\u5143\u7d20\u7684\u8ba1\u6570\n            }\n        }\n        return k;  // \u8fd4\u56de\u4e0d\u91cd\u590d\u5143\u7d20\u7684\u4e2a\u6570\n    }\n};\n</code></pre>"},{"location":"LeetCode/chapter3/#27","title":"27.\u79fb\u9664\u5143\u7d20","text":"<p>\u7b80\u5355\u65e0\u8111 <pre><code>class Solution {\npublic:\n    int removeElement(vector&lt;int&gt;&amp; nums, int val) {\n        vector&lt;int&gt; ans;\n        int k=0;\n        for(int i=0;i&lt;nums.size();i++){\n            if(nums[i]!=val){\n                nums[k]=nums[i];\n                k++;\n            }\n        }\n        return k;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/chapter3/#28","title":"28. \u627e\u51fa\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u7684\u4e0b\u6807","text":"<p>\u7b80\u5355\u65e0\u8111 <pre><code>class Solution {\n    bool issame(string haystack,string needle,int i){\n        int n=needle.size();\n        int j;\n        for(j=0;j&lt;n;j++){\n            if(haystack[i+j]!=needle[j]) return false;\n        }\n        return true;\n\n    }\n\npublic:\n    int strStr(string haystack, string needle) {\n         if (needle.empty()) return 0;\n\n        for(int i=0;i&lt;haystack.length();i++){\n            if(issame(haystack,needle,i)){\n                return i;\n            }\n        }\n\n        return -1;\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/chapter3/#30","title":"30.\u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32","text":"<p>\u6709\u70b9\u96be\u7684\u4e00\u9053\u9898</p> <p>\u65b9\u6cd5\u4e00</p> <p>\u8fd9\u662f\u6211\u7684\u65b9\u6cd5,\u6bcf\u6b21\u904d\u5386\u65b0\u5efa\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0c\u7136\u540e\u904d\u5386\u5355\u8bcd\uff0c\u5c06words\u91cc\u9762\u7684\u4f9d\u6b21\u51cf\u53bb\uff0c\u5c06a\u91cc\u9762\u7684\u4f9d\u6b21\u52a0\u4e0a\uff0c\u6700\u540e\u68c0\u9a8c\u662f\u5426\u4e3a0\u5f97\u51fa\u5224\u65ad\u3002\u53ef\u60b2\u7684\u662f\uff0c\u7b97\u6cd5\u6b63\u786e\u4f46\u8d85\u65f6\u4e86\uff0c\u56e0\u4e3a\u5faa\u73af\u592a\u591a\uff0c\u7531\u4e8e\u6bcf\u6b21\u65b0\u5efa\u54c8\u5e0c\u8868\uff0c\u5360\u7528\u5185\u5b58\u4e5f\u504f\u5927\u3002</p> <p>o(&gt;\ufe4f&lt;)o\u4e0d\u8981\u554a</p> <p>\u7b2c\u4e00\u5c42\u5faa\u73af\u6ce8\u610f\u4e86\uff0c\u662f<code>for(;i+m*n&lt;=k;)</code>\uff0c\u5fc5\u987b\u662f\u5c0f\u4e8e\u7b49\u4e8e\u53f7\uff0c\u4e0d\u662f\u5c0f\u4e8e\u53f7\u3002\u6bcf\u6b21\u66f4\u65b0i\u65f6\u8981\u5c06a\u5b57\u7b26\u4e32\u7ec4\u6e05\u9664\u91cd\u5f00\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; findSubstring(string s, vector&lt;string&gt;&amp; words) {\n        if(words.empty()) return {};\n        vector&lt;int&gt; ans;\n        int k=s.size();\n        int n=words[0].size();\n        int m=words.size();\n        vector&lt;string&gt; a;\n        for(int i=0;i+m*n&lt;=k;i++){\n            a.clear();\n            bool find=true;\n            unordered_map&lt;string,int&gt; differ;\n            for(int j=0;j&lt;m*n;j+=n){\n                a.push_back(s.substr(i+j,n));\n            }\n            for(string b:a){\n                differ[b]++;\n            }\n            for(string b:words){\n                differ[b]--;\n            }\n            for(auto pair:differ){\n                if(pair.second!=0){\n                    find=false;\n                    break;\n                }\n            }\n            if(find){\n                ans.push_back(i);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u65b9\u6cd5\u4e8c</p> <p>\u4e0b\u9762\u662f\u6539\u8fdb\u7684\u65b9\u6cd5\uff1a\u54c8\u5e0c\u8868\u6bcf\u6b21\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u8fdb\u884c\u590d\u5236\uff0c\u65b0\u5355\u8bcd\u7684\u6536\u5f55\u68c0\u9a8c\u90fd\u5728\u540c\u4e00\u6b21j\u5faa\u73af\u4e2d\u3002\u68c0\u9a8c\u6761\u4ef6\u4e3a<code>temp_count.find(current_word) == temp_count.end() || temp_count[current_word] == 0</code>\uff0c\u633a\u96be\u60f3\u5230\u7684\u3002 \u4f46\u662f\u8fd9\u4e2a\u65b9\u6cd5\u7adf\u7136\u4e5f\u8d85\u65f6\u4e86\uff0c\u53ef\u6076</p> <pre><code>#include &lt;vector&gt;\n#include &lt;string&gt;\n#include &lt;unordered_map&gt;\n\nclass Solution {\npublic:\n    vector&lt;int&gt; findSubstring(string s, vector&lt;string&gt;&amp; words) {\n        if (words.empty() || s.empty()) return {};\n        vector&lt;int&gt; ans;\n        int n = words[0].size(); // \u5355\u8bcd\u957f\u5ea6\n        int m = words.size(); // \u5355\u8bcd\u6570\u91cf\n        int k = s.size();\n        unordered_map&lt;string, int&gt; word_count;\n\n        // \u521d\u59cb\u5316\u5355\u8bcd\u51fa\u73b0\u6b21\u6570\u7684\u54c8\u5e0c\u8868\n        for (const string&amp; word : words) {\n            ++word_count[word];\n        }\n\n        // \u904d\u5386\u5b57\u7b26\u4e32s\u4e2d\u7684\u6bcf\u4e2a\u53ef\u80fd\u7684\u8d77\u59cb\u4f4d\u7f6e\n        for (int i = 0; i &lt;= k - m * n; ++i) {\n            unordered_map&lt;string, int&gt; temp_count(word_count); // \u62f7\u8d1d\u4e00\u4efd\u7528\u4e8e\u672c\u6b21\u68c0\u67e5\n            // \u68c0\u67e5\u4ece\u4f4d\u7f6ei\u5f00\u59cb\u7684\uff0c\u957f\u5ea6\u4e3am*n\u7684\u5b50\u4e32\n            for (int j = 0; j &lt; m; ++j) {\n                string current_word = s.substr(i + j * n, n);\n                // \u5982\u679c\u5f53\u524d\u5355\u8bcd\u4e0d\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u6216\u8005\u8ba1\u6570\u5df2\u7ecf\u4e3a0\uff0c\u5219\u8df3\u51fa\u5faa\u73af\n                if (temp_count.find(current_word) == temp_count.end() || temp_count[current_word] == 0) {\n                    break;\n                }\n                --temp_count[current_word]; // \u51cf\u5c11\u5f53\u524d\u5355\u8bcd\u7684\u8ba1\u6570\n                // \u5982\u679c\u8fd9\u662f\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\uff0c\u4e14\u8ba1\u6570\u90fd\u5df2\u7ecf\u5339\u914d\uff0c\u5219\u8bb0\u5f55\u8d77\u59cb\u4f4d\u7f6e\n                if (j + 1 == m) {\n                    ans.push_back(i);\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u65b9\u6cd5\u4e09</p> <p>\u5b98\u65b9\u89e3\u6cd5\uff1a\u6ed1\u52a8\u7a97\u53e3\u6cd5 \u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u7b97\u6cd5\u6bd4\u4e4b\u524d\u7684\u5feb\uff1a<code>\u6ed1\u52a8\u7a97\u53e3</code>\uff1a\u7b97\u6cd5\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u6765\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002\u6bcf\u6b21\u7a97\u53e3\u5411\u53f3\u6ed1\u52a8\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\uff0c\u800c\u4e0d\u662f\u91cd\u65b0\u8ba1\u7b97\u6574\u4e2a\u7a97\u53e3\u5185\u7684\u5355\u8bcd\u3002<code>\u54c8\u5e0c\u8868\u66f4\u65b0</code>\uff1a\u5728\u6ed1\u52a8\u7a97\u53e3\u79fb\u52a8\u65f6\uff0c\u7b97\u6cd5\u53ea\u66f4\u65b0\u7a97\u53e3\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u8ba1\u6570\uff0c\u800c\u4e0d\u662f\u91cd\u65b0\u8ba1\u7b97\u6574\u4e2a\u7a97\u53e3\u5185\u7684\u5355\u8bcd\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; findSubstring(string &amp;s, vector&lt;string&gt; &amp;words) {\n        vector&lt;int&gt; res;\n        int m = words.size(), n = words[0].size(), ls = s.size();\n        for (int i = 0; i &lt; n &amp;&amp; i + m * n &lt;= ls; ++i) {\n            unordered_map&lt;string, int&gt; differ;\n            for (int j = 0; j &lt; m; ++j) {\n                ++differ[s.substr(i + j * n, n)];\n            }\n            for (string &amp;word: words) {\n                if (--differ[word] == 0) {\n                    differ.erase(word);\n                }\n            }\n            for (int start = i; start &lt; ls - m * n + 1; start += n) {\n                if (start != i) {\n                    string word = s.substr(start + (m - 1) * n, n);\n                    if (++differ[word] == 0) {\n                        differ.erase(word);\n                    }\n                    word = s.substr(start - n, n);\n                    if (--differ[word] == 0) {\n                        differ.erase(word);\n                    }\n                }\n                if (differ.empty()) {\n                    res.emplace_back(start);\n                }\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"LeetCode/chapter4/","title":"31.\u4e0b\u4e00\u4e2a\u6392\u5217","text":"<p>\u65b9\u6cd5\u4e00</p> <p>\u6709\u70b9\u96be\u60f3\uff0c\u4ece\u6700\u540e\u904d\u5386\u5230\u975e\u964d\u5e8f\u7684\u5143\u7d20\uff0c\u518d\u4ece\u6700\u540e\u904d\u5386\u5230\u6bd4\u5b83\u5927\u7684\u5143\u7d20\uff0c\u4e24\u8005\u4ea4\u6362\uff0c\u4e4b\u540e\u7684\u5143\u7d20\u4eec\u518d\u7edf\u7edf\u4ea4\u6362\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n).</p> <pre><code>class Solution {\npublic:\n    void nextPermutation(vector&lt;int&gt;&amp; nums) {\n        int i= nums.size()-2;\n        while(i&gt;=0&amp;&amp;nums[i]&gt;=nums[i+1]) i--;\n        if(i&gt;=0){\n            int j=nums.size()-1;\n            while(j&gt;=0&amp;&amp;nums[i]&gt;=nums[j]) j--;\n            swap(nums[i],nums[j]);\n        }\n        reverse(nums.begin()+1+i,nums.end());\n    }\n};\n</code></pre> <p>Tip</p> <p>\u5173\u6ce8\u4e00\u4e0b\uff0cc++\u7684\u672c\u8eab\u5c31\u6709\u7684\u51fd\u6570swap(),\u548creverse\u51fd\u6570\uff0creverse\u51fd\u6570\u91cc\u9762\u662f\u4e24\u4e2a\u8fed\u4ee3\u5668</p>"},{"location":"LeetCode/chapter4/#32","title":"32.\u6700\u957f\u6709\u6548\u62ec\u53f7","text":"<p>Danger</p> <p>\u5373\u4f7f\u770b\u4e86\u7b54\u6848\u4e5f\u6ca1\u5f88\u660e\u767d\uff0c\u597d\u96be\u7684\u52a8\u6001\u89c4\u5212\u554a\u545c\u545c\u545c</p>"},{"location":"LeetCode/chapter4/#33","title":"33.\u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4","text":"<p>\u4e8c\u5206\u67e5\u627e\u5427\uff0c\u96be\u8bc4</p> <pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left &lt;= right) {\n            int mid = (left + right) &gt;&gt; 1;\n            if (nums[mid] == target) return mid;\n            if (nums[left] &lt;= nums[mid]) {\n                // left \u5230 mid \u662f\u987a\u5e8f\u533a\u95f4\n                (target &gt;= nums[left] &amp;&amp; target &lt; nums[mid]) ? right = mid - 1 : left = mid + 1;\n            }\n            else {\n                // mid \u5230 right \u662f\u987a\u5e8f\u533a\u95f4\n                (target &gt; nums[mid] &amp;&amp; target &lt;= nums[right]) ? left = mid + 1 : right = mid - 1;\n            }\n        }\n        return -1;\n    }\n};\n</code></pre> <p>\u795e\u5947\u6cd5</p> <pre><code>const search = function(nums, target) {\n    return nums.indexOf(target);\n};\n</code></pre>"},{"location":"LeetCode/chapter4/#34","title":"34.\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e","text":"<p>\u7b80\u5355\u65e0\u8111</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) {\n        int l=0;\n        int r=nums.size()-1;\n        int mid;\n        int i,j;\n        while(l&lt;=r){\n            mid=(l+r)&gt;&gt;1;\n            if(nums[mid]==target){\n                for(i=mid;i&gt;=0;i--){\n                    if(nums[i]&lt;nums[mid]) break;\n                }\n                for(j=mid;j&lt;=r;j++){\n                    if(nums[j]&gt;nums[mid]) break;\n                }\n                return{i+1,j-1};\n            }\n            else if(nums[mid]&lt;target) l=mid+1;\n            else r=mid-1;\n        }\n        return {-1,-1};\n    }\n};\n</code></pre>"},{"location":"LeetCode/chapter4/#35","title":"35.\u641c\u7d22\u63d2\u5165\u4f4d\u7f6e","text":"<p>\u7b80\u5355\u7ecf\u5178\u7684\u4e8c\u5206\u67e5\u627e\uff0c\u6ce8\u610f\u6700\u540e\u7279\u6b8a\u60c5\u51b5\u7684\u8fb9\u754c\u95ee\u9898\uff0c\u591a\u8bd5\u51e0\u6b21\u5373\u53ef <pre><code>class Solution {\npublic:\n    int searchInsert(vector&lt;int&gt;&amp; nums, int target) {\n        int l=0;\n        int r= nums.size()-1;\n        int mid;\n        while(l&lt;=r){\n            mid=(l+r)&gt;&gt;1;\n            if(nums[mid]==target) return mid;\n            if(nums[mid]&gt;target) r=mid-1;\n            if(nums[mid]&lt;target) l=mid+1;\n        }\n        if(nums[mid]&gt;target){\n            if(mid==0) return 0;\n            else return mid;\n        }\n        else{ \n            return mid+1;\n        }\n    }\n};\n</code></pre></p>"},{"location":"LeetCode/chapter4/#36","title":"36.\u6709\u6548\u7684\u6570\u72ec","text":"<p>\u65b9\u6cd5\u4e00</p> <p>\u6709\u70b9\u96be\u7684\u4e00\u9053\u9898\uff0c\u91cd\u8981\u7684\u662f\u8981\u60f3\u5230\u7528\u54c8\u5e0c\u8868\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7136\u540e\u4e24\u91cd\u5faa\u73af\u904d\u5386\uff0c\u5176\u5b9e\u5bf9\u4e8e\u884c\u548c\u5217\u6765\u8bf4\u8fd8\u662f\u6bd4\u8f83\u597d\u5904\u7406\u7684\uff0c\u4f46\u662f\u5bf9\u4e8e\u5c0f\u4e5d\u5bab\u683c\u6765\u8bf4\uff0c\u5c31\u9700\u8981\u6bd4\u8f83\u654f\u9510\u7684\u6570\u5b66\u5934\u8111\u6765\u8fdb\u884c\u6784\u9020\u4e86\uff0c\u96be\u60f3\u51fa\u5df2\u901d\u3002\u6700\u540e\u5224\u65ad\u6761\u4ef6\u662f\u68c0\u6d4b\u5230\u9664\u4e86'.'\u5143\u7d20\u5916\u5927\u4e8e\u4e00\u7684\u6570\u5b57\u5c31\u5bc4\u4e86\u3002</p> <pre><code>class Solution {\npublic:\n    bool isValidSudoku(vector&lt;vector&lt;char&gt;&gt;&amp; board) {\n        for(int i=0;i&lt;9;i++){\n            unordered_map &lt;char,int&gt; row,column,map9;\n            for(int j=0;j&lt;9;j++){\n                row[board[j][i]]++;\n                column[board[i][j]]++;\n                int x=j/3+i/3*3;\n                int y=j%3+i%3*3;\n                map9[board[x][y]]++;\n                if((row[board[j][i]]&gt;1&amp;&amp;board[j][i]!='.')||\n                (column[board[i][j]]&gt;1&amp;&amp;board[i][j]!='.')||\n                (map9[board[x][y]]&gt;1&amp;&amp;board[x][y]!='.')) return false;\n            }\n        }\n        return true;\n    }\n};\n</code></pre> <p>\u65b9\u6cd5\u4e8c</p> <p>\u9898\u76ee\u5b98\u65b9\u89e3\u7b54\u7684\u65b9\u6cd5,\u5185\u5bb9\u5dee\u4e0d\u591a,\u7528\u591a\u7ef4\u6570\u7ec4\u4ee3\u66ff\u4e86\u54c8\u5e0c\u8868\uff0c\u4e5f\u53ef\u4ee5\u7684\uff0c\u633a\u597d\u7528\u7684</p> <pre><code>class Solution {\npublic:\n    bool isValidSudoku(vector&lt;vector&lt;char&gt;&gt;&amp; board) {\n        int rows[9][9];\n        int columns[9][9];\n        int subboxes[3][3][9];\n\n        memset(rows,0,sizeof(rows));\n        memset(columns,0,sizeof(columns));\n        memset(subboxes,0,sizeof(subboxes));\n        for (int i = 0; i &lt; 9; i++) {\n            for (int j = 0; j &lt; 9; j++) {\n                char c = board[i][j];\n                if (c != '.') {\n                    int index = c - '0' - 1;\n                    rows[i][index]++;\n                    columns[j][index]++;\n                    subboxes[i / 3][j / 3][index]++;\n                    if (rows[i][index] &gt; 1 || columns[j][index] &gt; 1 || subboxes[i / 3][j / 3][index] &gt; 1) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n};\n</code></pre> <p>Tip</p> <p>memset \u662f C/C++ \u6807\u51c6\u5e93\u4e2d\u7684\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u5c06\u4e00\u6bb5\u5185\u5b58\u533a\u57df\u7684\u5185\u5bb9\u8bbe\u7f6e\u4e3a\u6307\u5b9a\u7684\u503c\u3002\u5b83\u7684\u51fd\u6570\u539f\u578b\u5982\u4e0b\uff1a</p> <pre><code>void* memset(void* ptr, int value, size_t num);\n//ptr\uff1a\u6307\u5411\u8981\u586b\u5145\u7684\u5185\u5b58\u533a\u57df\u7684\u6307\u9488\u3002\n</code></pre> <p><code>value\uff1a</code>\u8981\u8bbe\u7f6e\u7684\u503c\uff0c\u901a\u5e38\u662f\u4e00\u4e2a int \u7c7b\u578b\u7684\u503c\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ea\u4f1a\u4f7f\u7528\u8be5\u503c\u7684\u4f4e 8 \u4f4d\uff08\u5373\u4e00\u4e2a\u5b57\u8282\uff09\u3002</p> <p><code>num\uff1a</code>\u8981\u586b\u5145\u7684\u5b57\u8282\u6570\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/","title":"CS106l","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#_1","title":"\u5199\u5728\u524d\u9762\u7684\u8bdd","text":"<p>\u9996\u5148\u662f\u8bfe\u7a0b\u7f51\u5740\uff0ccs106l</p> <p>\u5176\u6b21\u662fcpp.reference\u7f51\u7ad9 \u8bb0\u5f97\u6302\u68af\u5b50\u54e6</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture1beginning","title":"lecture1\uff1abeginning","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#for-the-std","title":"for the std","text":"<p>std and &lt; bits/stdc++.h &gt; the CSDN web is here,click this</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#find-the-sum-of-a-vector","title":"Find the sum of a vector","text":"<pre><code>//version 1\nvector&lt;int&gt; vec ={1,2,3};\nint sum =0;\nfor(auto val :vec){\n    sum +=val;\n}\n\n//version 2\nvector&lt;int&gt; vec={1,2,3};\nint sum=0;\nfor(const auto&amp;val  :vec){\n    sum +=val;\n}\n\n//version 3\nvector&lt;int&gt; vec={1,2,3};\nint sum= std::accummulate(vec.begin(),vec.end(),0);\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#hello-world","title":"Hello world!","text":"<pre><code>#include&lt;iostream&gt;\nint hello_cpp(){\n    std::cout&lt;&lt;\"hello world!\"&lt;&lt;std::endl;\n}\n\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\nint hello_c(){\n    printf(\"%s\",\"hello world!\");\n}\n//two versions are equal\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture-2","title":"lecture 2","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#string","title":"string","text":"<pre><code>int main(){\n    string str=\"Hello world!\";\n    cout::str::endl;//print the string\n    cout::str[1]::endl;//print \"e\"\n    str[1]='i';//change the char\n\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#stream","title":"stream","text":"<p>\u8f93\u51fa\u6d41 <pre><code>int main(){\n    ostringstream oss(\"Ito-En Green Tea\");\n    cout &lt;&lt; oss.str()&lt;&lt; endl;//Tto-En Green Tea;\n    oss &lt;&lt; \"16,9 Ounces\";//16.9 Ouncesn Tea\n    //\u8fd9\u4e2a\u6d41\u662f\u4ece\u5de6\u5f00\u59cb\u505abuffer\u8fdb\u884c\u66ff\u6362\u7684\n\n    ostringstream oss(\"Ito-En Green Tea\",ostringstream::ate);\n    cout &lt;&lt; oss.str()&lt;&lt; endl;//Tto-En Green Tea;\n    oss &lt;&lt; \"16,9 Ounces\";//\n    //\u8fd9\u4e2a\u6d41\u662f\u4ece\u53f3\u5f00\u59cb\u505abuffer\u8fdb\u884c\u66ff\u6362\u7684\n\n    isstringstream iss(\"16.9 Ounces\");\n    double amount;\n    string unit;\n    iss &gt;&gt; amount;//amount get 16.9 as a double\n    iss &gt;&gt; unit;\n    cout &lt;&lt; amount/2 &lt;&lt; endl; //8.45?\n\n    isstringstream iss(\"16.9 Ounces\");\n    int amount;\n    string unit;\n    iss &gt;&gt; amount;\n    iss &gt;&gt; unit;//this two lines can be combined as iss &gt;&gt; amount &gt;&gt; unit\n    cout &lt;&lt; amount/2 &lt;&lt; \" \" &lt;&lt; unit &lt;&lt; endl; //8 .9 \n    //\u4e00\u4e2a\u6307\u9488\u4ece\u5934\u5f00\u59cb\u5f80\u53f3\u79fb\u52a8\uff0cfirst stop at 6,and amount gets 16, then a bubble, then unit gets .9,so the result outputs 8 .9\n\n}\n</code></pre></p> <p>string to integer <pre><code>int stringToInteger(const string&amp; s){\n    istringstream iss(s);\n    int result;\n    iss &gt;&gt; result;\n\n    return result;\n}\n</code></pre></p> <p>we can use manipulators to pad the output. <pre><code>cout &lt;&lt; \"[\" &lt;&lt; setw(10) &lt;&lt; \"Ito\" &lt;&lt; \"]\";\n//output:[          Ito]\ncout &lt;&lt; \"[\" &lt;&lt; left &lt;&lt; setw(10) &lt;&lt; \"Ito\" &lt;&lt;  \"]\";\n//output:[Ito          ]\ncout &lt;&lt; \"[\" &lt;&lt; left &lt;&lt; setfill('-') &lt;&lt; setw(10) &lt;&lt; \"Ito\" &lt;&lt; \"]\";\n//output:[Ito----------]\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture-3-type-and-advanced-streams","title":"lecture 3: type and advanced streams","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#cin-and-cout","title":"cin and cout","text":"<pre><code>cout &lt;&lt; \"What is your name?\";\ncin &gt;&gt; name;\ngetline(cin,name);\n</code></pre> <pre><code>int getInteger(const string&amp; prompt){\n    string line;\n    getline(cin,line);\n\n    istringstream iss(line);\n    int val;\n    iss &gt;&gt; val;\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#auto","title":"auto","text":"<p>automatically help you be lazy</p> <pre><code>auto prices = make_pair(3.4,5); //pair&lt;double,int&gt;\nauto values = make_tuple(3,4,\"hi\"); //tuple&lt;int,int,char*&gt;\n\nprices.first = prices.second; //prices = {5.0,5};\nget&lt;0&gt;(values) = get&lt;1&gt;(values); //values = {4,4,\"hi\"};\n\nauto [a,b] = prices; //a,b are copies of 5.0 and 5;\nconst auto&amp; [x,y,z]=values; //x,y,z are const references to the 4,4, and \"hi\";\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture-4-sequence-container","title":"lecture 4: sequence container","text":"<p>review the structure first <pre><code>struct PriceRange{\n    int min;\n    int max;\n}\n\nstruct Course{\n    string code;\n    Time startTime;\n    Time endTime;\n    vector&lt;string&gt;instructors;\n}\n</code></pre></p> <p>initialization <pre><code>int main(){\n    vector&lt;int&gt; vec{3,1,4,1,5,9};\n    Course now{\"CS106L\",{15,30},{16,30},{\"Wang\",\"Zeng\"}};\n}\n</code></pre> <pre><code>int main(){\n    vector&lt;int&gt; vec1{3}; // vector = {3}\n    vector&lt;int&gt; vec2(3); // vector = {0,0,0}\n}\n</code></pre></p> <p>caution:Use Thoughtfully When should I use a stringstream? 1. Proccessing strings    1. simplify \"/./a/b/..\"to\"/a\" 2. Formatting input/output    1. ippercase,hex,and other stream manipulators 3. Parsing different types    1. stringToLinteger() from previous lectures</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#stl","title":"STL\u5e93","text":"<p>example of the bubble sort the usual type is here: <pre><code>int main(){\n    vector&lt;int&gt; vec(20);\n    for(size_t i=0;i&lt; vec.size(); i++){\n        vec[i]=rand();\n    }\n\n    doBubbleSort(vec);\n\n    for(size_t i=0;i&lt;vec.size();i++){\n        cout &lt;&lt; vec[i]  &lt;&lt; endl;\n    }\n}\n\nvoid doBubbleSort(vector&lt;int&gt; &amp;v){\n    for(size_t i=0;i&lt;v.size()-1;i++){\n        for(size_t j=0;j&lt;size(()-i-1;j++){\n            if(v[j]&gt;v[j+1]){\n                int temp =v[j];\n                v[j]=v[j+1];\n                v[j+1]=tmp;\n            }\n        }\n    }\n}\n</code></pre></p> <p>the STL type is here: <pre><code>int main(){\n    vector&lt;int&gt; vec(20);\n    std::generate(vec.begin(),vec.end(),rand);\n    std::sort(vec.begin(),vec.end());\n    std::copy(vec.begin(),vec.end(),std::ostream_iterator&lt;int&gt;(cout,\"\\n\"));\n}\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#sequence-container","title":"sequence container","text":"<p>provides access to sequences of elements includes: std::vector &lt; T &gt; std::dequet &lt; T &gt; std::list &lt; T &gt; std::array &lt; T &gt; std::forward_list &lt; T &gt;</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#stdvector-t","title":"std::vector&lt; T &gt;","text":"<p>a vector represents a sequence of elements of any type.You specify the type when using the vector: <pre><code>std::vector&lt; int &gt; vecInt;//vector of ints\nstd::vector&lt; string &gt; vecStr;//vector of string\nstd::vector&lt; mystruct &gt; vecStruct;//vector of mystructs\nstd::vector&lt; std::vector&lt; string &gt; &gt; vecOfVec // vector of vector&lt;string&gt;\n</code></pre></p> <p>summary of Stanford vector&lt; t &gt; vs std::vector&lt; T &gt; </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#stddeque-t","title":"std::deque&lt; T &gt;","text":"<p>cpp reference explain deque ,click here</p> <p><pre><code>#include &lt;deque&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    // Create a deque containing integers\n    std::deque&lt;int&gt; d = {7, 5, 16, 8};\n\n    // Add an integer to the beginning and end of the deque\n    d.push_front(13);\n    d.push_back(25);\n\n    // Iterate and print values of deque\n    for (int n : d)\n        std::cout &lt;&lt; n &lt;&lt; ' ';\n    std::cout &lt;&lt; '\\n';\n}\n</code></pre> <pre><code>output : 13 7 5 16 8 25\n</code></pre></p> <p>vector is the type of sequence that should be used by default...deque is the data structrue of choice when most insertions and deletions take place at the beginning or at the end of sequence.  </p> <p>in general,a graph could tell the difference between the vector and the deque </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#the-stack-and-the-queue","title":"the stack and the queue","text":"<p> so the stack and the queue are just a special case of the vector and the deque.</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture5-associative-container","title":"lecture5: Associative Container","text":"<p>have no idea of a sequence.  data is accessed using the key instead of indexes.  includes:  <pre><code>std::map&lt; T1,T2 &gt;\nstd::set&lt; T &gt;\nstd::unordered_map&lt; T1,T2 &gt;\nstd::unoedered_set&lt; T &gt;\n</code></pre>  map/set:Keys in sorted order,faster to iterate through a range of elements.</p> <p>Unordered map/set:faster to access individual elements by key.</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#iterator","title":"iterator","text":"<p>\u5728 C++ \u4e2d\uff0c\u8fed\u4ee3\u5668\u662f\u4e00\u79cd\u68c0\u67e5\u5bb9\u5668\u5185\u5143\u7d20\u5e76\u904d\u5386\u5bb9\u5668\u7684\u5bf9\u8c61\u3002\u8fed\u4ee3\u5668\u53ef\u4ee5\u88ab\u89c6\u4e3a\u6307\u5411\u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u6307\u9488\u3002\u5b83\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u5f0f\u6765\u8bbf\u95ee\u5bb9\u5668\u4e2d\u7684\u6570\u636e\uff0c\u800c\u4e0d\u9700\u8981\u66b4\u9732\u5bb9\u5668\u7684\u5185\u90e8\u7ed3\u6784\u3002C++ \u6807\u51c6\u5e93\u4e2d\u7684\u6240\u6709\u5bb9\u5668\u7c7b\u578b\uff08\u5982 vector, list, map, set \u7b49\uff09\u90fd\u63d0\u4f9b\u4e86\u8fed\u4ee3\u5668\u3002</p> <p>\u4ee5\u4e0b\u662f\u5173\u4e8e C++ \u8fed\u4ee3\u5668\u7684\u4e00\u4e9b\u57fa\u672c\u6982\u5ff5\uff1a</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#_2","title":"\u8fed\u4ee3\u5668\u7684\u7c7b\u578b","text":"<p>\u8f93\u5165\u8fed\u4ee3\u5668: \u63d0\u4f9b\u4e86\u5bf9\u6570\u636e\u7684\u53ea\u8bfb\u8bbf\u95ee\u3002\u53ef\u4ee5\u7528\u6765\u8bfb\u53d6\u6570\u636e\uff0c\u4f46\u4e0d\u80fd\u7528\u6765\u4fee\u6539\u6570\u636e\u3002\u4f8b\u5982\uff0c\u6d41\u8fed\u4ee3\u5668\u5c31\u662f\u8f93\u5165\u8fed\u4ee3\u5668\u3002 \u8f93\u51fa\u8fed\u4ee3\u5668: \u63d0\u4f9b\u4e86\u5bf9\u6570\u636e\u7684\u53ea\u5199\u8bbf\u95ee\u3002\u53ef\u4ee5\u7528\u6765\u4fee\u6539\u6570\u636e\uff0c\u4f46\u4e0d\u80fd\u7528\u6765\u8bfb\u53d6\u6570\u636e\u3002 \u524d\u5411\u8fed\u4ee3\u5668: \u63d0\u4f9b\u4e86\u8bfb\u5199\u64cd\u4f5c\uff0c\u5e76\u4e14\u53ef\u4ee5\u5411\u524d\u63a8\u8fdb\u8fed\u4ee3\u5668\u3002\u4f46\u662f\uff0c\u5b83\u4e0d\u652f\u6301\u540e\u9000\u64cd\u4f5c\u3002 \u53cc\u5411\u8fed\u4ee3\u5668: \u9664\u4e86\u524d\u5411\u8fed\u4ee3\u5668\u7684\u529f\u80fd\u5916\uff0c\u8fd8\u652f\u6301\u5411\u540e\u79fb\u52a8\u8fed\u4ee3\u5668\u3002 \u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668: \u63d0\u4f9b\u4e86\u5b8c\u5168\u7684\u8bfb\u5199\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5411\u524d\u5411\u540e\u79fb\u52a8\uff0c\u5e76\u4e14\u652f\u6301\u8df3\u8dc3\u8bbf\u95ee\uff08\u5982\u901a\u8fc7\u7d22\u5f15\u8bbf\u95ee\uff09\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#_3","title":"\u8fed\u4ee3\u5668\u7684\u57fa\u672c\u64cd\u4f5c","text":"<p>begin()\uff1a \u8fd4\u56de\u6307\u5411\u5bb9\u5668\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 end()\uff1a \u8fd4\u56de\u6307\u5411\u5bb9\u5668\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\uff0c\u901a\u5e38\u7528\u4e8e\u6807\u8bb0\u8fed\u4ee3\u5668\u7684\u7ed3\u675f\u3002 ++\uff1a \u7528\u6765\u63a8\u8fdb\u8fed\u4ee3\u5668\u5230\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002 \uff1a\u7528\u6765\u89e3\u5f15\u7528\u8fed\u4ee3\u5668\uff0c\u8bbf\u95ee\u5b83\u6240\u6307\u5411\u7684\u5143\u7d20\u3002 == \u548c !=\uff1a* \u7528\u6765\u6bd4\u8f83\u4e24\u4e2a\u8fed\u4ee3\u5668\u662f\u5426\u76f8\u7b49\u6216\u4e0d\u76f8\u7b49\u3002</p> <p>\u793a\u4f8b \u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f7f\u7528\u8fed\u4ee3\u5668\u904d\u5386 vector \u7684\u7b80\u5355\u793a\u4f8b\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main() {\n    std::vector&lt;int&gt; vec = {1, 2, 3, 4, 5};\n\n    // \u4f7f\u7528\u8fed\u4ee3\u5668\u904d\u5386 vector\n    for (std::vector&lt;int&gt;::iterator it = vec.begin(); it != vec.end(); ++it) {\n        std::cout &lt;&lt; *it &lt;&lt; ' ';\n    }\n    std::cout &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 vector \u7684\u8fed\u4ee3\u5668\u6765\u904d\u5386\u5e76\u6253\u5370\u5bb9\u5668\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u3002</p> <p>C++11 \u8303\u56f4\u57fa\u4e8e\u7684 for \u5faa\u73af C++11 \u5f15\u5165\u4e86\u57fa\u4e8e\u8303\u56f4\u7684 for \u5faa\u73af\uff0c\u5b83\u53ef\u4ee5\u7b80\u5316\u8fed\u4ee3\u5668\u7684\u4f7f\u7528\uff1a <pre><code>for (int elem : vec) {\n    std::cout &lt;&lt; elem &lt;&lt; ' ';\n}\n</code></pre> \u8fd9\u4e2a\u5faa\u73af\u4f1a\u81ea\u52a8\u4e3a\u6bcf\u4e2a\u5143\u7d20\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5e76\u904d\u5386\u6574\u4e2a\u5bb9\u5668\u3002</p> <p>\u8fed\u4ee3\u5668\u662f C++ \u6807\u51c6\u5e93\u4e2d\u975e\u5e38\u6838\u5fc3\u7684\u6982\u5ff5\uff0c\u5b83\u4eec\u4f7f\u5f97\u7b97\u6cd5\u548c\u5bb9\u5668\u53ef\u4ee5\u72ec\u7acb\u5f00\u6765\uff0c\u63d0\u4f9b\u4e86\u66f4\u9ad8\u7684\u62bd\u8c61\u5c42\u6b21\u548c\u4ee3\u7801\u590d\u7528\u6027\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture-6advanced-iterators-and-containers","title":"lecture 6:advanced iterators and containers","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#review-of-the-iterator","title":"review of the iterator","text":"<p>four essential iterator operations:</p> <p>Create iterator: <pre><code>std::set&lt;int&gt;::iterator iter = mySet.begin();\n</code></pre> Dereference iterator to read value currently pointed to: <pre><code>int val = *iter;\n</code></pre></p> <p>Advance iterator\uff1a <pre><code>iter++; or ++iter;\n</code></pre></p> <p>Compare against another iterator(especially .end() iterator): <pre><code>if(iter == myset.end()) return;\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#pair-class","title":"pair class","text":"<p>A pair is simply two objects bundled together.</p> <p>syntax: <pre><code>std::pair&lt;string,int&gt;p;\np.first =\"phone number\";\np.second = 6507232300;\n</code></pre></p> <p>quicker ways to make a pair: <pre><code>std::pair&lt;string,int&gt; p{\"phone number\",6507232300};\nstd::make_pair(\"phone number\",6507232300);\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#map-iterators","title":"map iterators","text":"<p>example: <pre><code>map&lt;int,int&gt; m;\nmap&lt;int,int&gt;::iterator i = m.begin();\nmap&lt;int,int&gt;::iterator end = m.end();\nwhile(i != end){\n    cout &lt;&lt; (*i).first &lt;&lt; (*i).second &lt;&lt; endl;\n    i++;\n}\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#further-iterator-usage","title":"further iterator usage","text":"<p>example: <pre><code>map&lt;string,int&gt; MyMap;\nMyMap = readuserwords();//this function is already got.\n\nfor(auto [key,val] : MyMap){\n    cout &lt;&lt; key &lt;&lt; \",\" &lt;&lt;  val &lt;&lt; endl;\n}\n\n//the same \n\nfor(auto elem : Mymap){\n    cout &lt;&lt; elem.first &lt;&lt; \",\" &lt;&lt; elem.second &lt;&lt; endl;\n}\n</code></pre></p> <p>example: <pre><code>#include&lt;vector&gt;\n\nusing std::vector;\n\nvoid printVec(const vector&lt;int&gt; &amp;vec){\n    for (auto elem: vec){\n        cout&lt;&lt; elem &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n}\n\nint main(){\n    //sorting a vector\n    vector &lt;int&gt; vec{3,1,4,1,5,9,2,6};\n\n    printVec(vec);\n    std::sort(vec.begin(),vec.end());\n    //if we want to sort the first 4 ones, we can also use \"std::sort(vec.begin(),vec.begin()+4);\n    printVec(vec);\n\n    set&lt;int&gt; elems{3,1,4,1,5,9,2,6};\n    cout &lt;&lt; elems.size() &lt;&lt; endl;\n\n    //finding an element from a set\n    auto testit=std::find(elem.begin(),elems.end(),5);\n    if(testit ==elems.end()){//if not found, the point will continue to move to the last one in elems.\n        cout &lt;&lt; \"Not Found\" &lt;&lt; endl;\n    }else{\n        cout &lt;&lt; \"Found: \"&lt;&lt; testit &lt;&lt; endl;\n    }\n\n    set&lt;int&gt;::iterator iter = elems.lower_bound(4);\n    set&lt;int&gt;::iterator end = elems.upper_bound(6);\n    cout &lt;&lt; \"start: \" &lt;&lt; *iter &lt;&lt; \", end: \" &lt;&lt; *end &lt;&lt; endl;\n\n    for(; iter != end; ++iter){\n        cout &lt;&lt; *iter &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> notice: elems.end() is outside the elems!!!</p> <p>use the graphs in ppt:  </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#template-t","title":"&lt; template T&gt;","text":"<p><pre><code>template &lt;typename T&gt;\npair &lt;T,T&gt; my_minmax(T a,T b){\n    if(a&lt;b) return {a,b};\n    else return {b,a};\n}\n</code></pre> \u8fd9\u6bb5\u4ee3\u7801\u662f\u4e00\u4e2aC++\u6a21\u677f\u51fd\u6570\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u8fd4\u56de\u4e24\u4e2a\u7ed9\u5b9a\u53c2\u6570a\u548cb\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u7ec4\u6210\u7684pair\u3002\u4e0b\u9762\u6211\u5c06\u8be6\u7ec6\u89e3\u91ca\u8fd9\u4e2a\u51fd\u6570\u7684\u5404\u4e2a\u90e8\u5206\uff1a</p> <p>\u6a21\u677f\u58f0\u660e:  <pre><code>template &lt;typename T&gt;\n</code></pre> \u8fd9\u884c\u4ee3\u7801\u58f0\u660e\u4e86\u4e00\u4e2a\u6a21\u677f\uff0cT\u662f\u4e00\u4e2a\u5360\u4f4d\u7b26\u7c7b\u578b\uff0c\u5b83\u5728\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u4f1a\u88ab\u5b9e\u9645\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u6240\u66ff\u6362\u3002\u8fd9\u610f\u5473\u7740my_minmax\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u53ea\u8981\u8fd9\u4e24\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u76f8\u540c\u3002</p> <p><pre><code>\u51fd\u6570\u8fd4\u56de\u7c7b\u578b:\npair &lt;T,T&gt;\n</code></pre> pair\u662fC++\u6807\u51c6\u5e93\u4e2d\u7684\u4e00\u4e2a\u6a21\u677f\u7c7b\uff0c\u7528\u4e8e\u5c06\u4e24\u4e2a\u503c\u7ec4\u5408\u6210\u4e00\u4e2a\u5355\u5143\u3002\u8fd9\u91ccpair\u8868\u793a\u8fd9\u4e2a\u5355\u5143\u4e2d\u7684\u4e24\u4e2a\u503c\u90fd\u662f\u540c\u4e00\u79cd\u7c7b\u578bT\u3002 <pre><code>\u51fd\u6570\u5b9a\u4e49:\nmy_minmax(T a, T b)\n</code></pre> \u8fd9\u662f\u51fd\u6570\u7684\u540d\u79f0\u548c\u53c2\u6570\u5217\u8868\u3002my_minmax\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570a\u548cb\uff0c\u5b83\u4eec\u7684\u7c7b\u578b\u90fd\u662fT\u3002 <pre><code>\u51fd\u6570\u4f53:\nif(a &lt; b) return {a, b};\nelse return {b, a};\n\u51fd\u6570\u4f53\u5305\u542b\u4e00\u4e2a\u7b80\u5355\u7684\u6761\u4ef6\u5224\u65ad\uff1a\n\u5982\u679ca\u5c0f\u4e8eb\uff0c\u90a3\u4e48a\u662f\u6700\u5c0f\u503c\uff0cb\u662f\u6700\u5927\u503c\uff0c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5305\u542ba\u548cb\u7684pair\u3002\n\u5982\u679ca\u4e0d\u5c0f\u4e8eb\uff08\u5373a\u5927\u4e8e\u6216\u7b49\u4e8eb\uff09\uff0c\u90a3\u4e48b\u662f\u6700\u5c0f\u503c\uff0ca\u662f\u6700\u5927\u503c\uff0c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5305\u542bb\u548ca\u7684pair\u3002\n</code></pre> \u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7\u6bd4\u8f83\u4e24\u4e2a\u53c2\u6570\u7684\u5927\u5c0f\uff0c\u7136\u540e\u4ee5pair\u7684\u5f62\u5f0f\u8fd4\u56de\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u5176\u529f\u80fd\u3002\u7531\u4e8e\u4f7f\u7528\u4e86\u6a21\u677f\uff0c\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u53ef\u4ee5\u6bd4\u8f83\u5927\u5c0f\u5173\u7cfb\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u5b57\u7b26\u7b49\u3002 <p>\u4f7f\u7528\u793a\u4f8b\uff1a <pre><code>int main() {\n    auto result = my_minmax(10, 20); // result will be pair(10, 20)\n    // To access the minimum and maximum values:\n    int min = result.first;  // min will be 10\n    int max = result.second; // max will be 20\n    return 0;\n}\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cmy_minmax\u51fd\u6570\u88ab\u8c03\u7528\u6765\u6bd4\u8f83\u4e24\u4e2a\u6574\u657010\u548c20\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2apair\uff0c\u5176\u4e2d\u5305\u542b\u6700\u5c0f\u503c10\u548c\u6700\u5927\u503c20\u3002\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#template-function","title":"template function","text":"<p>A template function defines an implicit interface that each template parameter must satisfy.</p> <pre><code>template &lt;typename InputIterator, typename Datatype&gt;\nint countOccurences(InputIterator begin,InputIterator end,Datatype val){\n    int count= 0;\n    for (auto iter = begin;iter != end;iter++){\n        if(*iter == yal) ++count;\n    }\n    return count;\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture7-8function-and-algorithm","title":"lecture7-8\uff1aFunction and algorithm","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lambda","title":"lambda","text":"<pre><code>int main(){\n    int limit = getInterger(\"Minimum for A\");\n    vector&lt;int&gt; grades = readStudentGrades();\n    auto func =[limit] (auto val) {return val &gt;= limit;};\n    CountOccurences(grades.begin(),grades.end(),func)\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#anatomy-of-a-lambda-function","title":"Anatomy of a lambda function","text":"<pre><code>auto func = [capture-clause](parameters){\n    //body\n};\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#an-example","title":"An example","text":"<p>Lambda \u8868\u8fbe\u5f0f\uff08\u901a\u5e38\u7b80\u79f0\u4e3a \"lambda\"\uff09\u662f\u8bb8\u591a\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u4e00\u4e2a\u7279\u6027\uff0c\u5b83\u5141\u8bb8\u5f00\u53d1\u8005\u7f16\u5199\u5185\u8054\u7684\u533f\u540d\u51fd\u6570\uff0c\u5373\u4e0d\u9700\u8981\u660e\u786e\u6307\u5b9a\u51fd\u6570\u540d\u7684\u51fd\u6570\u3002Lambda \u8868\u8fbe\u5f0f\u5728\u8bed\u6cd5\u4e0a\u66f4\u7b80\u6d01\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u9700\u8981\u51fd\u6570\u5bf9\u8c61\u7684\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u3002\u4ee5\u4e0b\u662f\u5173\u4e8e lambda \u8868\u8fbe\u5f0f\u7684\u539f\u7406\u3001\u4f5c\u7528\u548c\u4e00\u4e9b\u5173\u952e\u70b9\u7684\u89e3\u91ca\uff1a</p> <p>\u539f\u7406</p> <p>Lambda \u8868\u8fbe\u5f0f\u7684\u539f\u7406\u57fa\u4e8e\u51e0\u4e2a\u6982\u5ff5\uff1a</p> <p>\u95ed\u5305\uff08Closure\uff09\uff1aLambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u6355\u83b7\u5176\u5468\u56f4\u4f5c\u7528\u57df\u4e2d\u7684\u53d8\u91cf\uff0c\u5373\u4f7f\u8fd9\u4e9b\u53d8\u91cf\u5728 lambda \u8868\u8fbe\u5f0f\u88ab\u5b9a\u4e49\u540e\u5df2\u7ecf\u8d85\u51fa\u4e86\u4f5c\u7528\u57df\u3002\u8fd9\u79cd\u80fd\u529b\u79f0\u4e3a\u95ed\u5305\u3002 \u533f\u540d\u51fd\u6570\uff1aLambda \u8868\u8fbe\u5f0f\u662f\u533f\u540d\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u6ca1\u6709\u540d\u5b57\u3002\u5b83\u4eec\u901a\u5e38\u662f\u5728\u9700\u8981\u7684\u5730\u65b9\u76f4\u63a5\u5b9a\u4e49\u548c\u4f7f\u7528\u7684\u3002</p> <p>\u8868\u8fbe\u5f0f\uff1aLambda \u8868\u8fbe\u5f0f\u901a\u5e38\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u53ef\u4ee5\u88ab\u8d4b\u503c\u7ed9\u53d8\u91cf\uff0c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff0c\u6216\u8005\u76f4\u63a5\u8c03\u7528\u3002</p> <p>\u4f5c\u7528</p> <p>Lambda \u8868\u8fbe\u5f0f\u5728\u7f16\u7a0b\u4e2d\u6709\u591a\u79cd\u7528\u9014\uff1a</p> <p>\u7b80\u5316\u548c\u5185\u8054\u4ee3\u7801\uff1aLambda \u5141\u8bb8\u4f60\u5728\u9700\u8981\u51fd\u6570\u7684\u5730\u65b9\u76f4\u63a5\u7f16\u5199\u51fd\u6570\u903b\u8f91\uff0c\u51cf\u5c11\u4e86\u4ee3\u7801\u7684\u590d\u6742\u6027\u3002</p> <p>\u4e8b\u4ef6\u5904\u7406\uff1a\u5728 GUI \u7f16\u7a0b\u4e2d\uff0clambda \u8868\u8fbe\u5f0f\u5e38\u7528\u4e8e\u4e3a\u6309\u94ae\u70b9\u51fb\u7b49\u4e8b\u4ef6\u6307\u5b9a\u5904\u7406\u51fd\u6570\u3002</p> <p>\u6570\u636e\u5904\u7406\uff1a\u5728\u5904\u7406\u96c6\u5408\uff08\u5982\u5217\u8868\u3001\u6570\u7ec4\uff09\u65f6\uff0clambda \u53ef\u4ee5\u7528\u4f5c\u8fc7\u6ee4\u3001\u6620\u5c04\u6216\u6392\u5e8f\u7684\u56de\u8c03\u51fd\u6570\u3002</p> <p>\u5e76\u53d1\u7f16\u7a0b\uff1a\u5728\u591a\u7ebf\u7a0b\u7f16\u7a0b\u4e2d\uff0clambda \u53ef\u4ee5\u7528\u4f5c\u7ebf\u7a0b\u6267\u884c\u7684\u51fd\u6570\u3002</p> <p>\u81ea\u5b9a\u4e49\u884c\u4e3a\uff1a\u5728\u6807\u51c6\u5e93\u7b97\u6cd5\u4e2d\uff0clambda \u5141\u8bb8\u4f60\u81ea\u5b9a\u4e49\u6bd4\u8f83\u6216\u64cd\u4f5c\u884c\u4e3a\u3002</p> <p>\u793a\u4f8b \u4ee5\u4e0b\u662f\u4e00\u4e2a C++ \u4e2d\u7684 lambda \u8868\u8fbe\u5f0f\u793a\u4f8b\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\nint main() {\n    std::vector&lt;int&gt; numbers = {1, 2, 3, 4, 5};\n    // \u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u6765\u6253\u5370\u6240\u6709\u5143\u7d20\n    std::for_each(numbers.begin(), numbers.end(), [](int x) {\n        std::cout &lt;&lt; x &lt;&lt; \" \";\n    });\n    std::cout &lt;&lt; std::endl;\n    // \u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u6765\u67e5\u627e\u7b2c\u4e00\u4e2a\u5076\u6570\n    auto it = std::find_if(numbers.begin(), numbers.end(), [](int x) {\n        return x % 2 == 0;\n    });\n    if (it != numbers.end()) {\n        std::cout &lt;&lt; \"\u7b2c\u4e00\u4e2a\u5076\u6570\u662f: \" &lt;&lt; *it &lt;&lt; std::endl;\n    }\n    return 0;\n}\n</code></pre> \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c <pre><code>[](int x) { std::cout &lt;&lt; x &lt;&lt; \" \"; } \u662f\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\uff0c\u5b83\u88ab\u4f20\u9012\u7ed9 std::for_each \u7b97\u6cd5\uff0c\u7528\u4e8e\u6253\u5370 numbers \u5411\u91cf\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u3002\u53e6\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f [](int x) { return x % 2 == 0; } \u88ab\u4f20\u9012\u7ed9 std::find_if \u7b97\u6cd5\uff0c\u7528\u4e8e\u67e5\u627e\u7b2c\u4e00\u4e2a\u5076\u6570\u3002\n</code></pre> \u5173\u952e\u70b9 \u6355\u83b7\u5217\u8868\uff1aLambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u6709\u4e00\u4e2a\u6355\u83b7\u5217\u8868\uff0c\u5b83\u6307\u5b9a\u4e86\u5982\u4f55\u6355\u83b7\u5916\u90e8\u4f5c\u7528\u57df\u4e2d\u7684\u53d8\u91cf\u3002\u6355\u83b7\u53ef\u4ee5\u662f\u503c\u6355\u83b7\u3001\u5f15\u7528\u6355\u83b7\u6216\u9690\u5f0f\u6355\u83b7\u3002 \u53c2\u6570\u5217\u8868\uff1aLambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u6709\u53c2\u6570\uff0c\u5c31\u50cf\u666e\u901a\u51fd\u6570\u4e00\u6837\u3002 \u8fd4\u56de\u7c7b\u578b\uff1aLambda \u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u7c7b\u578b\u53ef\u4ee5\u7701\u7565\uff0c\u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u8fd4\u56de\u8bed\u53e5\u63a8\u65ad\u8fd4\u56de\u7c7b\u578b\u3002\u5982\u679c\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u8fd4\u56de\u7c7b\u578b\uff0c\u53ef\u4ee5\u5728\u53c2\u6570\u5217\u8868\u540e\u9762\u52a0\u4e0a -&gt; \u7c7b\u578b\u3002 Lambda \u8868\u8fbe\u5f0f\u662f\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u4e2d\u4e00\u4e2a\u5f3a\u5927\u7684\u7279\u6027\uff0c\u5b83\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u7075\u6d3b\u6027\u548c\u8868\u8fbe\u529b\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#capture-by-value-or-by-reference","title":"capture by value(=) or by reference(&amp;)","text":"<p><pre><code>//capture all by value, except teas is by reference\nauto func1 = [=,&amp;teas](parameters)-&gt; return-value{\n    //body\n};\n</code></pre> <pre><code>//capture all by referene, except banned is by value\nauto func2 = [&amp;,banned](parameters)-&gt; return-value{\n    //body\n};\n</code></pre> </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#a-nice-examplefurther-insight-of-lambda","title":"a nice example:further insight of lambda","text":"<p><pre><code>int limit = 5;\nauto  isLessThanLimit =[limit] (auto val)-&gt;bool{\n    return val &lt; limit;\n}\n</code></pre> \u53ef\u4ee5\u7f29\u5199\u6210\u4ee5\u4e0b\u5f62\u5f0f\uff1a\uff08\u53bb\u6389bool\uff09\uff1b <pre><code>int limit = 5;\nauto  isLessThanLimit =[limit] (auto val){\n    return val &lt; limit;\n}\n</code></pre> \u5982\u679c\u6211\u4eec\u60f3\u627e\u4e00\u4e2a\u53d8\u91cf\u4f9d\u6b21\u9012\u589e\uff0c\u4f20\u5165\u5176\u5730\u5740\uff1a <pre><code>int limit = 5;\nint num_times_called = 0;\nauto  isLessThanLimit =[limit,&amp;num_times_called] (auto val){\n    ++num_times_called;\n    return val &lt; limit;\n}\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lambda_1","title":"\u8fed\u4ee3\u5668\u3001\u4e00\u5143\u8c13\u8bcd\u51fd\u6570\u3001lambda\u8868\u8fbe\u5f0f\u7684\u4e00\u4e2a\u4f8b\u5b50","text":"<p>\u5728 C++ \u4e2d\uff0c<code>template&lt;typename InputIt, typename UnaryPred&gt;</code> \u662f\u4e00\u4e2a\u6a21\u677f\u58f0\u660e\uff0c\u5b83\u7528\u4e8e\u5b9a\u4e49\u4e00\u4e2a\u6a21\u677f\u51fd\u6570\u6216\u6a21\u677f\u7c7b\uff0c\u8fd9\u4e2a\u6a21\u677f\u53ef\u4ee5\u63a5\u53d7\u4e24\u4e2a\u6a21\u677f\u53c2\u6570\uff1a 1. <code>InputIt</code>\uff1a\u8fd9\u4e2a\u53c2\u6570\u901a\u5e38\u7528\u4e8e\u6307\u5b9a\u8f93\u5165\u8fed\u4ee3\u5668\u7684\u7c7b\u578b\u3002\u8f93\u5165\u8fed\u4ee3\u5668\u662f\u4e00\u79cd\u80fd\u591f\u7528\u4e8e\u8bfb\u53d6\u5e8f\u5217\u4e2d\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u7c7b\u578b\u3002\u5b83\u4eec\u5fc5\u987b\u652f\u6301\u81f3\u5c11\u4e00\u6b21\u7684\u9012\u589e\u64cd\u4f5c\uff08\u4ee5\u8bbf\u95ee\u5e8f\u5217\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\uff09\u4ee5\u53ca\u89e3\u5f15\u7528\u64cd\u4f5c\uff08\u4ee5\u8bbf\u95ee\u8fed\u4ee3\u5668\u6240\u6307\u5411\u7684\u5143\u7d20\uff09\u3002 2. <code>UnaryPred</code>\uff1a\u8fd9\u4e2a\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u4e00\u4e2a\u4e00\u5143\u8c13\u8bcd\u51fd\u6570\u7684\u7c7b\u578b\u3002\u4e00\u5143\u8c13\u8bcd\u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u8868\u8fbe\u5f0f\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a\u53ef\u4ee5\u89e3\u91ca\u4e3a\u5e03\u5c14\u503c\u7684\u503c\uff08\u901a\u5e38\u662f <code>bool</code> \u7c7b\u578b\uff09\u3002\u5728\u7b97\u6cd5\u4e2d\uff0c\u4e00\u5143\u8c13\u8bcd\u901a\u5e38\u7528\u4e8e\u6307\u5b9a\u4e00\u4e2a\u6761\u4ef6\uff0c\u7b97\u6cd5\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6761\u4ef6\u6765\u6d4b\u8bd5\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e24\u4e2a\u6a21\u677f\u53c2\u6570\u7684\u51fd\u6570\u6a21\u677f\u793a\u4f8b\uff0c\u8be5\u51fd\u6570\u7528\u4e8e\u8ba1\u7b97\u6ee1\u8db3\u7ed9\u5b9a\u8c13\u8bcd\u6761\u4ef6\u7684\u5143\u7d20\u6570\u91cf\uff1a <pre><code>template&lt;typename InputIt, typename UnaryPred&gt;\ntypename std::iterator_traits&lt;InputIt&gt;::difference_type\ncount_if(InputIt first, InputIt last, UnaryPred pred) {\n    typename std::iterator_traits&lt;InputIt&gt;::difference_type count = 0;\n    for (; first != last; ++first) {\n        if (pred(*first)) {\n            ++count;\n        }\n    }\n    return count;\n}\n</code></pre> \u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff1a - <code>InputIt</code> \u662f\u8f93\u5165\u8fed\u4ee3\u5668\u7684\u7c7b\u578b\uff0c\u6bd4\u5982 <code>std::vector&lt;int&gt;::iterator</code>\u3002 - <code>UnaryPred</code> \u662f\u4e00\u5143\u8c13\u8bcd\u7684\u7c7b\u578b\uff0c\u6bd4\u5982\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\u6216\u8005\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u3002 - <code>std::iterator_traits&lt;InputIt&gt;::difference_type</code> \u662f\u4e00\u4e2a\u7c7b\u578b\uff0c\u5b83\u80fd\u591f\u8868\u793a\u4e24\u4e2a\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u901a\u5e38\u7528\u4e8e\u8ba1\u6570\u3002 \u8fd9\u4e2a <code>count_if</code> \u51fd\u6570\u6a21\u677f\u63a5\u53d7\u4e00\u4e2a\u8303\u56f4 <code>[first, last)</code> \u548c\u4e00\u4e2a\u8c13\u8bcd <code>pred</code>\uff0c\u7136\u540e\u904d\u5386\u8fd9\u4e2a\u8303\u56f4\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\u5e94\u7528\u8c13\u8bcd\u3002\u5982\u679c\u8c13\u8bcd\u8fd4\u56de <code>true</code>\uff0c\u5219\u589e\u52a0\u8ba1\u6570\u3002 \u4f7f\u7528\u8fd9\u4e2a\u6a21\u677f\u51fd\u6570\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a <pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\nint main() {\n    std::vector&lt;int&gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n    // \u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u4f5c\u4e3a\u4e00\u5143\u8c13\u8bcd\uff0c\u8ba1\u7b97\u5076\u6570\u7684\u6570\u91cf\n    auto even_count = count_if(vec.begin(), vec.end(), [](int x) { return x % 2 == 0; });\n\n    std::cout &lt;&lt; \"Number of even elements: \" &lt;&lt; even_count &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre> \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>count_if</code> \u51fd\u6570\u6a21\u677f\u88ab\u7528\u6765\u8ba1\u7b97 <code>vec</code> \u4e2d\u5076\u6570\u7684\u6570\u91cf\u3002Lambda \u8868\u8fbe\u5f0f <code>[](int x) { return x % 2 == 0; }</code> \u4f5c\u4e3a\u4e00\u5143\u8c13\u8bcd\uff0c\u68c0\u67e5\u4e00\u4e2a\u6574\u6570\u662f\u5426\u4e3a\u5076\u6570\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#algorithm","title":"algorithm","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#remove","title":"remove","text":"<p>std::remove does not change the size of the container! The algorithm is not a member o std::vector(or any other collection) so it can't change its size member.</p> <p>erase-remove idiom <pre><code>v.erase(std::remove_if(\n    v.begin(),v.end(),pred),\n    v.end()\n);\n</code></pre> \u8fd9\u6bb5\u4ee3\u7801\u662fC++\u4e2d\u7528\u4e8e\u79fb\u9664\u5bb9\u5668<code>v</code>\u4e2d\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\uff08\u7531\u51fd\u6570\u5bf9\u8c61<code>pred</code>\u6307\u5b9a\uff09\u7684\u5143\u7d20\u7684\u5e38\u89c1\u6a21\u5f0f\u3002\u8fd9\u91cc\u662f\u5206\u6b65\u89e3\u91ca\uff1a 1. <code>std::remove_if</code>\u662f\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5b83\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\uff1a\u5f00\u59cb\u8fed\u4ee3\u5668<code>v.begin()</code>\uff0c\u7ed3\u675f\u8fed\u4ee3\u5668<code>v.end()</code>\uff0c\u548c\u4e00\u4e2a\u8c13\u8bcd\u51fd\u6570<code>pred</code>\u3002\u8c13\u8bcd<code>pred</code>\u662f\u4e00\u4e2a\u53ef\u4ee5\u8c03\u7528\u7684\u5bf9\u8c61\uff08\u6bd4\u5982\u51fd\u6570\u3001\u51fd\u6570\u6307\u9488\u6216\u8005\u91cd\u8f7d\u4e86<code>operator()</code>\u7684\u7c7b\u5bf9\u8c61\uff09\uff0c\u5b83\u63a5\u53d7\u5bb9\u5668\u7684\u5143\u7d20\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u3002 2. <code>std::remove_if</code>\u7b97\u6cd5\u4f1a\u904d\u5386\u6307\u5b9a\u8303\u56f4\u5185\u7684\u5143\u7d20\uff0c\u5e76\u5c06\u4e0d\u6ee1\u8db3\u8c13\u8bcd<code>pred</code>\uff08\u5373<code>pred(element)</code>\u8fd4\u56de<code>false</code>\uff09\u7684\u5143\u7d20\u79fb\u52a8\u5230\u5e8f\u5217\u7684\u524d\u9762\u3002\u7b97\u6cd5\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u6700\u540e\u4e00\u4e2a\u4e0d\u88ab\u79fb\u9664\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002 3. <code>v.erase</code>\u662f\u4e00\u4e2a\u6210\u5458\u51fd\u6570\uff0c\u5b83\u7528\u4e8e\u4ece\u5bb9\u5668\u4e2d\u5220\u9664\u5143\u7d20\u3002\u8fd9\u91cc\u5b83\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f<code>std::remove_if</code>\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\uff0c\u5b83\u6307\u5411\u7b2c\u4e00\u4e2a\u5e94\u8be5\u88ab\u79fb\u9664\u7684\u5143\u7d20\uff1b\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5bb9\u5668\u7684\u7ed3\u675f\u8fed\u4ee3\u5668<code>v.end()</code>\u3002 \u6240\u4ee5\uff0c\u6574\u4e2a\u8868\u8fbe\u5f0f<code>v.erase(std::remove_if(v.begin(), v.end(), pred), v.end())</code>\u7684\u5de5\u4f5c\u6d41\u7a0b\u5982\u4e0b\uff1a - \u4f7f\u7528<code>std::remove_if</code>\u627e\u51fa\u6240\u6709\u9700\u8981\u79fb\u9664\u7684\u5143\u7d20\uff0c\u5e76\u5c06\u4e0d\u9700\u8981\u79fb\u9664\u7684\u5143\u7d20\u79fb\u52a8\u5230\u5bb9\u5668\u7684\u524d\u9762\u3002 - \u4f7f\u7528<code>v.erase</code>\u5220\u9664\u90a3\u4e9b\u88ab\u79fb\u52a8\u5230\u5bb9\u5668\u672b\u5c3e\u7684\u5143\u7d20\u3002 \u6700\u7ec8\u7684\u7ed3\u679c\u662f\uff0c\u5bb9\u5668<code>v</code>\u4e2d\u6240\u6709\u6ee1\u8db3\u8c13\u8bcd<code>pred</code>\u7684\u5143\u7d20\u90fd\u88ab\u79fb\u9664\u4e86\uff0c\u5bb9\u5668\u7684\u5927\u5c0f\u4e5f\u76f8\u5e94\u5730\u51cf\u5c0f\u4e86\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c<code>std::remove_if</code>\u5e76\u4e0d\u5b9e\u9645\u5220\u9664\u5143\u7d20\uff0c\u5b83\u53ea\u662f\u5c06\u4e0d\u9700\u8981\u5220\u9664\u7684\u5143\u7d20\u79fb\u52a8\u5230\u5e8f\u5217\u7684\u524d\u9762\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u903b\u8f91\u672b\u5c3e\u7684\u8fed\u4ee3\u5668\u3002\u5b9e\u9645\u7684\u5220\u9664\u64cd\u4f5c\u662f\u7531<code>erase</code>\u65b9\u6cd5\u5b8c\u6210\u7684\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture9-stl-summary","title":"lecture9: STL summary","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#ifstream","title":"\u6587\u4ef6\u8bfb\u53d6 ifstream","text":"<p><code>ifstream</code> \u662f C++ \u4e2d\u7528\u4e8e\u8f93\u5165\u6587\u4ef6\u6d41\u7684\u7c7b\uff0c\u5b83\u662f\u4ece <code>fstream</code> \u7c7b\u6d3e\u751f\u800c\u6765\u7684\uff0c\u7528\u4e8e\u4ece\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\u3002\u4ee5\u4e0b\u662f <code>ifstream</code> \u7684\u57fa\u672c\u7528\u6cd5\uff1a</p> <ol> <li>\u5305\u542b\u5934\u6587\u4ef6 \u9996\u5148\uff0c\u4f60\u9700\u8981\u5305\u542b <code>&lt;fstream&gt;</code> \u5934\u6587\u4ef6\uff0c\u8fd9\u662f\u4f7f\u7528 <code>ifstream</code> \u7684\u524d\u63d0\u3002 <pre><code>#include &lt;fstream&gt;\n</code></pre></li> <li> <p>\u521b\u5efa <code>ifstream</code> \u5bf9\u8c61 \u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a <code>ifstream</code> \u5bf9\u8c61\u6765\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u3002 <pre><code>ifstream inputFile(\"example.txt\");\n</code></pre></p> </li> <li> <p>\u68c0\u67e5\u6587\u4ef6\u662f\u5426\u6210\u529f\u6253\u5f00 \u5728\u4f7f\u7528\u6587\u4ef6\u6d41\u4e4b\u524d\uff0c\u5e94\u5f53\u68c0\u67e5\u6587\u4ef6\u662f\u5426\u6210\u529f\u6253\u5f00\u3002 <pre><code>if (!inputFile.is_open()) {\n    cerr &lt;&lt; \"\u65e0\u6cd5\u6253\u5f00\u6587\u4ef6\uff01\" &lt;&lt; endl;\n    return -1; // \u6216\u8005\u5176\u4ed6\u9519\u8bef\u5904\u7406\n}\n</code></pre></p> </li> <li>\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9 \u4f60\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u65b9\u6cd5\u6765\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u7528\u7684\u65b9\u6cd5\uff1a</li> </ol> <p>\u4f7f\u7528 <code>&gt;&gt;</code> \u8fd0\u7b97\u7b26 <pre><code>string line;\nwhile (inputFile &gt;&gt; line) {\n    cout &lt;&lt; line &lt;&lt; endl;\n}\n</code></pre></p> <p>\u4f7f\u7528 <code>getline()</code> \u51fd\u6570 <pre><code>string line;\nwhile (getline(inputFile, line)) {\n    cout &lt;&lt; line &lt;&lt; endl;\n}\n</code></pre></p> <p>\u8bfb\u53d6\u5b57\u7b26 <pre><code>char c;\nwhile (inputFile.get(c)) {\n    cout &lt;&lt; c;\n}\n</code></pre></p> <ol> <li>\u5173\u95ed\u6587\u4ef6 \u5f53\u4f60\u5b8c\u6210\u6587\u4ef6\u64cd\u4f5c\u540e\uff0c\u5e94\u5f53\u5173\u95ed\u6587\u4ef6\u3002 <pre><code>inputFile.close();\n</code></pre></li> </ol> <p>\u5b8c\u6574\u793a\u4f8b \u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 <code>ifstream</code> \u8bfb\u53d6\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u7684\u5185\u5bb9\u3002 <pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main() {\n    ifstream inputFile(\"example.txt\");\n    if (!inputFile.is_open()) {\n        cerr &lt;&lt; \"\u65e0\u6cd5\u6253\u5f00\u6587\u4ef6\uff01\" &lt;&lt; endl;\n        return -1;\n    }\n    string line;\n    while (getline(inputFile, line)) {\n        cout &lt;&lt; line &lt;&lt; endl;\n    }\n    inputFile.close();\n    return 0;\n}\n</code></pre></p> <p>\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u7a0b\u5e8f\u5c1d\u8bd5\u6253\u5f00\u540d\u4e3a \"example.txt\" \u7684\u6587\u4ef6\uff0c\u5e76\u9010\u884c\u8bfb\u53d6\u5185\u5bb9\uff0c\u7136\u540e\u8f93\u51fa\u5230\u6807\u51c6\u8f93\u51fa\u3002\u6700\u540e\uff0c\u5173\u95ed\u6587\u4ef6\u6d41\u3002 \u5728\u4f7f\u7528\u6587\u4ef6\u6d41\u65f6\uff0c\u5e94\u5f53\u6ce8\u610f\u5f02\u5e38\u5904\u7406\u548c\u8d44\u6e90\u7ba1\u7406\uff0c\u6bd4\u5982\u4f7f\u7528 C++ RAII \u7279\u6027\u786e\u4fdd\u6587\u4ef6\u5728\u9000\u51fa\u4f5c\u7528\u57df\u65f6\u80fd\u591f\u88ab\u6b63\u786e\u5173\u95ed\u3002\u5728\u73b0\u4ee3 C++ \u4e2d\uff0c\u63a8\u8350\u4f7f\u7528 <code>std::ifstream</code> \u7684 RAII \u7279\u6027\uff0c\u8fd9\u6837\u4f60\u5c31\u4e0d\u9700\u8981\u663e\u5f0f\u8c03\u7528 <code>close()</code> \u65b9\u6cd5\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture-10classes-and-const-correctness","title":"lecture 10:Classes and const correctness","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#count-a-string-in-another-string","title":"count a string in another string","text":"<pre><code>int countOccurences(const string &amp;word ,const string &amp; text ){\n    string tofind =\" \"+word+\" \";\n\n    //std::search\n    auto curr = text.begin();\n    auto end = text.end();\n    int count = 0;\n\n    while( curr!=end){\n        auto found = std::search(curr,end,word.begin(),word.end());\n\n        if(found==end)break;\n\n        ++count;\n        curr=find+1;//the correct step may be \"curr=find+word.size()\";\n\n    }\n    return count;\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#stdsearch","title":"std::search","text":"<p><code>std::search</code> \u662f C++ \u6807\u51c6\u5e93\u4e2d\u7684\u4e00\u4e2a\u7b97\u6cd5\uff0c\u7528\u4e8e\u5728\u7ed9\u5b9a\u8303\u56f4\u5185\u67e5\u627e\u5b50\u5e8f\u5217\u3002\u5b83\u5b9a\u4e49\u5728 <code>&lt;algorithm&gt;</code> \u5934\u6587\u4ef6\u4e2d\u3002\u4ee5\u4e0b\u662f <code>std::search</code> \u7684\u57fa\u672c\u7528\u6cd5\u548c\u5b83\u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u7684\u4f5c\u7528\uff1a \u57fa\u672c\u7528\u6cd5\uff1a <pre><code>template &lt;class ForwardIterator1, class ForwardIterator2&gt;\nForwardIterator1 search(ForwardIterator1 first1, ForwardIterator1 last1,\n                       ForwardIterator2 first2, ForwardIterator2 last2);\n</code></pre> <code>std::search</code> \u63a5\u53d7\u56db\u4e2a\u8fed\u4ee3\u5668\u53c2\u6570\uff1a - <code>first1</code> \u548c <code>last1</code> \u5b9a\u4e49\u4e86\u8981\u641c\u7d22\u7684\u8303\u56f4\uff08\u5373\u4e3b\u5e8f\u5217\uff09\u3002 - <code>first2</code> \u548c <code>last2</code> \u5b9a\u4e49\u4e86\u8981\u67e5\u627e\u7684\u5b50\u5e8f\u5217\u3002 \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u5728\u4e3b\u5e8f\u5217\u4e2d\u627e\u5230\u5b50\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u5b50\u5e8f\u5217\uff0c\u5219\u8fd4\u56de <code>last1</code>\u3002 \u5728\u4ee3\u7801\u4e2d\u7684\u4f5c\u7528\uff1a \u5728\u63d0\u4f9b\u7684\u4ee3\u7801\u6bb5\u4e2d\uff0c<code>std::search</code> \u88ab\u7528\u4e8e\u5728\u6587\u672c <code>text</code> \u4e2d\u67e5\u627e\u5355\u8bcd <code>word</code>\uff1a <pre><code>auto found = std::search(curr, end, word.begin(), word.end());\n</code></pre> \u8fd9\u91cc\uff1a - <code>curr</code> \u662f\u5f53\u524d\u641c\u7d22\u5f00\u59cb\u7684\u4f4d\u7f6e\uff0c\u521d\u59cb\u65f6\u6307\u5411 <code>text</code> \u7684\u5f00\u59cb\u3002 - <code>end</code> \u662f <code>text</code> \u7684\u7ed3\u675f\u8fed\u4ee3\u5668\u3002 - <code>word.begin()</code> \u548c <code>word.end()</code> \u5206\u522b\u662f\u5355\u8bcd <code>word</code> \u7684\u5f00\u59cb\u548c\u7ed3\u675f\u8fed\u4ee3\u5668\u3002 <code>std::search</code> \u5c06\u4ece <code>curr</code> \u5f00\u59cb\u5728 <code>text</code> \u4e2d\u67e5\u627e <code>word</code> \u7684\u5e8f\u5217\u3002\u5982\u679c\u627e\u5230\u4e86 <code>word</code>\uff0c<code>found</code> \u5c06\u6307\u5411 <code>text</code> \u4e2d <code>word</code> \u7684\u5f00\u59cb\u4f4d\u7f6e\uff1b\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c<code>found</code> \u5c06\u7b49\u4e8e <code>end</code>\u3002 \u5728\u5faa\u73af\u4e2d\uff0c\u6bcf\u6b21\u627e\u5230 <code>word</code> \u540e\uff0c<code>curr</code> \u5e94\u8be5\u66f4\u65b0\u4e3a <code>found</code> \u4e4b\u540e\u7684\u4f4d\u7f6e\uff0c\u4ee5\u4fbf\u7ee7\u7eed\u5728\u5269\u4f59\u7684\u6587\u672c\u4e2d\u67e5\u627e <code>word</code>\u3002\u4f46\u662f\uff0c\u5982\u4e4b\u524d\u63d0\u5230\u7684\uff0c\u4ee3\u7801\u4e2d\u7684 <code>curr = found + 1;</code> \u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u5b83\u53ea\u524d\u8fdb\u4e86\u4e00\u4e2a\u5b57\u7b26\u800c\u4e0d\u662f\u6574\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u3002\u6b63\u786e\u7684\u66f4\u65b0\u5e94\u8be5\u662f <code>curr = found + word.size();</code>\u3002 <code>std::search</code> \u4f7f\u7528\u7684\u662f\u9ed8\u8ba4\u7684\u76f8\u7b49\u6bd4\u8f83\u64cd\u4f5c\uff0c\u5373 <code>operator==</code>\u3002\u5982\u679c\u9700\u8981\u4e0d\u540c\u7684\u6bd4\u8f83\u65b9\u5f0f\uff0c\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u989d\u5916\u7684\u6bd4\u8f83\u51fd\u6570\u6216\u5bf9\u8c61\u7ed9 <code>std::search</code>\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#_4","title":"\u6c42\u5411\u91cf\u70b9\u79ef","text":"<pre><code>int dotProduct(const vector&lt;int&gt;&amp; vec1, const vector&lt;int&gt; &amp; vec2){\n    return std::inner_product(vec1.begin(),vec1.end(),vec2.begin(),0);\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#const","title":"const","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#a-const-pointer","title":"a const pointer","text":"<p>using pointers with const is a little tricky</p> <p>when in doubt,read right to left</p> <pre><code>//constantcpointer to a non-constant int\nint * const p;\n\n//non-constnt pointer to a constant int\nconst int *p;\nint const *p;\n\n//constant pointer to a constant int\nconst int *const p;\nint const * const p;\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#const-iterators","title":"const iterators","text":"<pre><code>const vector&lt;int&gt;::iterator itr = v.begin();\n*itr = 5; //ok! changing what itr points to\n++itr; //bad! can't modify itr\n\nvector&lt;int&gt;::const_iterator itr = v.begin();\n*itr = 5; //bad! can't change value of itr\n++itr; //ok! changing v\nint value = *itr; //ok! reading from itr\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#challenge-mode","title":"challenge mode","text":"<pre><code>const int* const myClassMethod(const int * const &amp; param) const;\n</code></pre> <p>\u8fd9\u4e2a\u51fd\u6570\u58f0\u660e\u5305\u542b\u4e86\u591a\u4e2a <code>const</code> \u5173\u952e\u5b57\uff0c\u6bcf\u4e2a\u90fd\u626e\u6f14\u7740\u4e0d\u540c\u7684\u89d2\u8272\u3002\u4e0b\u9762\u662f\u5bf9\u6bcf\u4e2a <code>const</code> \u7684\u89e3\u91ca\uff1a</p> <ol> <li> <p><code>const int* const</code>\uff1a    - \u7b2c\u4e00\u4e2a <code>const</code> \u8868\u793a\u8fd4\u56de\u7c7b\u578b\u662f\u4e00\u4e2a\u6307\u5411\u5e38\u91cf\u6574\u6570\u7684\u6307\u9488\u3002\u8fd9\u610f\u5473\u7740\u901a\u8fc7\u8fd4\u56de\u7684\u6307\u9488\u4e0d\u80fd\u4fee\u6539\u6307\u5411\u7684\u6574\u6570\u503c\u3002    - \u7b2c\u4e8c\u4e2a <code>const</code> \u8868\u793a\u8fd4\u56de\u7684\u6307\u9488\u672c\u8eab\u662f\u4e00\u4e2a\u5e38\u91cf\u6307\u9488\uff0c\u8fd9\u610f\u5473\u7740\u4e0d\u80fd\u66f4\u6539\u6307\u9488\u7684\u5730\u5740\uff0c\u5373\u8fd4\u56de\u7684\u6307\u9488\u503c\u4e0d\u80fd\u88ab\u8d4b\u7ed9\u5176\u4ed6\u6307\u9488\u53d8\u91cf\u3002</p> </li> <li> <p><code>myClassMethod</code>\uff1a    - \u8fd9\u662f\u51fd\u6570\u7684\u540d\u79f0\u3002</p> </li> <li> <p><code>(const int * const &amp; param)</code>\uff1a    - \u7b2c\u4e00\u4e2a <code>const</code> \u8868\u793a\u53c2\u6570 <code>param</code> \u662f\u4e00\u4e2a\u6307\u5411\u5e38\u91cf\u6574\u6570\u7684\u6307\u9488\uff0c\u610f\u5473\u7740\u5728\u51fd\u6570\u5185\u90e8\u4e0d\u80fd\u901a\u8fc7 <code>param</code> \u6307\u9488\u4fee\u6539\u5b83\u6240\u6307\u5411\u7684\u503c\u3002    - \u7b2c\u4e8c\u4e2a <code>const</code> \u8868\u793a <code>param</code> \u672c\u8eab\u662f\u4e00\u4e2a\u5e38\u91cf\u6307\u9488\uff0c\u4f46\u5728\u8fd9\u91cc\u4e0e\u5f15\u7528\u7ed3\u5408\u4f7f\u7528\u65f6\uff0c\u5b83\u8868\u793a\u5f15\u7528\u7684\u662f\u4e00\u4e2a\u5e38\u91cf\u6307\u9488\uff0c\u5373\u4e0d\u80fd\u901a\u8fc7\u5f15\u7528\u6539\u53d8 <code>param</code> \u7684\u503c\u3002    - <code>&amp;</code> \u8868\u793a\u53c2\u6570\u662f\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4f20\u9012\u7684\u662f\u53c2\u6570\u7684\u522b\u540d\uff0c\u800c\u4e0d\u662f\u53c2\u6570\u7684\u526f\u672c\u3002\u867d\u7136\u5f15\u7528\u672c\u8eab\u4e0d\u5141\u8bb8\u6539\u53d8\uff0c\u4f46\u7531\u4e8e <code>param</code> \u662f\u4e00\u4e2a\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488\u7684\u5f15\u7528\uff0c\u56e0\u6b64\u4f60\u4e5f\u4e0d\u80fd\u901a\u8fc7\u5f15\u7528\u6765\u6539\u53d8\u6307\u9488\u7684\u503c\u3002</p> </li> <li> <p>\u6700\u540e\u4e00\u4e2a <code>const</code>\uff1a    - \u8fd9\u4e2a <code>const</code> \u51fa\u73b0\u5728\u51fd\u6570\u58f0\u660e\u7684\u672b\u5c3e\uff0c\u8868\u793a\u8fd9\u4e2a\u6210\u5458\u51fd\u6570\u662f\u5e38\u91cf\u6210\u5458\u51fd\u6570\u3002\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u4f53\u5185\u4e0d\u80fd\u4fee\u6539\u7c7b\u7684\u4efb\u4f55\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf\uff0c\u5e76\u4e14\u4e0d\u80fd\u8c03\u7528\u7c7b\u4e2d\u4efb\u4f55\u975e <code>const</code> \u6210\u5458\u51fd\u6570\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u8fd9\u4e2a\u51fd\u6570\u58f0\u660e\u8868\u660e <code>myClassMethod</code> \u662f\u4e00\u4e2a\u5e38\u91cf\u6210\u5458\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u6307\u5411\u5e38\u91cf\u6574\u6570\u7684\u5e38\u91cf\u6307\u9488\u7684\u5f15\u7528\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5e38\u91cf\u6574\u6570\u7684\u5e38\u91cf\u6307\u9488\u3002\u5728\u6574\u4e2a\u51fd\u6570\u8c03\u7528\u8fc7\u7a0b\u4e2d\uff0c\u901a\u8fc7\u6307\u9488\u6216\u5f15\u7528\u90fd\u4e0d\u80fd\u4fee\u6539\u4f20\u9012\u7684\u6574\u6570\u503c\uff0c\u4e5f\u4e0d\u80fd\u4fee\u6539\u6307\u9488\u6216\u5f15\u7528\u672c\u8eab\u3002\u8fd4\u56de\u7684\u6307\u9488\u4e5f\u4e0d\u80fd\u7528\u4e8e\u4fee\u6539\u6307\u5411\u7684\u6570\u636e\uff0c\u4e14\u8fd4\u56de\u7684\u6307\u9488\u503c\u672c\u8eab\u4e0d\u80fd\u88ab\u66f4\u6539\u3002</p> </li> </ol>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture11operator-overlap","title":"lecture11:operator overlap","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#_5","title":"+=","text":"<pre><code>vector&lt;string&gt; &amp; vector&lt;string&gt;::operator+=(const int&amp; element){\n    push_back(element);\n    return *this;\n}\n\nvector&lt;string&gt;&amp; vector&lt;string&gt;::operator+=(const vector&lt;int&gt;&amp; other){\n    for(int val : other) push_back(val);\n    return *this;\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#_6","title":"+","text":"<pre><code>vector&lt;string&gt; operator+(const vector&lt;string&gt;&amp; vec,const string&amp; element){\n    vector&lt;string&gt; copy = vec;\n    copy+= element;\n    return copy;\n}\n\nvector&lt;string&gt; operator+(const vector&lt;string&gt;&amp; lhs,const vector&lt;string&gt;&amp; rhs){\n    vector&lt;string&gt; copy = lhs;\n    copy += rhs;\n    return copy;\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#_7","title":"[]","text":"<p><pre><code>string&amp; vector&lt;string&gt;::operator[](size_t index){\n    return _elems[index];\n}\n\nconst string&amp; vector&lt;string&gt;::operator[](size_t index) const{\n    return _elems[index];\n}\n</code></pre> \u5728\u6210\u5458\u51fd\u6570\u7684\u58f0\u660e\u4e2d\uff0c\u6700\u540e\u7684<code>const</code>\u5173\u952e\u5b57\u662f\u7528\u6765\u6307\u660e\u8be5\u51fd\u6570\u4e0d\u4f1a\u4fee\u6539\u8c03\u7528\u5b83\u7684\u5bf9\u8c61\u3002\u8fd9\u4e2a<code>const</code>\u662f\u51fd\u6570\u7b7e\u540d\u7684\u4e00\u90e8\u5206\uff0c\u79f0\u4e3a\u6210\u5458\u51fd\u6570\u7684\u5e38\u91cf\u6027(constness)\u3002\u4ee5\u4e0b\u662f\u5173\u4e8e\u8fd9\u4e2a<code>const</code>\u5173\u952e\u5b57\u7684\u8be6\u7ec6\u89e3\u91ca\u548c\u5982\u679c\u7701\u7565\u5b83\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a</p> <p><code>const</code>\u5173\u952e\u5b57\u7684\u4f5c\u7528</p> <p>\u5728\u51fd\u6570<code>const string&amp; vector&lt;string&gt;::operator[](size_t index) const</code>\u4e2d\uff0c\u6700\u540e\u7684<code>const</code>\u8868\u660e\uff1a - \u8fd9\u4e2a\u51fd\u6570\u627f\u8bfa\u4e0d\u4f1a\u4fee\u6539\u8c03\u7528\u5b83\u7684\u5bf9\u8c61\u7684\u72b6\u6001\uff08\u5373\uff0c\u4e0d\u4f1a\u4fee\u6539\u5bf9\u8c61\u7684\u4efb\u4f55\u6210\u5458\u53d8\u91cf\uff09\u3002 - \u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u88ab\u4e00\u4e2aconst\u5bf9\u8c61\u8c03\u7528\u3002</p> <p>\u5982\u679c\u7701\u7565<code>const</code>\u4f1a\u53d1\u751f\u4ec0\u4e48 \u5982\u679c\u7701\u7565\u4e86\u6700\u540e\u7684<code>const</code>\uff0c\u51fd\u6570\u58f0\u660e\u5c06\u53d8\u4e3a\uff1a</p> <p><pre><code>const string&amp; vector&lt;string&gt;::operator[](size_t index){\n    return _elems[index];\n}\n</code></pre> \u4ee5\u4e0b\u662f\u7701\u7565<code>const</code>\u540e\u4f1a\u53d1\u751f\u7684\u60c5\u51b5\uff1a 1. \u4e0d\u80fd\u901a\u8fc7const\u5bf9\u8c61\u8c03\u7528\uff1a\u5982\u679c\u4e00\u4e2a<code>vector&lt;string&gt;</code>\u5bf9\u8c61\u88ab\u58f0\u660e\u4e3aconst\uff0c\u4f60\u5c06\u65e0\u6cd5\u4f7f\u7528\u8fd9\u4e2a\u6ca1\u6709<code>const</code>\u7684<code>operator[]</code>\u6765\u8bbf\u95ee\u5b83\u7684\u5143\u7d20\uff0c\u56e0\u4e3aconst\u5bf9\u8c61\u53ea\u80fd\u8c03\u7528const\u6210\u5458\u51fd\u6570\u3002 <pre><code>const vector&lt;string&gt; vec = {\"apple\", \"banana\", \"cherry\"};\nstring fruit = vec[0]; // \u9519\u8bef\uff1a\u4e0d\u80fd\u8c03\u7528\u975econst operator[]\u901a\u8fc7const\u5bf9\u8c61\n</code></pre> 2. \u53ef\u80fd\u4f1a\u4fee\u6539\u5bf9\u8c61\uff1a\u6ca1\u6709<code>const</code>\u4fee\u9970\u7684\u6210\u5458\u51fd\u6570\u53ef\u80fd\u4f1a\u4fee\u6539\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\uff0c\u8fd9\u8fdd\u53cd\u4e86const\u5bf9\u8c61\u7684\u4e0d\u53d8\u6027\u539f\u5219\u3002\u867d\u7136\u5728\u8fd9\u4e2a\u7279\u5b9a\u7684\u4f8b\u5b50\u4e2d\uff0c\u51fd\u6570\u8fd4\u56de\u7684\u662f\u6210\u5458\u6570\u7ec4\u7684\u5f15\u7528\uff0c\u5e76\u4e14\u51fd\u6570\u4f53\u672c\u8eab\u6ca1\u6709\u4fee\u6539\u4efb\u4f55\u4e1c\u897f\uff0c\u4f46\u662f\u7701\u7565<code>const</code>\u4f1a\u5141\u8bb8\u672a\u6765\u5bf9\u51fd\u6570\u7684\u5b9e\u73b0\u8fdb\u884c\u4fee\u6539\uff0c\u4ece\u800c\u53ef\u80fd\u4f1a\u4e0d\u5c0f\u5fc3\u8fdd\u53cdconst\u7684\u627f\u8bfa\u3002 3. \u4ee3\u7801\u610f\u56fe\u4e0d\u660e\u786e\uff1a\u7701\u7565<code>const</code>\u53ef\u80fd\u4f1a\u8ba9\u5176\u4ed6\u5f00\u53d1\u8005\u8bef\u89e3\u51fd\u6570\u7684\u610f\u56fe\uff0c\u8ba4\u4e3a\u51fd\u6570\u53ef\u80fd\u4f1a\u4fee\u6539\u5bf9\u8c61\u7684\u72b6\u6001\u3002 \u603b\u4e4b\uff0c\u7701\u7565\u6700\u540e\u7684<code>const</code>\u4f1a\u9650\u5236\u51fd\u6570\u7684\u4f7f\u7528\u8303\u56f4\uff0c\u5e76\u53ef\u80fd\u5bfc\u81f4\u4ee3\u7801\u7684\u610f\u56fe\u4e0d\u660e\u786e\u3002\u5728C++\u4e2d\uff0c\u6b63\u786e\u4f7f\u7528<code>const</code>\u662f\u7f16\u5199\u6e05\u6670\u3001\u5b89\u5168\u4ee3\u7801\u7684\u91cd\u8981\u90e8\u5206\u3002</p> <p>general rule of thumb:member vs non-member</p> <p>if binary operator and treats both operands equally(eg.both unchanged) implement as non-member(maybe friend).Examples:+,&lt;.</p> <p>if binary operator and not both equally(changes lhs),implement as member (allows easy access to lhs private members).Examples:+=.</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture12special-member-function","title":"lecture12:special member function","text":"<p>which special member function is called with each line?</p> <p><pre><code>StringVector function(StringVector vec0){\n    StringVector vec1;\n    StringVector vec2{\"Ito\",\"En\",\"Green\"};\n    StringVector vec3();\n    StringVector vec4(vec2);\n    StringVector vec5{};\n    StringVector vec6{vec3+vec4};\n    StringVector vec7 = vec4;\n    vec7=vec2;\n    return vec7;\n}\n</code></pre> \u5728C++\u4e2d\uff0c\u7279\u6b8a\u6210\u5458\u51fd\u6570\uff08\u4e5f\u79f0\u4e3a\u6784\u9020\u51fd\u6570\u3001\u6790\u6784\u51fd\u6570\u3001\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3001\u79fb\u52a8\u6784\u9020\u51fd\u6570\u3001\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\u548c\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26\uff09\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u88ab\u81ea\u52a8\u8c03\u7528\u3002\u4e0b\u9762\u662f\u5bf9\u60a8\u63d0\u4f9b\u7684\u4ee3\u7801\u884c\u4e2d\u4f7f\u7528\u7684\u7279\u6b8a\u6210\u5458\u51fd\u6570\u7684\u8be6\u7ec6\u89e3\u91ca\uff1a</p> <p>(1) <code>StringVector vec1;</code> - \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff1a\u8c03\u7528\u4e86StringVector\u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5bf9\u8c61\u3002 (2) <code>StringVector vec2{\"Ito\",\"En\",\"Green\"};</code> - \u5217\u8868\u521d\u59cb\u5316\u6784\u9020\u51fd\u6570\uff1a\u8c03\u7528\u4e86\u63a5\u53d7\u521d\u59cb\u5316\u5217\u8868\u7684\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u4e09\u4e2a\u5b57\u7b26\u4e32\u7684\u5bf9\u8c61\u3002 (3) <code>StringVector vec3();</code> - \u8fd9\u4e00\u884c\u5b9e\u9645\u4e0a\u58f0\u660e\u4e86\u4e00\u4e2a\u51fd\u6570<code>vec3</code>\uff0c\u5b83\u8fd4\u56de<code>StringVector</code>\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u521b\u5efa\u4e00\u4e2a<code>StringVector</code>\u5bf9\u8c61\u3002\u8981\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5bf9\u8c61\uff0c\u5e94\u8be5\u5199\u6210<code>StringVector vec3;</code>\uff0c\u8fd9\u6837\u4f1a\u8c03\u7528\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002 (4) <code>StringVector vec4(vec2);</code> - \u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff1a\u8c03\u7528\u4e86StringVector\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u521b\u5efavec4\uff0c\u5b83\u662fvec2\u7684\u4e00\u4e2a\u526f\u672c\u3002 (5) <code>StringVector vec5{};</code> - \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff1a\u4f7f\u7528\u4e86\u5927\u62ec\u53f7\u521d\u59cb\u5316\uff0c\u4f46\u56e0\u4e3a\u6ca1\u6709\u63d0\u4f9b\u521d\u59cb\u5316\u5217\u8868\uff0c\u6240\u4ee5\u8c03\u7528\u4e86\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5bf9\u8c61\u3002 (6) <code>StringVector vec6{vec3+vec4};</code> - \u5047\u8bbe<code>+</code>\u64cd\u4f5c\u7b26\u8fd4\u56de\u4e86\u4e00\u4e2a<code>StringVector</code>\u7c7b\u578b\u7684\u4e34\u65f6\u5bf9\u8c61\uff0c\u90a3\u4e48\u8fd9\u91cc\u4f1a\u8c03\u7528\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09\uff0c\u5426\u5219\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u4ece\u4e34\u65f6\u5bf9\u8c61\u521b\u5efavec6\u3002 (7) <code>StringVector vec7 = vec4;</code> - \u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff1a\u4f7f\u7528\u4e86\u62f7\u8d1d\u521d\u59cb\u5316\uff0c\u8c03\u7528\u4e86\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u521b\u5efavec7\uff0c\u5b83\u662fvec4\u7684\u4e00\u4e2a\u526f\u672c\u3002 (8) <code>vec7=vec2;</code> - \u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\uff1a\u8c03\u7528\u4e86\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\u6765\u5c06vec2\u7684\u5185\u5bb9\u8d4b\u503c\u7ed9vec7\u3002 (9) <code>return vec7;</code> - \u5982\u679c\u7f16\u8bd1\u5668\u652f\u6301\u8fd4\u56de\u503c\u4f18\u5316\uff08RVO\uff09\uff0c\u90a3\u4e48\u53ef\u80fd\u4e0d\u4f1a\u8c03\u7528\u4efb\u4f55\u7279\u6b8a\u6210\u5458\u51fd\u6570\uff0c\u56e0\u4e3avec0\u53ef\u4ee5\u76f4\u63a5\u5728\u8c03\u7528\u8005\u90a3\u91cc\u6784\u9020\u3002 - \u5982\u679c\u6ca1\u6709RVO\uff0c\u90a3\u4e48\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u8fd4\u56de\u503c\u7684\u526f\u672c\uff0c\u6216\u8005\u8c03\u7528\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff08\u5982\u679c\u652f\u6301\u7684\u8bdd\uff09\u3002 \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u5b9a\u4e49\u8fd9\u4e9b\u7279\u6b8a\u6210\u5458\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u4e3a\u7c7b\u751f\u6210\u9ed8\u8ba4\u7684\u7248\u672c\u3002\u5982\u679c\u7c7b\u4e2d\u5305\u542b\u7684\u8d44\u6e90\u9700\u8981\u7279\u5b9a\u7684\u7ba1\u7406\uff08\u4f8b\u5982\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\uff09\uff0c\u5219\u901a\u5e38\u9700\u8981\u81ea\u5b9a\u4e49\u8fd9\u4e9b\u7279\u6b8a\u6210\u5458\u51fd\u6570\u3002</p> <p></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture13move-semantics","title":"lecture13:move semantics","text":"<pre><code>StrVector readNames(size_t size);\n\nint main(){\n    StrVector name1 = readNames(54321234);\n    StrVector name2;\n    name2 = readNames(54321234);\n}\n\nStrVector readNames(size_t size){\n    StrVector names(size,\"Ito\");\n    return names;\n}\n\n//\u6784\u9020\u51fd\u6570\u8c03\u7528\u6b21\u6570\uff1aname1 \u7684\u79fb\u52a8\u6784\u9020 (1 \u6b21) + name2 \u7684\u9ed8\u8ba4\u6784\u9020 (1 \u6b21) + name2 \u7684\u8d4b\u503c\u5bfc\u81f4\u7684\u6784\u9020 (4 \u6b21\uff0c\u5982\u679c\u8d4b\u503c\u8fd0\u7b97\u7b26\u662f\u9ad8\u6548\u5b9e\u73b0\u7684\uff0c\u53ea\u6784\u9020\u65b0\u5143\u7d20\uff0c\u4e0d\u590d\u5236\u65e7\u5143\u7d20\uff09= 6 \u6b21\u3002\n</code></pre> <p>csdn\u91cc\u9762\u8bb2\u7684\u633a\u597d\uff0c\u5173\u4e8e\u5de6\u503c\u3001\u53f3\u503c\u3001\u5de6\u53f3\u503c\u5f15\u7528\u7684\uff0cclick here</p> <p>why r-values are to move semantics.</p> <p>an object that is an I-value is not disposible, so you can copy from,but definitely can't move them.</p> <p>an object that is an r-value is dispensible, so you can either copy or move from.</p> <p></p> <p>\u6709\u70b9\u6ca1\u5b66\u660e\u767d\u5509~~</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture14inheritancescreencast","title":"lecture14\uff1aInheritance(Screencast)","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#namespace","title":"namespace","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#inheritance","title":"Inheritance","text":"<p>some ppts about interface,a,little complex  </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture15inheritance-and-template","title":"lecture15:inheritance and template","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#abstract-classes","title":"Abstract Classes","text":"<p>if a class has at least one pure virtual function, then it is called an abstract class.(Interfaces are a subset of abstract classes.)</p> <p>Abstract classes can't be instantiated.</p> <pre><code>class Base{\npublic:\n    virtual void foo() = 0;//pure virtual function\n    virtual void foo2(); //non-pure virtual function\n    void bar() = { return 42;};//regular function\n}\n</code></pre> <p></p> <p>an example: <pre><code>class Drink{\npublic:\n    Drink()= default;\n    Drink(std::string flavor) : _flavor(flavor) {}\n\n    virtual void make() = 0;\n    virtual ~Drink() = default;\nprivate:\n    std::string _flavor;\n}\n\nclass Tea : public Drink{\npublic:\n    Tea() = default;\n    Tea(std::string flavor) : Drink(flavor){}\n    virtual ~Tea()= default;\n\n    void make(){\n        cout&lt;&lt;\"Made tea from the Tea class\"&lt;&lt; endl;\n    }\n}\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#template","title":"template","text":"<p>Templates vs. Derived Classes </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/Introduction/","title":"Introduction","text":"<p>\u63a8\u8350\u4e00\u4e2a\u597d\u7528\u7684\u81ea\u5b66\u7f51\u7ad9\uff0c\u524d\u4eba\u7ecf\u9a8c \u8bdd\u4e0d\u591a\u8bf4 \u5f00\u542f\u795e\u79d8\u7684CS\u5b66\u4e60\u4e4b\u65c5\u5427\uff01</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/3DGS/3DGS%20splatting/","title":"3DGS splatting 3D gaussian","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/3DGS/3DGS%20splatting/#splatting","title":"splatting","text":"<p>\u5b9a\u4e49\uff1a 1. \u4e00\u79cd\u4f53\u6e32\u67d3\u7684\u65b9\u6cd5\uff1a\u4ece3D\u7269\u4f53\u6e32\u67d3\u52302D\u5e73\u9762 2. Ray-casting\u662f\u88ab\u52a8\u7684\uff08NeRF\uff09 \u8ba1\u7b97\u51fa\u6bcf\u4e2a\u50cf\u7d20\u70b9\u53d7\u5230\u53d1\u5149\u7c92\u5b50\u7684\u5f71\u54cd\u6765\u751f\u6210\u56fe\u50cf 3. Splatting\u662f\u4e3b\u52a8\u7684 \u8ba1\u7b97\u51fa\u6bcf\u4e2a\u53d1\u5149\u7c92\u5b50\u5982\u4f55\u5f71\u54cd\u50cf\u7d20\u70b9\u3002</p> <p> </p> <p></p> <p> 1. \u9ad8\u65af\u5206\u5e03\u4e2d\uff0cx~N(miu,lamuda),miu\u662f\u5747\u503c\uff0clamuda\u662f\u534f\u65b9\u5dee\u77e9\u9635 2. \u4efb\u610f\u9ad8\u65af\u53ef\u4ee5\u770b\u4f5c\u662f\u6807\u51c6\u9ad8\u65af\u901a\u8fc7\u4eff\u5c04\u53d8\u6362\u5f97\u5230\uff0c\u7403\u53d8\u6210\u4e86\u692d\u7403\u3002 3. \u65b0\u7684\u9ad8\u65af\u7684\u534f\u65b9\u5dee\u77e9\u9635\u4e3aA\u00b7lamuda\u00b7A\u7684\u8f6c\u7f6e\uff0c\u5148\u8bb0\u7740\uff0c\u4ee5\u540e\u518d\u8bc1</p> <p> 1. R symbolizes rotation,S symbolizes \u7f29\u653e\uff0cb symbolizes \u5e73\u79fb\uff0c\u6240\u4ee5\u9ad8\u65af\u5206\u5e03\u7684\u4eff\u5c04\u53d8\u6362\u90fd\u53ef\u4ee5\u770b\u4f5c\u662f\u65cb\u8f6c\u3001\u7f29\u653e\u3001\u5e73\u79fb\u7684\u7ec4\u5408\uff0c\u5176\u4e2dA\u53ef\u4ee5\u62c6\u6210R\u00b7S. 2. \u5c06\u534f\u65b9\u5dee\u77e9\u9635\u7684A\u62c6\u6210R\u00b7S\u5c31\u5f97\u5230\u8bba\u6587\u91cc\u9762\u7684\u516c\u5f0f\u4e86 3. \u5df2\u77e5\u534f\u65b9\u5dee\u77e9\u9635\uff0c\u5982\u4f55\u6c42r\u548cS?  \u7b54\uff1a\u901a\u8fc7\u7279\u5f81\u503c\u5206\u89e3\uff0c 4.  5. </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/3DGS/3DGS%20splatting/#code","title":"\u8ba1\u7b97\u534f\u65b9\u5dee\u77e9\u9635(code)","text":"<p>\u5c06cuda\u8f6c\u4e3apython <pre><code>def computerCov3D(scale,mod,rot):\n    S = np.array([\n        [scale[0]*mod,0,0],\n        [0,scale[1]*mod,0],\n        [0,0,scale[2]*mod]\n    ])\n    # scale\u662f\u5bf9\u89d2\u77e9\u9635\u7684\u4e09\u4e2a\u7279\u5f81\u503c\u7684\u5411\u91cf[s1,s,s3],mod\u662f\u6bd4\u4f8b\u7cfb\u6570\u9ed8\u8ba4\u4e3a1\uff0crot\u662f\u65cb\u8f6c\u77e9\u9635\u3002\n\n    R = rot #R\u4e3a\u65cb\u8f6c\u77e9\u9635\n    M=np.dot(R,S) #M\u4e3aR\u548cS\u7684\u77e9\u9635\u4e58\u79ef\n    cov3D=np.dot(M,M.T)#M.T\u4e3a\u77e9\u9635M\u7684\u8f6c\u7f6e\n    return cov3D \n</code></pre> \u6700\u7ec8\u8fd4\u56de\u662f\u4e00\u4e2a\u534f\u65b9\u5dee\u77e9\u9635\u3002</p> <p>\u6240\u4ee5\uff0c3D gaussian\u662f\u692d\u7403\uff0c\u534f\u65b9\u5dee\u77e9\u9635\u63a7\u5236\u692d\u5706\u5f62\u72b6\uff0c\u534f\u65b9\u5dee\u77e9\u9635\u7528\u65cb\u8f6c\u548c\u7f29\u653e\u6765\u8868\u793a</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/3DGS/3DGS%20splatting/#3dgs-splatting-3d","title":"3DGS splatting 3D \u5230\u50cf\u7d20","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/3DGS/3DGS%20splatting/#_1","title":"\u89c2\u6d4b\u53d8\u6362","text":"<p>\u4ece\u4e16\u754c\u5750\u6807\u7cfb\u5230\u76f8\u673a\u5750\u6807\u7cfb </p> <p> \u5de6\u8fb9\u7684\u77e9\u9635\u662f\u65cb\u8f6c\uff0c\u53f3\u8fb9\u7684\u77e9\u9635\u662f\u5e73\u79fb</p> <p></p> <p></p> <p> \u6700\u5de6\u4e0b\u65b9\u7684\u7ea2\u8272\u65b9\u5757\u5f88\u7a81\u5140\uff0c\u4e0d\u8fde\u7eed\uff0c\u6240\u4ee5\u8fd9\u4e2a\u91c7\u6837\u65b9\u5f0f\u5b58\u5728\u5f0a\u7aef\u3002</p> <p> 1. eye\u662f\u76f8\u673a\u6240\u5904\u7684\u4f4d\u7f6e 2. viewport\u662f\u89c6\u53e3\u53d8\u6362\u77e9\u9635\uff0c\u89c6\u53e3\u53d8\u6362\u5c31\u662f\u4ece\u4e0d\u89c4\u5219\u957f\u65b9\u4f53\u538b\u7f29\u62101\u00d71\u00d71\u7684\u6807\u51c6\u7acb\u65b9\u4f53\u7684\u8fc7\u7a0b 3. MVP\u4e09\u6b65\u5206\u522b\u4e58\u4ee5\u89c2\u6d4b\u77e9\u9635\u548c\u6295\u5f71\u77e9\u9635\uff0cget_view_matrix\u662f\u89c2\u6d4b\u77e9\u9635\uff0cget_proj_matrix\u662f\u6295\u5f71\u77e9\u9635\u3002 4. \u7136\u540efor\u6bcf\u4e2a\u70b9\uff0c\u90fd\u4e58MVP\u77e9\u9635\u8fdb\u884c\u53d8\u6362\uff0c\u7136\u540e\u5f52\u4e00\u5316 5. \u6700\u540e\u4e24\u6b65\u5c06\u5355\u4f4d\u77e9\u9635\u62c9\u56de\u539f\u6765\u7684\u5c3a\u5bf8\u3002</p> <p></p> <p></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/3DGS/3DGS%20splatting/#_2","title":"\u96c5\u53ef\u6bd4\u77e9\u9635","text":"<p> \u96c5\u53ef\u6bd4\u77e9\u9635\u662f\u5bf9\u975e\u7ebf\u6027\u53d8\u6362\u7684\u4e00\u4e2a\u5c40\u90e8\u7684\u8fd1\u4f3c\uff0c\u5c40\u90e8\u8fd1\u4f3c\u540e\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u7ebf\u6027\u7684\u53d8\u6362</p> <p> 1. W\u662f\u89c2\u6d4b\u53d8\u6362\u5230\u76f8\u673a\u53d8\u6362\u7684\u4eff\u5c04\u53d8\u6362\u77e9\u9635 2. J\u662f\u76f8\u673a\u53d8\u6362\u5230\u9ad8\u65af\u6295\u5f71\u53d8\u6362\u7684\u96c5\u53ef\u6bd4\u77e9\u9635\uff0c\u4f5c\u7528\u662f\u8fd1\u4f3c\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u53d8\u6362\u7684\u538b\u7f29\u662f\u975e\u7ebf\u6027\u7684</p> <p> \u5747\u503c\u7684\u53d8\u6362\u5305\u542b\u89c6\u53e3\u53d8\u6362\uff0c\u4f46\u534f\u65b9\u5dee\u77e9\u9635\u7684\u53d8\u6362\u6ca1\u6709\u89c6\u53e3\u53d8\u6362</p> <p>  n\u662f\u524d\u9762\u7684\u5e95\u8fb9\u8ddd\u79bb\u773c\u775b\u7684\u8ddd\u79bb\uff0cf\u662f\u540e\u9762\u7684\u5e95\u8fb9\u8ddd\u79bb\u773c\u775b\u7684\u8ddd\u79bb\u3002</p> <p> \u89c6\u53e3\u53d8\u6362\u4e0e\u534f\u65b9\u5dee\u77e9\u9635\u65e0\u5173</p> <p> 1. \u6ce8\u610fp_orto\u5df2\u7ecf\u5b8c\u6210\u4e86view\u00d7proj\uff0c\u5373\u5b8c\u6210\u4e86\u89c2\u6d4b\u53d8\u6362\u548c\u6295\u5f71\u53d8\u6362\u3002 2. p_proj \u662f\u89c6\u53e3\u53d8\u6362\uff0c\u62c9\u6210\u4e00\u4e2a\u4e00\u4e58\u4e00\u4e58\u4e00\u7684\u7acb\u65b9\u4f53\uff0c\u70b9\u4f4d\u4e8e\u7acb\u65b9\u4f53\u5185 3. \u5149\u6805\u5316\uff0c\u6700\u540e\u4e00\u6b65point_image\u662f\u4eceNDC\u5e73\u9762\u62c9\u5230\u50cf\u7d20\u5e73\u9762</p> <p> 1. \u4ece\u4e16\u754c\u5750\u6807\u5230\u76f8\u673a\u5750\u6807\u7cfb 2. \u4ece\u89c6\u9525\u53d8\u6362\u6210\u7acb\u65b9\u4f53\uff0c\u96c5\u53ef\u6bd4\u77e9\u9635\u5b8c\u6210</p> <p> 1. \u8865\u4e0a\u7b14\u8bb02.23:27</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/3DGS/3DGS%20splatting/#3dgs","title":"3DGS \u989c\u8272","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/3DGS/3DGS%20splatting/#3dgs_1","title":"3DGS \u8db3\u8ff9\u5408\u6210","text":"<p>Tip</p> <p>C = Ci * Ai * Ti (\u989c\u8272(\u7531\u7403\u8c10\u51fd\u6570\u8ba1\u7b97\u5f97\u5230)\uff0c\u4e0d\u900f\u660e\u5ea6\uff0c\u6ca1\u6709\u88ab\u963b\u6321\u7684\u6982\u7387\uff0c)</p> <p> </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/3DGS/3DGS%20splatting/#_3","title":"\u673a\u5668\u5b66\u4e60\u4e0e\u53c2\u6570\u8bc4\u4f30","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/3DGS/Introduction/","title":"something a bit difficult","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CUDA%E7%BC%96%E7%A8%8B/Introduction/","title":"Introduction","text":"<p>\u5f02\u6784\u5e76\u884c\u7f16\u7a0b-CUDA\u7f16\u7a0b\uff0cUIUC</p> <p>GPU\u7684\u7f16\u7a0b\u8bed\u8a00</p> <p>\u4e5f\u662f3DGS\u9700\u8981\u7684\uff0c\u5c1d\u8bd5\u81ea\u5df1\u5b66\u4e60\u4e00\u4e0b\u5427\uff0c\u6709\u70b9\u795e\u5947\u7684\u65b0\u8bed\u8a00...</p> <p>\u54d4\u7ad9\u5b66\u4e60\u7f51\u7ad9\u5728\u6b64\uff0cclick this</p> <p>\u90a3\u5c31\u5f00\u59cb\u795e\u79d8\u7684CUDA\u7f16\u7a0b\u4e4b\u65c5\u5427~</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CUDA%E7%BC%96%E7%A8%8B/lecture1/","title":"Lecture1","text":"<p>Note</p> <p>grid\u662f\u90a3\u4e2a\u5927\u9b54\u65b9\uff0cblock\u662f\u5c0f\u7684\u4e00\u4e2a\u7acb\u65b9\u4f53\uff0c\u91cc\u9762\u518d\u5305\u542b\u7ebf\u7a0bthread</p> <p>gridDim.x,gridDim.y,gridDim.z\u5206\u522b\u4ee3\u8868\u7acb\u65b9\u4f53\u7684\u4e09\u8fb9\u957f\u5ea6</p> <p>blockDim.x,blockDim.y,blockDim.z\u5206\u522b\u4ee3\u8868\u7acb\u65b9\u4f53\u7684\u4e09\u8fb9\u957f\u5ea6</p> <p>block\u7d22\u5f15\uff1a(blockldx.x,blockldx.y,blockldx.z)</p> <p>thread\u7d22\u5f15:(threadldx.x,threadldx.y,threadldx.z)</p> <p></p> <p></p> <p>\u5168\u5c40\u7d22\u5f15\u7684\u8ba1\u7b97</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>\u5b58\u653e\u5728\u5bc4\u5b58\u5668\u4e2d\u7684index</p> <p></p> <p>\u4e00\u4e2a\u7b80\u5355\u793a\u4f8b\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;cuda_runtime.h&gt;\n#define N 256 // \u6570\u7ec4\u5927\u5c0f\n#define THREADS_PER_BLOCK 16 // \u6bcf\u4e2a\u7ebf\u7a0b\u5757\u7684\u7ebf\u7a0b\u6570\n__global__ void addArrays(int *d_A, int *d_B, int *d_C) {\n    int tid = threadIdx.x + blockIdx.x * blockDim.x;\n    __shared__ int sharedMem[THREADS_PER_BLOCK];\n    // Load data into shared memory\n    sharedMem[tid % THREADS_PER_BLOCK] = d_A[tid] + d_B[tid];\n    __syncthreads(); // Synchronize threads within the block\n    // Store result back to global memory\n    if (tid &lt; N) {\n        d_C[tid] = sharedMem[tid % THREADS_PER_BLOCK];\n    }\n}\nint main() {\n    int size = N * sizeof(int);\n    int *h_A = (int*)malloc(size);\n    int *h_B = (int*)malloc(size);\n    int *h_C = (int*)malloc(size);\n    // Initialize host arrays\n    for (int i = 0; i &lt; N; ++i) {\n        h_A[i] = i;\n        h_B[i] = i * 2;\n    }\n    int *d_A, *d_B, *d_C;\n    cudaMalloc((void**)&amp;d_A, size);\n    cudaMalloc((void**)&amp;d_B, size);\n    cudaMalloc((void**)&amp;d_C, size);\n    cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);\n    cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice);\n    // Calculate grid and block dimensions\n    dim3 blockSize(THREADS_PER_BLOCK, 1, 1);\n    dim3 gridSize((N + THREADS_PER_BLOCK - 1) / THREADS_PER_BLOCK, 1, 1);\n    // Launch kernel function\n    addArrays&lt;&lt;&lt;gridSize, blockSize&gt;&gt;&gt;(d_A, d_B, d_C);\n    // Copy result back to host\n    cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost);\n    // Print first 10 results\n    for (int i = 0; i &lt; 10; ++i) {\n        std::cout &lt;&lt; \"C[\" &lt;&lt; i &lt;&lt; \"] = \" &lt;&lt; h_C[i] &lt;&lt; std::endl;\n    }\n    // Free device memory\n    cudaFree(d_A);\n    cudaFree(d_B);\n    cudaFree(d_C);\n    // Free host memory\n    free(h_A);\n    free(h_B);\n    free(h_C);\n    return 0;\n}\n</code></pre> </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CUDA%E7%BC%96%E7%A8%8B/lecture1/#cuda-python","title":"cuda python","text":"Csdn\u7f51\u7ad9 <p>cuda python,click here</p> <p></p> <pre><code>import cv2\nimport numpy as np\nfrom numba import cuda\nimport itme\nimport math\n\ndef progress_gpu(img,channels):\n\ndef progress_cpu(img,dst):\n    rows,clos,channels=img.shape\n    for i in range(rows):\n        for j in range(cols):\n            for c in range(3):\n                color = img[i,j][c]*2.0+30\n                if color&gt;255:\n                    dst[i,j][c]=255\n                elif color&lt;0:\n                    dst[i,j][c]=0\n                else:\n                    dst[i,j][c]=color\n\nif __name__ == \"__main__\":\n    #create an image.\n    img = cv2.imread('test-nvidia.jpg')\n    rows,cols,channels=img.shape\n    dst_cpu = img.copy()\n    dst_gpu = img.copy()\n    start_cpu = time.time()\n    process_cpu(img,dst_cpu)\n    end_cpu = time.time()\n    time_cpu = (end_cpu-start_cpu)\n    print(\"CPU process time: \"+str(time_cpu))\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CUDA%E7%BC%96%E7%A8%8B/python%20cuda/","title":"python cuda \u7f16\u7a0b\u76f8\u5173","text":"<p>\u5173\u4e8e python cuda \u7f16\u7a0b\u7684\u4e00\u4e9bCSDN\u7f51\u7ad9</p> <p>python + cuda \u7f16\u7a0b(\u4e00) python + cuda \u7f16\u7a0b(\u4e8c)</p> <p>Python \u4e2d\u7684 CUDA \u7f16\u7a0b\u901a\u5e38\u4f7f\u7528 <code>Numba</code> \u6216 <code>PyCUDA</code> \u7b49\u5e93\u6765\u5b9e\u73b0\u3002<code>Numba</code> \u662f\u4e00\u4e2a\u652f\u6301 CUDA \u7684 JIT \u7f16\u8bd1\u5668\uff0c\u800c <code>PyCUDA</code> \u5219\u63d0\u4f9b\u4e86\u66f4\u5e95\u5c42\u7684 CUDA \u63a5\u53e3\u3002\u4e0b\u9762\u6211\u5c06\u901a\u8fc7\u51e0\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u8bb2\u89e3\u5982\u4f55\u4f7f\u7528 <code>Numba</code> \u548c <code>PyCUDA</code> \u8fdb\u884c CUDA \u7f16\u7a0b\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CUDA%E7%BC%96%E7%A8%8B/python%20cuda/#1-numba-cuda","title":"1. \u4f7f\u7528 Numba \u8fdb\u884c CUDA \u7f16\u7a0b","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CUDA%E7%BC%96%E7%A8%8B/python%20cuda/#numba","title":"\u5b89\u88c5 Numba","text":"<p>\u9996\u5148\uff0c\u4f60\u9700\u8981\u5b89\u88c5 <code>numba</code> \u5e93\uff1a <pre><code>pip install numba\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CUDA%E7%BC%96%E7%A8%8B/python%20cuda/#1","title":"\u793a\u4f8b 1: \u5411\u91cf\u52a0\u6cd5","text":"<pre><code>import numpy as np\nfrom numba import cuda\n\n# \u5b9a\u4e49 CUDA \u6838\u51fd\u6570\n@cuda.jit\ndef vector_add(a, b, c):\n    i = cuda.grid(1)\n    if i &lt; len(c):\n        c[i] = a[i] + b[i]\n\n# \u521d\u59cb\u5316\u6570\u636e\nN = 100000\na = np.random.rand(N).astype(np.float32)\nb = np.random.rand(N).astype(np.float32)\nc = np.zeros(N, dtype=np.float32)\n\n# \u914d\u7f6e\u7ebf\u7a0b\u5757\u548c\u7f51\u683c\u5927\u5c0f\nthreads_per_block = 256\nblocks_per_grid = (N + threads_per_block - 1) // threads_per_block\n\n# \u5c06\u6570\u636e\u62f7\u8d1d\u5230\u8bbe\u5907\na_device = cuda.to_device(a)\nb_device = cuda.to_device(b)\nc_device = cuda.device_array(N, dtype=np.float32)\n\n# \u542f\u52a8\u6838\u51fd\u6570\nvector_add[blocks_per_grid, threads_per_block](a_device, b_device, c_device)\n\n# \u5c06\u7ed3\u679c\u62f7\u8d1d\u56de\u4e3b\u673a\nc = c_device.copy_to_host()\n\n# \u9a8c\u8bc1\u7ed3\u679c\nassert np.allclose(c, a + b)\nprint(\"\u5411\u91cf\u52a0\u6cd5\u6210\u529f\uff01\")\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CUDA%E7%BC%96%E7%A8%8B/python%20cuda/#_1","title":"\u4ee3\u7801\u89e3\u91ca\uff1a","text":"<ol> <li><code>@cuda.jit</code> \u88c5\u9970\u5668\u7528\u4e8e\u5b9a\u4e49 CUDA \u6838\u51fd\u6570\u3002</li> <li><code>cuda.grid(1)</code> \u83b7\u53d6\u5f53\u524d\u7ebf\u7a0b\u7684\u5168\u5c40\u7d22\u5f15\u3002</li> <li><code>cuda.to_device()</code> \u5c06\u6570\u636e\u4ece\u4e3b\u673a\uff08CPU\uff09\u62f7\u8d1d\u5230\u8bbe\u5907\uff08GPU\uff09\u3002</li> <li><code>cuda.device_array()</code> \u5728\u8bbe\u5907\u4e0a\u5206\u914d\u5185\u5b58\u3002</li> <li><code>vector_add[blocks_per_grid, threads_per_block]</code> \u542f\u52a8\u6838\u51fd\u6570\uff0c\u6307\u5b9a\u7f51\u683c\u548c\u7ebf\u7a0b\u5757\u7684\u5927\u5c0f\u3002</li> <li><code>copy_to_host()</code> \u5c06\u7ed3\u679c\u4ece\u8bbe\u5907\u62f7\u8d1d\u56de\u4e3b\u673a\u3002</li> </ol>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CUDA%E7%BC%96%E7%A8%8B/python%20cuda/#2-pycuda-cuda","title":"2. \u4f7f\u7528 PyCUDA \u8fdb\u884c CUDA \u7f16\u7a0b","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CUDA%E7%BC%96%E7%A8%8B/python%20cuda/#pycuda","title":"\u5b89\u88c5 PyCUDA","text":"<p>\u9996\u5148\uff0c\u4f60\u9700\u8981\u5b89\u88c5 <code>pycuda</code> \u5e93\uff1a <pre><code>pip install pycuda\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CUDA%E7%BC%96%E7%A8%8B/python%20cuda/#2","title":"\u793a\u4f8b 2: \u77e9\u9635\u4e58\u6cd5","text":"<pre><code>import pycuda.driver as cuda\nimport pycuda.autoinit\nfrom pycuda.compiler import SourceModule\nimport numpy as np\n\n# \u5b9a\u4e49 CUDA \u6838\u51fd\u6570\nmod = SourceModule(\"\"\"\n    __global__ void matrix_mul(float *a, float *b, float *c, int n) {\n        int row = blockIdx.y * blockDim.y + threadIdx.y;\n        int col = blockIdx.x * blockDim.x + threadIdx.x;\n        float sum = 0.0f;\n        if (row &lt; n &amp;&amp; col &lt; n) {\n            for (int k = 0; k &lt; n; k++) {\n                sum += a[row * n + k] * b[k * n + col];\n            }\n            c[row * n + col] = sum;\n        }\n    }\n\"\"\")\n\n# \u521d\u59cb\u5316\u6570\u636e\nN = 32\na = np.random.randn(N, N).astype(np.float32)\nb = np.random.randn(N, N).astype(np.float32)\nc = np.zeros((N, N), dtype=np.float32)\n\n# \u5c06\u6570\u636e\u62f7\u8d1d\u5230\u8bbe\u5907\na_gpu = cuda.mem_alloc(a.nbytes)\nb_gpu = cuda.mem_alloc(b.nbytes)\nc_gpu = cuda.mem_alloc(c.nbytes)\n\ncuda.memcpy_htod(a_gpu, a)\ncuda.memcpy_htod(b_gpu, b)\n\n# \u83b7\u53d6\u6838\u51fd\u6570\nmatrix_mul = mod.get_function(\"matrix_mul\")\n\n# \u914d\u7f6e\u7ebf\u7a0b\u5757\u548c\u7f51\u683c\u5927\u5c0f\nblock_size = (16, 16, 1)\ngrid_size = (int(np.ceil(N / block_size[0])), int(np.ceil(N / block_size[1])))\n\n# \u542f\u52a8\u6838\u51fd\u6570\nmatrix_mul(a_gpu, b_gpu, c_gpu, np.int32(N), block=block_size, grid=grid_size)\n\n# \u5c06\u7ed3\u679c\u62f7\u8d1d\u56de\u4e3b\u673a\ncuda.memcpy_dtoh(c, c_gpu)\n\n# \u9a8c\u8bc1\u7ed3\u679c\nexpected = np.dot(a, b)\nassert np.allclose(c, expected, atol=1e-5)\nprint(\"\u77e9\u9635\u4e58\u6cd5\u6210\u529f\uff01\")\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CUDA%E7%BC%96%E7%A8%8B/python%20cuda/#_2","title":"\u4ee3\u7801\u89e3\u91ca\uff1a","text":"<ol> <li><code>SourceModule</code> \u7528\u4e8e\u7f16\u8bd1 CUDA \u6838\u51fd\u6570\u3002</li> <li><code>cuda.mem_alloc()</code> \u5728\u8bbe\u5907\u4e0a\u5206\u914d\u5185\u5b58\u3002</li> <li><code>cuda.memcpy_htod()</code> \u548c <code>cuda.memcpy_dtoh()</code> \u5206\u522b\u7528\u4e8e\u5c06\u6570\u636e\u4ece\u4e3b\u673a\u62f7\u8d1d\u5230\u8bbe\u5907\u548c\u4ece\u8bbe\u5907\u62f7\u8d1d\u56de\u4e3b\u673a\u3002</li> <li><code>mod.get_function()</code> \u83b7\u53d6\u7f16\u8bd1\u540e\u7684\u6838\u51fd\u6570\u3002</li> <li><code>block</code> \u548c <code>grid</code> \u53c2\u6570\u7528\u4e8e\u914d\u7f6e\u7ebf\u7a0b\u5757\u548c\u7f51\u683c\u7684\u5927\u5c0f\u3002</li> </ol>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CUDA%E7%BC%96%E7%A8%8B/python%20cuda/#_3","title":"\u603b\u7ed3","text":"<ul> <li><code>Numba</code> \u63d0\u4f9b\u4e86\u66f4\u9ad8\u7ea7\u7684\u62bd\u8c61\uff0c\u9002\u5408\u5feb\u901f\u5f00\u53d1\u548c\u539f\u578b\u8bbe\u8ba1\u3002</li> <li><code>PyCUDA</code> \u63d0\u4f9b\u4e86\u66f4\u5e95\u5c42\u7684\u63a7\u5236\uff0c\u9002\u5408\u9700\u8981\u7cbe\u7ec6\u8c03\u4f18\u7684\u573a\u666f\u3002</li> </ul> <p>\u901a\u8fc7\u8fd9\u4e24\u4e2a\u4f8b\u5b50\uff0c\u4f60\u53ef\u4ee5\u521d\u6b65\u4e86\u89e3\u5982\u4f55\u5728 Python \u4e2d\u4f7f\u7528 CUDA \u8fdb\u884c\u5e76\u884c\u8ba1\u7b97\u3002\u6839\u636e\u4f60\u7684\u9700\u6c42\u9009\u62e9\u5408\u9002\u7684\u5e93\u548c\u5de5\u5177\uff0c\u53ef\u4ee5\u5927\u5927\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/pytorch/chapter1/","title":"overview","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/pytorch/chapter1/#_1","title":"\u7ebf\u6027\u6a21\u578b","text":"<p> \u8bad\u7ec3\u96c6\u4e00\u90e8\u5206\u7528\u6765\u8bad\u7ec3\uff0c\u4e00\u90e8\u5206\u4f5c\u4e3a\u5f00\u53d1\u96c6</p> <p>\u5148\u7528\u7ebf\u6027\u6a21\u578b\u8fdb\u884c\u62df\u5408\uff0c\u5176\u6700\u7b80\u5355</p> <p> \u8fd9\u79cdcost\u51fd\u6570\u53eb\u505aMSE</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/pytorch/chapter1/#_2","title":"\u68af\u5ea6\u4e0b\u964d\u7b97\u6cd5","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/pytorch/chapter1/#_3","title":"\u53cd\u5411\u4f20\u64ad","text":"<p>Warning</p> <p> \u4e0d\u8981\u76f4\u63a5\uff0bl\uff0c\u56e0\u4e3al\u662f\u4e2a\u5f20\u91cf\u4f1a\u4e0d\u65ad\u6784\u5efa\u8ba1\u7b97\u56fe\u5403\u5149\u5185\u5b58\uff0c\u6240\u4ee5\u8981\u7528l.item()</p> <pre><code>import torch\nx_data = [1.0, 2.0, 3.0]\ny_data = [2.0, 4.0, 6.0]\n\nw = torch.Tensor([1.0])\nw.requires_grad = True\n\ndef forward(x):\n    return x*w\n\ndef loss(x,y):\n    y_pred = forward(x)\n    return (y_pred - y) ** 2\n\n\nprint(\"predict (before training)\",4,forward(4).item())\n\nfor epoch in range(100):\n    for x,y in zip(x_data,y_data):\n        l = loss(x,y)#forward,compute the loss\n        l.backward()#backward,compute grad for tensor whose requires_grad set to true\n        print('\\tgrad:',x,y,w.grad.item())\n        w.data = w.data - 0.01 * w.grad.data#the grad is utilized to updata weight\n\n        w.grad.data.zero_()#the grad computed by .backward() will be accunmulated.so after update,remember set the grad to zero!\n\n    print(\"progress:\",epoch,l.item())\n\nprint(\"predict(after training)\",4, forward(4).item())\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/pytorch/chapter1/#pytorch","title":"\u7528pytorch\u5b9e\u73b0\u7ebf\u6027\u56de\u5f52","text":"<p> pytorch\u5177\u6709\u5e7f\u64ad\u6027</p> <p> </p> <p></p> <pre><code>class LinearModel(torch.nn.Module):\n    def __init__(self):\n        super(LinearModel,self).__init__()\n        self.linear = torch.nn.Linear(1,1)\n\n    def forward(self,x):\n        y_pred = self.linear(x)\n        return y_pred\n\nmodel = LinearModel()\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4f7f\u7528 PyTorch \u6784\u5efa\u7684\u7ebf\u6027\u6a21\u578b\uff0c\u5e76\u4e14\u7ee7\u627f\u81ea <code>torch.nn.Module</code>\u3002\u4ee5\u4e0b\u662f\u4ee3\u7801\u7684\u8be6\u7ec6\u89e3\u91ca\uff1a 1. \u5b9a\u4e49\u4e00\u4e2a\u540d\u4e3a <code>LinearModel</code> \u7684\u7c7b\uff0c\u5b83\u7ee7\u627f\u81ea <code>torch.nn.Module</code>\uff1a python class LinearModel(torch.nn.Module): \u901a\u8fc7\u7ee7\u627f <code>torch.nn.Module</code>\uff0c<code>LinearModel</code> \u7c7b\u53ef\u4ee5\u8bbf\u95ee PyTorch \u63d0\u4f9b\u7684\u6a21\u5757\u5316\u548c\u529f\u80fd\uff0c\u4f8b\u5982\u81ea\u52a8\u6c42\u5bfc\u3002 2. \u521d\u59cb\u5316\u65b9\u6cd5 <code>__init__</code>\uff1a <pre><code>def __init__(self):\n    super(LinearModel,self).__init__()\n    self.linear = torch.nn.Linear(1,1)\n</code></pre> <code>__init__</code> \u662f\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u7528\u4e8e\u521d\u59cb\u5316\u5bf9\u8c61\u3002\u4ee5\u4e0b\u662f <code>__init__</code> \u65b9\u6cd5\u4e2d\u7684\u64cd\u4f5c\uff1a - \u8c03\u7528\u7236\u7c7b <code>torch.nn.Module</code> \u7684 <code>__init__</code> \u65b9\u6cd5\uff1a   python   super(LinearModel,self).init()</p> <p>\u8fd9\u4e00\u6b65\u662f\u5fc5\u987b\u7684\uff0c\u4ee5\u786e\u4fdd\u7236\u7c7b\u7684\u6784\u9020\u51fd\u6570\u88ab\u6b63\u786e\u8c03\u7528\uff0c\u4ece\u800c\u521d\u59cb\u5316\u7236\u7c7b\u4e2d\u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 - \u521b\u5efa\u4e00\u4e2a\u7ebf\u6027\u5c42\u5e76\u5c06\u5176\u8d4b\u503c\u7ed9\u5b9e\u4f8b\u53d8\u91cf <code>self.linear</code>\uff1a   python   <code>self.linear = torch.nn.Linear(1,1)</code></p> <p><code>torch.nn.Linear</code> \u662f PyTorch \u4e2d\u5b9a\u4e49\u7684\u5168\u8fde\u63a5\u5c42\uff08\u4e5f\u79f0\u4e3a\u7ebf\u6027\u5c42\uff09\u3002\u8fd9\u91cc\u7684\u53c2\u6570 <code>1, 1</code> \u5206\u522b\u8868\u793a\u8f93\u5165\u7279\u5f81\u7684\u6570\u91cf\u548c\u8f93\u51fa\u7279\u5f81\u7684\u6570\u91cf\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6a21\u578b\u63a5\u6536\u4e00\u4e2a\u7279\u5f81\u4f5c\u4e3a\u8f93\u5165\uff0c\u5e76\u8f93\u51fa\u4e00\u4e2a\u7279\u5f81\u4f5c\u4e3a\u9884\u6d4b\u7ed3\u679c\u3002 3. \u5b9a\u4e49\u524d\u5411\u4f20\u64ad\u65b9\u6cd5 <code>forward</code>\uff1a <pre><code>def forward(self,x):\n    y_pred = self.linear(x)\n    return y_pred\n</code></pre> <code>forward</code> \u65b9\u6cd5\u5b9a\u4e49\u4e86\u6570\u636e\u5982\u4f55\u901a\u8fc7\u7f51\u7edc\u6d41\u52a8\uff0c\u5373\u524d\u5411\u4f20\u64ad\u8fc7\u7a0b\u3002\u4ee5\u4e0b\u662f <code>forward</code> \u65b9\u6cd5\u4e2d\u7684\u64cd\u4f5c\uff1a - \u4f7f\u7528 <code>self.linear</code> \u5c42\u5904\u7406\u8f93\u5165 <code>x</code>\uff0c\u5f97\u5230\u9884\u6d4b\u503c <code>y_pred</code>\uff1a   python   y_pred = self.linear(x)</p> <p>\u8fd9\u4e00\u6b65\u8c03\u7528\u4e86\u4e4b\u524d\u5b9a\u4e49\u7684\u5168\u8fde\u63a5\u5c42\uff0c\u5c06\u8f93\u5165 <code>x</code> \u901a\u8fc7\u7ebf\u6027\u53d8\u6362\u5f97\u5230\u9884\u6d4b\u503c <code>y_pred</code>\u3002 - \u8fd4\u56de\u9884\u6d4b\u503c <code>y_pred</code>\uff1a   python   <code>return y_pred</code></p> <p>\u8fd9\u4e00\u6b65\u5c06\u9884\u6d4b\u503c\u8fd4\u56de\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u5728\u6a21\u578b\u8bad\u7ec3\u6216\u63a8\u7406\u65f6\u4f7f\u7528\u3002 4. \u521b\u5efa <code>LinearModel</code> \u7684\u5b9e\u4f8b\uff1a python <code>model = LinearModel()</code> \u8fd9\u4e00\u884c\u4ee3\u7801\u521b\u5efa\u4e86 <code>LinearModel</code> \u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u5c06\u5176\u8d4b\u503c\u7ed9\u53d8\u91cf <code>model</code>\u3002\u73b0\u5728\uff0c<code>model</code> \u5bf9\u8c61\u5177\u6709 <code>forward</code> \u65b9\u6cd5\uff0c\u53ef\u4ee5\u63a5\u6536\u8f93\u5165\u5e76\u8fd4\u56de\u9884\u6d4b\u7ed3\u679c\u3002 \u603b\u7ed3\u6765\u8bf4\uff0c\u8fd9\u6bb5\u4ee3\u7801\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u7ebf\u6027\u6a21\u578b\uff0c\u5b83\u5305\u542b\u4e00\u4e2a\u5168\u8fde\u63a5\u5c42\uff0c\u5e76\u4e14\u53ef\u4ee5\u63a5\u6536\u5355\u4e2a\u7279\u5f81\u4f5c\u4e3a\u8f93\u5165\uff0c\u901a\u8fc7\u7ebf\u6027\u53d8\u6362\u8f93\u51fa\u4e00\u4e2a\u9884\u6d4b\u503c\u3002\u8fd9\u4e2a\u6a21\u578b\u53ef\u4ee5\u7528\u4e8e\u7b80\u5355\u7684\u56de\u5f52\u4efb\u52a1\u3002</p> <p></p> <pre><code>import torch\nx_data = torch.Tensor([[1.0], [2.0], [3.0]])\ny_data = torch.Tensor([[2.0], [4.0], [6.0]])\nclass LinearModel(torch.nn.Module):\n    def __init__(self):\n        super(LinearModel, self).__init__()\n        self.linear = torch.nn.Linear(1, 1)\n    def forward(self, x):\n        y_pred = self.linear(x)\n        return y_pred\nmodel = LinearModel()\ncriterion = torch.nn.MSELoss(size_average=False)\noptimizer = torch.optim.SGD(model.parameters(), lr=0.01)\nfor epoch in range(1000):\n    y_pred = model(x_data)\n    loss = criterion(y_pred, y_data)\n    print(epoch, loss.item())\n    optimizer.zero_grad()\n    loss.backward()\n    optimizer.step()\nprint('w = ', model.linear.weight.item())\nprint('b = ', model.linear.bias.item())\nx_test = torch.Tensor([[4.0]])\ny_test = model(x_test)\nprint('y_pred = ', y_test.data)\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/pytorch/chapter1/#_4","title":"\u903b\u8f91\u65af\u8482\u56de\u5f52\u6a21\u578b","text":"<p> \u8ba1\u7b97\u4e24\u4e2a\u5206\u5e03\u7684\u5dee\u5f02\uff0cKL\u6563\u5ea6 </p> <p><pre><code>    class LinearModel(torch.nn.Module):\n        def __init__(self):\n            super(LinearModel,self).__init__()\n            self.linear = torch.nn.Linear(1,1)\n\n        def forward(self,x):\n            y_pred = self.linear(x)\n            return y_pred\n\n    model = LinearModel()\n</code></pre> ```python     import torch.nn.functional as F</p> <pre><code>class LogisticRegressionModel(torch.nn.Module):\n    def __init__(self):\n        super(LogisticRegressionModel,self).__init__()\n        self.linear = torch.nn.Linear(1,1)\n\n    def forward(self,x):\n        y_pred = `F.sigmoid(self.linear(x))`\n        return y_pred\n\nmodel = LinearModel()\n</code></pre> <p>```  \u5c31\u591a\u4e86\u4e00\u6b65</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/pytorch/chapter1/#_5","title":"\u5904\u7406\u591a\u7ef4\u7279\u5f81\u7684\u8f93\u5165","text":"<p> \u77e9\u9635\u8fd0\u7b97\u7684\u610f\u4e49\u662f\u63d0\u4f9b\u4e86\u5e76\u884c\uff0c\u4e0d\u7528\u518d\u5199for\u5faa\u73af\u4e86</p> <p></p> <p> x\u5199\u5230\u5e95</p> <p></p> <p> \u5148\u9884\u6d4b\uff0c\u518d\u8ba1\u7b97\u5f97\u5230loss\uff0c\u518d\u7528\u56de\u6eafbackward\u51fd\u6570\u627e\u5230\u68af\u5ea6\uff0c\u7136\u540e\u51cf\u53bb\u5b66\u4e60\u7387\u4e58\u68af\u5ea6\u8fdb\u884c\u66f4\u65b0</p> <p>Tip</p> <p> \u5f88\u591a\u6fc0\u6d3b\u51fd\u6570\uff0c\u4e0d\u53ea\u662fsigma\uff0c\u5efa\u8bae\u90fd\u53bb\u8bd5\u8bd5 </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/pytorch/chapter1/#_6","title":"\u52a0\u8f7d\u6570\u636e\u96c6","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/ADS/","title":"\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790","text":"<p>\u53c2\u8003\u4e24\u4e2a\u7b14\u8bb0\uff0c\u90fd\u633a\u8be6\u7ec6\u633a\u597d\u7684 RoderickShao's Notebook \u6216\u8005 \u4fee\u4f6c\u7684\u7b14\u8bb0</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/Introduction/","title":"Introduction","text":"<p>\u8ba1\u7b97\u673a\u4e13\u4e1a\u8bfe\u8fd8\u662f\u5f88\u6709\u6280\u672f\u58c1\u5792\u7684\uff0c\u6bcf\u95e8\u8bfe\u4e92\u6709\u8054\u7cfb\uff0c\u5404\u6210\u4f53\u7cfb\uff0c\u7b14\u8005\u4ecd\u5728\u4e0d\u65ad\u5b8c\u5584\u4e2d\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/","title":"\u6570\u5b57\u903b\u8f91\u8bbe\u8ba1","text":"<p>\u6211\u5728\u5b66\u4e60\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e3b\u8981\u53c2\u8003\u4fee\u4f6c\u7684\u7b14\u8bb0</p> <p>\u5b9e\u9a8c\u53c2\u8003\u8fd9\u91cc</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/","title":"\u6570\u636e\u7ed3\u6784\u57fa\u7840","text":"<p>\u666e\u901a\u57fa\u7840\u7684\u4e00\u95e8\u8bfe\uff0c\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u8ba4\u771f\u5c31\u884c\uff0c\u5347\u7ea7\u7248ADS\u624d\u9178\u723d</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/","title":"\u8ba1\u7b97\u673a\u7ec4\u6210","text":"<p>\u8bfe\u7a0b\u5185\u5bb9\u53c2\u8003RoderickShao's Notebook</p> <p>\u5b9e\u9a8c\u53c2\u8003\u8fd9\u4e2a</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/oop/Introduction/","title":"\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1","text":"A <p>\u5173\u4e8eC++\u7684\u5b66\u4e60\uff0c\u4f7f\u7528c++\u83dc\u9e1f\u6559\u7a0b\u7f51\u7ad9\uff0cclick here</p> <p>\u6211\u4eec\u5148\u4ece\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5f00\u59cb <pre><code>#include&lt;iostream&gt;\nusing namespace std;\n\nstring str1 = \"foo\";//\u8d4b\u503c\u521d\u59cb\u5316\nstring str4(\"hello,china\");//\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\nstring str5(str3);//\u540c\u6837\u662f\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\nstring str6(str3,7,5);//\u4ece\u7b2c\u4e03\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u521d\u59cb\u5316\u4e94\u4e2a\u5b57\u7b26\n\nstring str7 = str3.substr(7,5);\n\nstring str8 = str4;\nstr8.replace(7,5,\"zjg\");//\u66ff\u6362\u4ece\u7b2c\u4e03\u4e2a\u5f00\u59cb\u7684\u4e94\u4e2a\u5b57\u7b26\"china\"\u4e3a\"zjg\"\n\nstring str8.assign(10,\"A\");\ncout &lt;&lt; \"str8=\" &lt;&lt; str9 &lt;&lt; endl;//str8=AAAAAAAAAA\nstring str_find=\"hanghzuo\";\ncout&lt;&lt; str9.find(str_find) &lt;&lt; endl;\nstr9.replace(str.find(str_find),str_find.length(),\"shanghai\");//find the index and then replace\n</code></pre></p> <p>\u5173\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f <pre><code>int main(){\n    string s = \"Hello,Student@zju!\"\n    regex re(\"a|e|i|o|u\");\n    string s1 = regex_replace(s,re,\"*\");\n}\n</code></pre></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/oop/chapter1/","title":"chapter1","text":"<pre><code>#include&lt;iostream&gt;\n\nint min_element(int arr[],int begin,int end){\n    int min_idx = begin;\n    for(int j = begin+1;i&lt;end;i++){\n        if(arr[i]&lt;arr[min_idx]) min_idx=i;\n    }\n    return min_idx;\n}\n\nvoid swap(int &amp;a,int &amp;b){//\u5f15\u7528&amp;\n    int tmp = a;\n    a = b;\n    b = tmp;\n}\n\nvoid selection_sort(int arr[],int n){\n    for(int i=0;i&lt;n-1;i++){\n        int min_idx = 1;\n        for(int j= i+1;j&lt;n;j++){\n            if(arr[j]&lt;arr[min_idx]) min_idx = j;\n        }\n        if(min_idx!=1){\n            /*int tmp = arr[min_idx];\n            arr[min_idx] = arr[i];\n            arr[i] = tmp;*/\n            swap(arr[min_idx])\n        }\n    }\n}\n\nvoid print_array(int arr[],int n){\n    for(int i = 0;i&lt;n;i++){\n        std::cout&lt;&lt; arr[i] &lt;&lt;' ';\n\n    }\n    std::cout&lt;&lt;std::end;\n}\n\nint main(){\n    int arr[] = {64,25,12,23,11};\n    int n = sizeof(arr)/sizeof(arr[0]);\n\n    selection_sort(arr,n);\n    print_array(arr,n);\n}\n</code></pre> <p>\u70e6\u607c\u7684\u4e1c\u897f</p> <p>\u5982\u679c\u8981\u628aint\u6539\u6210double,\u90a3\u4e48\u5fc5\u987b\u8981\u628a\u76f8\u5e94\u7684\u51fd\u6570copy\u7136\u540e\u518d\u6539\u53c2\u6570int\u4e3adouble\uff0c\u5f88\u70e6\u800c\u4e14\u5f88\u5bb9\u6613\u51fa\u9519\uff0c\u6240\u4ee5C\u8bed\u8a00\u51fa\u73b0\u4e86\u4e0d\u65b9\u4fbf\u7684\u5730\u65b9</p> <p>\u6539\u8fdb <pre><code>template&lt;typename T&gt;//\u51fd\u6570\u6a21\u7248\nvoid swap(T &amp; a, T &amp; b){\n    //same\n}//\u8fd9\u6837\u5c31\u89e3\u51b3\u4e86hhh,\u7528\u51fd\u6570\u6a21\u7248\uff0c\u4f46\u662f\u8981\u6ce8\u610f\uff0c\u6bcf\u4e2a\u51fd\u6570\u524d\u7684\u51fd\u6570\u6a21\u7248\u90fd\u8981\u5199\uff01\n</code></pre></p> <pre><code>struct Student{\n    int id;\n    std::string name;\n\n    bool operator&lt;(const Student&amp; s){\n        return id &lt; s.id;\n    }\n}\n\nbool operator&lt;(const Student&amp; s1,const Student&amp; s2){\n    return s1.id&lt;s2.id;\n}\n\nstd::ostream&amp; operator&lt;&lt;(std::ostream &amp; out,const Student&amp; s){\n    out &lt;&lt; \"(\" &lt;&lt;s.id&lt;&lt;\",\"&lt;&lt;s.name&lt;&lt;\")\";\n}\n\nint main(){\n    Student arr[] = \n}\n</code></pre> <p>class\u5c31\u662f\u6765\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684 <pre><code>//inheritance class Rectangle:public Shape\nclass Rectangle{\nprivate:\n    double w,h;\n    double area,perimeter;\npublic:\n    Rectangle(double w,double h): w(w),h(h) {}\n    void calc_area(){\n        area = w * h;\n    }\n    void\n};\n\n//class Circle:public Shape\nclass Circle{\nprivate:\n    double r;\npublic:\n    Circle(double r):r(r){}\n    void cal_area(){\n        area = PI * r *r;\n    }\n    void cal_perimeter(){\n        perimeter = 2* PI *r;\n    }\n};\n\nclass Triangle{\nprivate:\n    double a,b,c;\n\npublic:\n    Triangle(double a,double b,double c): a(a),b(b),c(c){}\n    void calc_area(){\n        double s (a+b+c)/2;\n        area = (s*(s-a)*(s-b)*(s-c));\n    }\n};\n\nint main(){\n    Rectangle arr[]={Rectangle(2,3),Rectangle(5,5)};\n    Circle arr2[]={Circle(3)};\n    Triangle arr3[] = {Triangle(2,5,4)};\n    int n = sizeof(arr)/sizeof(arr[0]);\n\n    for (auto &amp;r:arr)\n}\n</code></pre></p> <p>\u5171\u6027\u62bd\u51fa\u6765\uff0c\u65b0\u5efaclass shape <pre><code>class Shape\n</code></pre></p> <p>Warning</p> <p>\u4e0d\u53ef\u5199\u6210 <pre><code>Shape arr[] = {Rectangle(2,3),Rectangle(5,5),Circle(3),Triangle(2,5,4)};\n</code></pre></p> <pre><code>Shape* arr[] = {new Rectangle(2,3),new Rectangle(5,5),new Circle(3),new Triangle(2,5,4)};\n\nint main(){\n    for(  )\n}\n</code></pre> <p>\u5173\u4e8e\u591a\u6001 <pre><code>class Shape{\nprotected:\n    double\n}\n</code></pre></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/oop/chapter1/#stl","title":"STL","text":"<p>what is STL</p> <p>standard</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/oop/chapter1/#container","title":"container","text":"<ul> <li>sequential   array(static),vector(dynamic)   deque(double-ended queue)   forward</li> <li>associative   set   map   multiset,multimap</li> <li>unordered associative   hashed by keys   unordered_set,unordered_map</li> <li>adaptors   stack,</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/oop/chapter1/#using-the-vector","title":"using the vector","text":"<pre><code>#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nint main(){\n    vector&lt;int&gt; evens{2,4,6,8};\n    evens.push_back(20);\n    evens.push_back(22);\n    evens.insert(evens.begin()+4,5,10);\n\n    for(int i = 0;i&lt;evens.size();++i)\n        cout &lt;&lt; evens[i] &lt;&lt; ' ';\n    cout &lt;&lt; endl;\n\n    for(vector&lt;int&gt;::iterator it = evens.begin();it&lt;evens.end();it++)//if list,we can't use &lt; iterator,we can use != iterator\n        cout &lt;&lt; *it &lt;&lt; ' ';\n    cout &lt;&lt; endl;\n\n    for(int e:evens)//\u8fed\u4ee3\u5668\u7684\u4f5c\u7528\n        cout&lt;&lt; e &lt;&lt; ' ';\n}\n</code></pre>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/oop/chapter1/#using-the-list","title":"using the list","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/oop/chapter1/#using-the-map","title":"using the map","text":"<ul> <li>collection of key-value pairs</li> <li>lookup by key, and retrieve a value</li> </ul> <pre><code>#include&lt;iostream&gt;\n#include&lt;map&gt;\n#include&lt;string&gt;\nusing namespace std;\n\nitn main(){\n    map&lt;string,int&gt; price;\n    price[\"apple\"] = 3;\n    price[\"orange\"] = 5;\n    price[\"banana\"] = 1;\n\n    for(const auto&amp; pair: price)\n    cout&lt;&lt;\"{\"&lt;&lt;pair.first&lt;&lt;\":\"&lt;&lt;pair.second&lt;&lt;\"}\";//\u76f4\u63a5\u7528pair\u4ee3\u66ff\n\n    string item;\n    int total = 0;\n    while(cin&gt;&gt; item){\n        total += price[item];\n    }\n    for(const auto&amp;)\n}\n</code></pre> <pre><code>int main(){\n    map&lt;string,int&gt; word_map;\n    for(const auto&amp; w:{\"we\",\"are\",\"not\",\"humans\",\"we\",\"are\",\"robots\",\"!!\"})\n        ++word_map[w];\n    for(const auto&amp; [word,count] : word_map)\n        cout&lt;&lt;count&lt;&lt;\"occurrences of word\"&lt;&lt;word&lt;&lt;endl;\n}\n</code></pre> <pre><code>bool is_balanced(const string &amp;s){\n    stack&lt;char&gt; st;\n    for(char c:s){\n        if(c=='('||c=='{'c=='['){\n            st.push(c);\n        }\n        else if(c==')'||c=='}'||c==']'){\n            if (st.empty())\n                return false;\n            char top= st.top();\n            st.pop();\n            if((c==')'&amp;&amp;top !='(')||(c==']'&amp;&amp;top!='[')||(c=='}'&amp;&amp;top!='{')\n                return false;\n        }\n    }\n}\n\nint main(){\n    string test1 = \"a(b{c[d]e}f)g\";\n    string test2 = \"x(y{z[]})\";\n\n    cout &lt;&lt; \"test 1: \"&lt;&lt;(is_balanced(test1))?\"Balaced\":\"Unbalanced\"&lt;&lt;endl;\n    cout &lt;&lt; \"test 2: \"&lt;&lt;(is_balanced(test2))?\"Balaced\":\"Unbalanced\"&lt;&lt;endl;\n}\n</code></pre> <pre><code>class Stack\n{\npublic:\n    virtual int &amp; top()=0;\n    virtual bool empty() const = 0;\n    virtual size_t size() const = 0;\n    virtual void push(const T&amp; value) = 0;\n    virtual void pop()=0;\n}\n\ntemplate&lt;typename T&gt;//template&lt;typename T,typename Container = std::deque&lt;T&gt;&gt;\nclass c_stack : public Stack&lt;T&gt;\n{\npublic:\n    T&amp; top() override{return c.back();}\n    bool empty() const override{return c.empty();}\n    size_t size() const override{return c.size();}\n    void push(const T&amp;value) override{c.push_back(value);}\n    virtual void pop() override{c.pop_back();}\n}\n</code></pre>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/oop/chapter1/#algorithms","title":"Algorithms","text":"<ul> <li>works on a range defined as[first,last).</li> <li>for_each,find,\u00b7\u00b7\u00b7</li> </ul> <pre><code>int main(){\n    vector&lt;int&gt; v = {1,2,3,5};\n    vector&lt;int&gt; u;\n\n    reverse(v.begin(),v.end());\n    copy(v.begin(),v.end(),back_inserter(u));\n    copy(u.begin(),u.end(),ostream_iterator&lt;int&gt;(cout,\", \"));\n\n    list&lt;int&gt; l;\n    copy(v.begin(),v.end(),front_inserter(l));\n    copy(l.begin(),l.end(),ostream_iterator&lt;int&gt;(cout,\", \"));\n}\n</code></pre>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/Introduction/","title":"chapter1:Introduction","text":"<p>\u5173\u4e8e\u8fd9\u95e8\u8bfe\u7684\u5b9e\u9a8c\u76f8\u5173\u7f51\u7ad9\uff0cclick here</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/Introduction/#11-database-system","title":"1.1 Database System","text":"<ol> <li>concurrent \u5e76\u53d1</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/Introduction/#12-database-applications","title":"1.2 Database Applications","text":"<p>  two examples:  </p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/Introduction/#13-purpose-of-database-system","title":"1.3 Purpose of database system","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/Introduction/#14-characteristics-of-database","title":"1.4 characteristics of database","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/Introduction/#15-view-of-data","title":"1.5 view of data","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/Introduction/#16-schema-and-instance","title":"1.6 schema and instance","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/Introduction/#18-data-models","title":"1.8 data models","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/Introduction/#19-rational-model","title":"1.9 rational model","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/SQL%E8%AF%AD%E8%A8%80/","title":"SQL\u8bed\u8a00","text":"<p>\u8be6\u7ec6\u4e00\u4e9b\u7684SQL\u6559\u7a0b\u5728CSDN\u4e0a\uff0cclick here \u6216\u8005\u4e0a\u83dc\u9e1f\u6559\u7a0b\u7f51\u7ad9\u5b66\u4e60SQL\u8bed\u8a00\uff0cclick here</p> <p>Tip</p> <p>CSDN\u8bb2\u7684\u8be6\u7ec6\uff0c\u5185\u5bb9\u591a\uff0c\u83dc\u9e1f\u6559\u7a0b\u66f4\u7cbe\u7b80\uff0c\u65b9\u4fbf</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/","title":"chapter 2: The Rational Model","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#1structure-of-relational-databases","title":"1.Structure of Relational Databases","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#11-concepts","title":"1.1 Concepts","text":"<p>Formally, given sets <code>D1, D2, \u2026. Dn</code> ,a <code>relation r</code> is a subset of  <code>D1 x  D2  x \u2026 x Dn</code>.Thus, a relation is a set of <code>n-tuples (a1, a2, \u2026, an)</code> where each <code>ai \u5c5e\u4e8e Di</code>. \u5c31\u662f\u8bf4\uff0crelation\u662f\u597d\u51e0\u4e2a\u5143\u7ec4tuple</p> <p>Example</p> <p></p> <p>A1, A2, \u2026, An are attributes.A1, A2, \u2026, An \u662f\u5c5e\u6027</p> <p>R = (A1, A2, \u2026, An ) is a relation schema.R = (A1, A2, \u2026, An) \u662f\u4e00\u4e2a\u5173\u7cfb\u6a21\u5f0f</p> <p>Example</p> <p><code>instructor  = (ID,  name, dept_name, salary)</code> A relation instance <code>r</code> defined over <code>schema R</code> is denoted  by <code>r (R)</code>.The current values a relation are specified by a table.An <code>element t</code> of relation <code>r</code> is called a  tuple and is represented by a row in a table</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#12-attributes","title":"1.2  attributes","text":"<ul> <li>The <code>set of allowed values</code> for each attribute is called the <code>domain\uff08\u57df\uff09</code> of the attribute</li> <li>Attribute values are (normally) required to be <code>atomic\uff08\u539f\u5b50\u7684</code>\uff09; that is, indivisible  (attribute values\u4e0d\u53ef\u518d\u5206\uff0c\u5982\u8bf8\u845b\u4eae\uff0c\u5f20\u98de\uff0c\u4e0d\u8981\u518d\u62c6\u6210\u59d3\u548c\u540d)</li> <li>The special value null \uff08\u7a7a\u503c\uff09 is a member of every domain(\u4efb\u4f55\u4e00\u4e2a\u503c\u57df\u91cc\u9762\u90fd\u6709\u4e00\u4e2anull\u503c)</li> <li>The null value causes complications in the definition of many operations</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#13-relations-are-unordered","title":"1.3 relations are unordered","text":"<p>Order of tuples is irrelevant (tuples may be stored in an arbitrary order)</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#2-database-schema","title":"2 Database schema","text":"<ul> <li>Database schema -- is the logical structure of the database.</li> <li>Database instance -- is a snapshot of the data in the database at a given instant in time.\u6570\u636e\u5e93\u5b9e\u4f8b\uff1a\u67d0\u4e2a\u65f6\u95f4\u70b9\u6570\u636e\u5e93\u7684\u5feb\u7167</li> </ul> Example"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#3-keys","title":"3 Keys","text":"<ul> <li>K is a superkey (\u8d85\u952e) of R if values for K are sufficient to identify (\u552f\u4e00\u786e\u5b9a) unique tuple of each possible relation r(R).  e.g. {ID} or {ID, name}</li> <li>Superkey K is a candidate key (\u5019\u9009\u952e) if K is minimal. \u5373 K \u4e2d\u6ca1\u6709\u5197\u4f59\u5c5e\u6027.\u5019\u9009\u952e\u662f\u8d85\u952e\u4e2d\u6700\u5c0f\u7684\u96c6\u5408\uff0c\u5b83\u7684\u4efb\u4f55\u4e00\u4e2a\u771f\u5b50\u96c6\u4e0d\u53ef\u786e\u5b9a\u552f\u4e00\u4e00\u4e2a\u5143\u7ec4</li> <li>One of the candidate keys is selected to be the primary key (\u4e3b\u952e).</li> <li>Foreign key (\u5916\u952e) Relation r1 may include among its attributes the primary key of another relation r2. This attribute is called a foreign key from r1, referencing r2. \u7c7b\u4f3c\u4e8e\u6307\u9488\uff0c\u5916\u952e\u9650\u5236\u5c31\u662f\u5173\u7cfb r1 \u5f15\u7528\u7684\u4e3b\u952e\u5fc5\u987b\u5728\u5173\u7cfb r2 \u4e2d\u51fa\u73b0\u3002</li> <li>Referential integrity(\u53c2\u7167\u5b8c\u6574\u6027) constraint  requires that  the values appearing in specified attribute(s) A of any tuples in the referencing relation r1 also appear in specified attribute(s) B of at least one tuple in the referenced relation r2.\u7c7b\u4f3c\u4e8e\u5916\u952e\u9650\u5236\uff0c\u4f46\u4e0d\u5c40\u9650\u4e8e\u4e3b\u952e.</li> </ul> \u5916\u952e \u53c2\u7167\u5b8c\u6574\u6027"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#4-database-and-schema-diagram","title":"4 Database and Schema diagram","text":"<p>Example</p> <p></p> <p>schema diagram</p> <p> </p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#5-rational-query-languages","title":"5 Rational Query languages","text":"<ul> <li>Procedural vs.non-procedural, or declarative</li> <li>\u201cPure\u201d languages:<ul> <li>Relational algebra(\u5173\u7cfb\u4ee3\u6570)</li> <li>Tuple relational calculus\uff08\u5143\u7ec4\u5173\u7cfb\u6f14\u7b97\uff09</li> <li>Domain relational calculus\uff08\u57df\u5173\u7cfb\u6f14\u7b97\uff09</li> </ul> </li> <li>The above 3 pure languages are equivalent in computing power</li> <li>We will concentrate on relational algebra<ul> <li>Not Turing-machine equivalent</li> <li>Consists of 6 basic operations</li> </ul> </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#51-select","title":"5.1 Select","text":"Select"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#52-project","title":"5.2 project\u6295\u5f71","text":"Project"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#53-union","title":"5.3 union","text":"<p>\u4f5c\u7528\u5bf9\u8c61\u662f\u5173\u7cfbrelation,\u53ef\u7528\u6765\u8fde\u63a5\u4e24\u4e2aselect</p> Union <p> </p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#54-set-difference","title":"5.4 set difference","text":"<p>\u4f5c\u7528\u5728\u4e24\u4e2arelation\uff0c\u53ef\u7528\u6765\u5bf9\u4e24\u4e2aselect\u76f8\u51cf</p> Set <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#55-cartesian-product-operation","title":"5.5 Cartesian-Product Operation","text":"Example"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#56-compositions-of-operations","title":"5.6 compositions of operations","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#57-rename-operations","title":"5.7 rename operations","text":"<p> \u5bc6\u5ea6\u7b26\u53f7\u03c1\uff01</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#58-some-query-examples","title":"5.8 Some Query Examples","text":"Example1 Example2 Example3 <p>  \u53ea\u8981\u5b58\u5728\u6bd4\u4f60\u7684\u5de5\u8d44\u9ad8\u7684\u4eba\uff0c\u4f60\u7684\u5de5\u8d44\u5c31\u88ab\u6311\u51fa\u6765\uff0c\u7136\u540e\u6240\u6709\u5de5\u8d44\u51cf\u53bb\u6240\u6709\u4f60\u4eec\u7684\u5de5\u8d44\u5c31\u662f\u6700\u9ad8\u5de5\u8d44\uff0c\u4e5f\u5c31\u662f\u4e0d\u4f1a\u88ab\u6311\u51fa\u6765\u7684\u5de5\u8d44</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#59-formal-definition","title":"5.9 Formal Definition","text":"<p> \u8fd9\u4e9b\u90fd\u662f\u5173\u7cfb\u4ee3\u6570\u8868\u8fbe\u5f0f</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#510-additional-operands","title":"5.10 Additional operands","text":"<p>Note</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#5101-set-intersection","title":"5.10.1 Set intersection","text":"Example"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#5102-natural-join-operation","title":"5.10.2 Natural-Join operation","text":"Example <ul> <li>theta join</li> </ul> <p>Tip</p> <p> \u4e00\u4e9b\u6027\u8d28\uff0c\u4ea4\u6362\u5f8b\u3001\u7ed3\u5408\u5f8b\uff0c\u548ctheta join\u7684\u7b26\u53f7\u8868\u793a</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#5103-outer-join","title":"5.10.3 Outer Join","text":"<p>  \u7b2c\u4e00\u4e2a\u516c\u5f0f\u914d\u7740\u4e0b\u9762\u7684example\u6bd4\u8f83\u597d\u7406\u89e3\uff0cr\u51cf\u53bb((R)\u548c(rs\u7684natural set)\u7684\u4ea4),\u4e5f\u5c31\u662f\u5de6\u8fb9\u7684\u5217\u90fd\u5b58\u5728\uff0c\u53f3\u8fb9\u7684\u5217\u5185\u5bb9\u5168\u90e8\u7528null\u8865\u4e0a\u3002\u7b2c\u4e8c\u4e2a\u5de5\u5f0f\u540c\u7406\u3002\u7b2c\u4e09\u4e2a\u540c\u540c\u7406\u3002</p> Examples <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#5104-semijoin","title":"5.10.4 semijoin","text":"<p> \u7b80\u5355\u6765\u8bf4\uff0c\u4e0a\u5f0f\u5c31\u662f\u4fdd\u7559r\u4e2d\u80fd\u4e0es\u76f8\u8fde\u7684\u5143\u7ec4</p> Example <p> r.B=s.B,\u4f46\u6700\u7ec8\u8981\u4fdd\u8bc1B\u548cD\u90fd\u76f8\u7b49\uff1f\u4e3a\u4ec0\u4e48\u5462\uff1f</p> <ul> <li>Semijoin\uff08\u534a\u8fde\u63a5\uff09 Operation and Nested Query </li> </ul> <p>Tip</p> <p> </p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#5105-division-operation","title":"5.10.5 Division Operation","text":"Example"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#511-aggregate-functions-and-operations","title":"5.11  Aggregate Functions and Operations","text":"<p>Tip</p> <p> </p> <p></p> <p>G1,G2\u7b49\u7b49\u662f\u7528\u6765\u5206\u7ec4\u7528\u7684</p> Example <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#6-multiset-relational-algebra","title":"6 Multiset Relational Algebra","text":"<p>\u8fd9\u5f20\u56fe\u7247\u7684\u6838\u5fc3\u5185\u5bb9\u662f\u5173\u4e8e\u7eaf\u5173\u7cfb\u4ee3\u6570\u548c\u591a\u96c6\u5408\uff08\u591a\u91cd\u96c6\uff09\u5173\u7cfb\u4ee3\u6570\u7684\u533a\u522b\u548c\u5b9a\u4e49\u3002\u5177\u4f53\u5185\u5bb9\u5305\u62ec\uff1a 1. \u7eaf\u5173\u7cfb\u4ee3\u6570\uff1a\u79fb\u9664\u6240\u6709\u91cd\u590d\u9879\uff0c\u4f8b\u5982\u5728\u6295\u5f71\u4e4b\u540e\u3002 2. \u591a\u96c6\u5408\uff08\u591a\u91cd\u96c6\uff09\u5173\u7cfb\u4ee3\u6570\uff1a\u4fdd\u7559\u91cd\u590d\u9879\u4ee5\u5339\u914dSQL\u8bed\u4e49\u3002    - SQL\u6700\u521d\u4fdd\u7559\u91cd\u590d\u9879\u662f\u4e3a\u4e86\u6548\u7387\u8003\u8651\uff0c\u4f46\u73b0\u5728\u8fd9\u662f\u4e00\u4e2a\u7279\u6027\u3002 3. \u591a\u96c6\u5408\u5173\u7cfb\u4ee3\u6570\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a    - \u9009\u62e9\uff08selection\uff09\uff1a\u5982\u679c\u5143\u7ec4\u6ee1\u8db3\u9009\u62e9\u6761\u4ef6\uff0c\u5219\u4fdd\u7559\u4e0e\u8f93\u5165\u4e2d\u76f8\u540c\u6570\u91cf\u7684\u91cd\u590d\u5143\u7ec4\u3002    - \u6295\u5f71\uff08projection\uff09\uff1a\u6bcf\u4e2a\u8f93\u5165\u5143\u7ec4\u4ea7\u751f\u4e00\u4e2a\u8f93\u51fa\u5143\u7ec4\uff0c\u5373\u4f7f\u5b83\u662f\u91cd\u590d\u7684\u3002    - \u7b1b\u5361\u5c14\u79ef\uff08cross product\uff09\uff1a\u5982\u679c\u5728\u5173\u7cfbr\u4e2d\u6709m\u4e2at1\u7684\u526f\u672c\uff0c\u5728\u5173\u7cfbs\u4e2d\u6709n\u4e2at2\u7684\u526f\u672c\uff0c\u5219\u5728r \u00d7 s\u4e2d\u6709m \u00d7 n\u4e2at1.t2\u7684\u526f\u672c\u3002 4. \u96c6\u5408\u8fd0\u7b97\u7b26\uff1a    - \u5e76\u96c6\uff08union\uff09\uff1am + n\u4e2a\u526f\u672c\u3002    - \u4ea4\u96c6\uff08intersection\uff09\uff1amin(m, n)\u4e2a\u526f\u672c\u3002    - \u5dee\u96c6\uff08difference\uff09\uff1amin(0, m - n)\u4e2a\u526f\u672c\u3002 \u8fd9\u4e9b\u6982\u5ff5\u5e2e\u52a9\u7406\u89e3\u5982\u4f55\u5728\u4e0d\u540c\u7684\u5173\u7cfb\u4ee3\u6570\u7cfb\u7edf\u4e2d\u5904\u7406\u548c\u5904\u7406\u6570\u636e\uff0c\u7279\u522b\u662f\u5728\u6d89\u53ca\u5230\u91cd\u590d\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u3002</p> <p>\u8bb2\u4eba\u8bdd</p> <p>\u5173\u7cfb\u4ee3\u6570\u4e2d\uff0c\u6211\u4eec\u8981\u6c42\u5173\u7cfb\u8981\u662f\u4e00\u4e2a\u4e25\u683c\u7684\u96c6\u5408\u3002\u4f46\u5b9e\u9645\u6570\u636e\u5e93\u4e2d\u5e76\u4e0d\u662f\uff0c\u800c\u662f\u4e00\u4e2a\u591a\u91cd\u96c6\uff0c\u5141\u8bb8\u6709\u91cd\u590d\u5143\u7d20\u5b58\u5728\u3002\u56e0\u4e3a\u4e00\u4e9b\u64cd\u4f5c\u7684\u4e2d\u95f4\u7ed3\u679c\u4f1a\u5e26\u6765\u91cd\u590d\u5143\u7d20\uff0c\u8981\u4fdd\u6301\u96c6\u5408\u7279\u6027\u5f00\u9500\u5f88\u5927\uff0c\u56e0\u6b64\u5b9e\u9645\u64cd\u4f5c\u4e2d\u4e0d\u4f1a\u53bb\u91cd\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter2/#7-sql-and-relational-algebra","title":"7 SQL and Relational Algebra","text":"<p>\u8bf4\u4eba\u8bdd</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/","title":"chapter3: introduction to SQL","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#1-overview-of-the-sql-query-language","title":"1 overview of the SQL Query Language","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#2-data-definition","title":"2 Data Definition","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#21-domain-types-in-sql","title":"2.1 Domain Types in SQL","text":"<ul> <li><code>char(n).</code> Fixed length character string, with user-specified length n. \u5b9a\u957f\u5b57\u7b26\u4e32. C \u8bed\u8a00\u91cc\u5b57\u7b26\u4e32\u7ed3\u5c3e\u6709 <code>\\0</code>, \u4f46\u6570\u636e\u5e93\u91cc\u6ca1\u6709\uff0c\u957f\u5ea6\u7531\u5b9a\u4e49\u800c\u5f97\u3002</li> <li><code>varchar(n).</code> Variable length character strings, with user-specified maximum length n. \u4e0d\u5b9a\u957f\u5b57\u7b26\u4e32\u3002\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u6bd4\u8f83\u53ef\u80fd\u6709\u95ee\u9898\uff08\u6bd4\u5982\u5b9a\u957f\u548c\u4e0d\u5b9a\u957f\u7684\u5b57\u7b26\u4e32\uff09</li> <li><code>int.</code> Integer (a finite subset of the integers that is machine-dependent).</li> <li><code>smallint.</code> Small integer (a machine-dependent subset of the integer domain type).</li> <li><code>numeric(p,d).</code> Fixed point number, with user-specified precision of p digits, with d digits to the right of decimal point. p \u8868\u793a\u6709\u6548\u6570\u5b57\u4f4d\u6570, d \u8868\u793a\u5c0f\u6570\u70b9\u540e\u591a\u5c11\u4f4d\u3002 e.g. - <code>number(3,1)</code> allows 44.5 to be store exactly, but neither 444.5 or 0.32</li> <li><code>real, double precision.</code> Floating point and double-precision floating point numbers, with machine-dependent precision.</li> <li><code>float(n).</code> Floating point number, with user-specified precision of at least n digits.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#22-built-in-data-types-in-sql","title":"2.2 built-in Data Types in SQL","text":"<ul> <li><code>date:</code>Dates, containing a (4 digit) year, month and date e.g. <code>date \u20182005-7-27\u2019</code></li> <li><code>time:</code> Time of day, in hours, minutes and seconds. e.g. time \u201809:00:30\u2019 time \u201809:00:30.75\u2019</li> <li><code>timestamp:</code> date plus time of day e.g. <code>timestamp \u20182005-7-27 09:00:30.75\u2019</code></li> <li><code>interval:</code> period of time e.g.<code>interval \u20181\u2019 day</code><ul> <li>Subtracting a date/time/timestamp value from another gives an interval value.</li> <li>Interval values can be added to date/time/timestamp values</li> <li>built-in date, time functions: current_date(), current_time(), year(x), month(x), day(x), hour(x), minute(x), second(x)</li> </ul> </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#23-create-table-construct","title":"2.3 Create Table Construct","text":"Integrity Constraints in Create table <p> primary key\u4ee3\u8868\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u540c\u65f6\u8868\u5185\u4e0d\u80fd\u6709\u76f8\u540c\u7684keys\uff0c\u5426\u5219\u8fd9\u6837\u7684\u6570\u636e\u662f\u63d2\u4e0d\u8fdb\u53bb\u7684 foreign key\u4ee3\u8868\u5f15\u7528\u5bf9\u5e94\u8868\u7684\u4e3b\u952e</p> another example <p> - \u5f53\u524d\u60c5\u51b5\u4e0b\uff0c\u5b66\u751fA\uff08ID=12345\uff09\u53ef\u4ee5\u57282023\u5e74\u79cb\u5b63\u5b66\u671f\uff08semester='Fall', year=2023\uff09\u6ce8\u518c\u8bfe\u7a0bCSC101\uff08course_id='CSC101'\uff09\u7684\u4e24\u4e2a\u4e0d\u540c\u90e8\u5206\uff08sec_id='001' \u548c sec_id='002'\uff09\u3002\u8fd9\u662f\u56e0\u4e3a\u4e3b\u952e\u7ec4\u5408\uff0812345, CSC101, 001, Fall, 2023\uff09\u548c\uff0812345, CSC101, 002, Fall, 2023\uff09\u88ab\u89c6\u4e3a\u4e0d\u540c\u7684\u8bb0\u5f55\uff0c\u6570\u636e\u5e93\u5141\u8bb8\u8fd9\u79cd\u64cd\u4f5c\u3002 - \u5982\u679c\u4ece\u4e3b\u952e\u4e2d\u79fb\u9664 sec_id\uff0c\u4e3b\u952e\u5c06\u53d8\u4e3a\uff0812345, CSC101, Fall, 2023\uff09\u3002\u8fd9\u6837\uff0c\u6570\u636e\u5e93\u5c06\u4e0d\u5141\u8bb8\u5b66\u751fA\u5728\u540c\u4e00\u4e2a\u5b66\u671f\u5185\u6ce8\u518c\u8bfe\u7a0bCSC101\u7684\u591a\u4e2a\u90e8\u5206\uff0c\u56e0\u4e3a\u63d2\u5165\u5177\u6709\u76f8\u540c\u4e3b\u952e\u7684\u8bb0\u5f55\u4f1a\u88ab\u62d2\u7edd\u3002\u8fd9\u79cd\u8c03\u6574\u786e\u4fdd\u4e86\u5b66\u751f\u4e0d\u4f1a\u5728\u540c\u4e00\u4e2a\u5b66\u671f\u5185\u91cd\u590d\u6ce8\u518c\u540c\u4e00\u95e8\u8bfe\u7a0b\u7684\u4e0d\u540c\u90e8\u5206\u3002</p> <p>default 0</p> <p>\u5728 SQL \u4e2d\uff0cdefault 0 \u662f\u7528\u4e8e\u5b9a\u4e49\u5217\u7684\u9ed8\u8ba4\u503c\u7684\u8bed\u6cd5\u3002\u5177\u4f53\u6765\u8bf4\uff0cdefault 0 \u8868\u793a\u5f53\u5411\u8868\u4e2d\u63d2\u5165\u65b0\u8bb0\u5f55\u65f6\uff0c\u5982\u679c\u6ca1\u6709\u4e3a\u8be5\u5217\uff08\u8fd9\u91cc\u662f tot_cred\uff09\u63d0\u4f9b\u660e\u786e\u7684\u503c\uff0c\u6570\u636e\u5e93\u5c06\u81ea\u52a8\u5c06\u8be5\u5217\u7684\u503c\u8bbe\u7f6e\u4e3a 0\u3002</p> and more <p> \u5982\u679c\u5f15\u7528\u7684\u8868\u4e2d\u6709\u6761\u76ee\u88ab\u5220\u9664\uff0c\u53ef\u80fd\u4f1a\u7834\u574f\u5b8c\u6574\u6027\u7ea6\u675f\u6761\u4ef6\u3002\u6709\u4e0b\u9762\u7684\u65b9\u6cd5\uff1a</p> <ul> <li>restrict: \u5982\u679c\u6709\u6761\u76ee\u662f\u88ab\u5f15\u7528\u7684\uff0c\u90a3\u4e48\u4e0d\u5141\u8bb8\u5220\u9664\u3002</li> <li>cascade: \u5f15\u7528\u7684\u6761\u76ee\u88ab\u5220\u4e86\u4e4b\u540e\uff0c\u5f15\u7528\u8005\u4e5f\u4e00\u5e76\u5220\u9664</li> <li>set null: \u5f15\u7528\u8005\u7684\u6307\u9488\u8bbe\u4e3a null.</li> <li> <p>set default \u5982\u679c\u5f15\u7528\u7684\u8868\u4e2d\u6709\u66f4\u65b0\uff0c\u4e5f\u6709\u7c7b\u4f3c\u4e0a\u9762\u7684\u56db\u79cd\u65b9\u6cd5\u3002 \u5728 create table \u4e2d\u5b9a\u4e49</p> </li> <li> <p>on delete cascade |set null |restrict |set default</p> </li> <li>on update cascade |set null |restrict |set default</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#24-drop-and-alter-table-constructs","title":"2.4 drop and alter table constructs","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#3-basic-query-structure","title":"3 Basic Query Structure","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#31-the-select-clause","title":"3.1 the select clause","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#32-the-where-clause","title":"3.2 the where clause","text":"<p>The <code>where</code> clause specifies conditions that the result must satisfy. Corresponds to the selection predicate of the relational algebra. - Comparison results can be combined using the logical connectives and, or, and not.Comparisons can be applied to results of arithmetic expressions.e.g.<code>select name from instructor where dept_name = \u2018Comp. Sci.'  and salary &gt; 80000</code></p> <ul> <li>SQL includes a between comparison operator e.g. <code>select name from instructor where salary between 90000 and 100000</code></li> <li>Tuple comparison \u5143\u7ec4\u76f8\u7b49\u7b49\u4ef7\u4e8e\u5404\u4e2a\u5143\u7d20\u90fd\u76f8\u7b49\u3002 e.g. <code>select name, course_id from instructor, teaches where (instructor.ID, dept_name) = (teaches.ID, \u2019Biology\u2019);</code></li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#33-the-from-clause","title":"3.3 the from clause","text":"<p>The <code>from</code> clause lists the relations involved in the query. Corresponds to the Cartesian product operation of the relational algebra.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#34-natural-join","title":"3.4 natural join","text":"<p>join</p> <p></p> <p></p> example <p></p> example of unrelated but same name causing fault <p> \u76f4\u63a5\u4e09\u4e2a\u81ea\u7136\u8fde\u63a5\u7684\u8bddinstructor.dept_nme\u548ccourse.dept_name\u4f1a\u5f3a\u5236\u76f8\u7b49\uff0c\u4f46\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u3002 \u6240\u4ee5\u4e3a\u4e86\u6539\u8fdb\u6211\u4eec\u6709\u4e09\u79cd\u7b49\u4ef7\u7684\u6539\u8fdb\u65b9\u5f0f\u3002\u7b2c\u4e00\u79cd\u662f\u5148\u628ainstructor\u548cteaches\u81ea\u7136\u8fde\u63a5\uff0c\u7ed3\u679c\u548ccourse\u53d6\u7b1b\u5361\u5c14\u79ef\u3002\u7b2c\u4e8c\u79cd\u601d\u8def\u548c\u7b2c\u4e00\u79cd\u5b8c\u5168\u4e00\u6837\uff0c\u7528\u4e86join course using(course_id)\uff0c\u5373\u53ea\u8981\u6c42course_id\u76f8\u540c\u7684\u8fde\u63a5\uff0c\u53ef\u8c13\u8033\u76ee\u4e00\u65b0\u3002\u7b2c\u4e09\u79cd\u5c31\u65e0\u8111\u5199\u6761\u4ef6\u4e86\u3002</p> \u518d\u6765\u4e00\u4e2a\u4f8b\u5b50 <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#35-the-rename-operation","title":"3.5 the rename operation","text":"<p> instructor as T &lt;==&gt; instructor T</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#36-string-operations","title":"3.6 string operations","text":"<ul> <li>\u5339\u914d\u5b57\u7b26\u4e32 <code>'100 %'</code> \u4f46\u662f <code>%</code> \u7b26\u53f7\u88ab\u6211\u4eec\u4f5c\u4e3a\u4e86\u901a\u914d\u7b26\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u7528\u5230\u8f6c\u4e49\u7b26 <code>\\</code>. <code>\\%</code> \u5373\u5c06 <code>%</code>\u4f5c\u4e3a\u6b63\u5e38\u5b57\u7b26\u5339\u914d\u3002</li> <li><code>\\</code> \u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u57fa\u672c\u7b26\u53f7\uff0c\u6211\u4eec\u9700\u8981\u5728\u540e\u9762\u5199\u51fa <code>escape</code> \u8868\u793a\u5176\u5728\u8fd9\u91cc\u4f5c\u4e3a\u8f6c\u4e49\u7b26\u3002\u7c7b\u4f3c\u5730\u6211\u4eec\u8fd8\u53ef\u4ee5\u5c06\u8f6c\u4e49\u7b26\u5b9a\u4e49\u4e3a <code>#</code>.</li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#37-ordering-the-display-of-tuples","title":"3.7 ordering the display of tuples","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#38-the-limit-clause","title":"3.8 the limit clause","text":"<p> limit 0,3 \u4ece\u7b2c0\u884c\u5f00\u59cb\uff0c\u8f93\u51fa\u4e09\u884c\uff0c\u6548\u679c\u548c\u76f4\u63a5\u8f93\u51fa\u524d\u4e09\u884c\u662f\u4e00\u6837\u6ef4</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#39-the-set-clause","title":"3.9 the set clause","text":"<ul> <li><code>union, intersect, except</code> \u662f\u4e25\u683c\u7684\u96c6\u5408\u64cd\u4f5c\uff0c\u4f1a\u5bf9\u7ed3\u679c\u53bb\u91cd.</li> <li><code>union all, intersect all and except all</code>. \u4fdd\u6301\u591a\u91cd\u96c6\u3002</li> </ul> <p>Tip</p> <p> not difficult to understand</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#310-the-null-value","title":"3.10 the null value","text":"<p>  a nice guy,\"unknown\"</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#311-aggregate-functions","title":"3.11 aggregate functions","text":"<p>Example</p> <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#3111-having-clauses","title":"3.11.1 having clauses","text":"instructor table <p> - \u8f93\u51fa\u6309\u7ec4(dept_name)\u5206\u597d\u7684,\u800c\u4e14\u53ea\u6709\u5de5\u8d44\u5927\u4e8e\u56db\u4e07\u4e8c\u7684\u5bfc\u5e08\u4fe1\u606f\uff01</p> SQL \u67e5\u8be2\u89e3\u91ca"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#_1","title":"\u67e5\u8be2\u8bed\u53e5\uff1a","text":"<pre><code>SELECT dept_name, COUNT(*) AS cnt\nFROM instructor\nWHERE salary &gt;= 100000\nGROUP BY dept_name\nHAVING COUNT(*) &gt; 10\nORDER BY cnt;\n</code></pre>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#_2","title":"\u8be6\u7ec6\u89e3\u91ca\uff1a","text":"<ol> <li> <p><code>FROM instructor</code>\uff1a    - \u67e5\u8be2\u4ece <code>instructor</code> \u8868\u4e2d\u83b7\u53d6\u6570\u636e\u3002</p> </li> <li> <p><code>WHERE salary &gt;= 100000</code>\uff1a    - \u8fc7\u6ee4\u6761\u4ef6\uff0c\u53ea\u9009\u62e9\u85aa\u6c34\u5927\u4e8e\u6216\u7b49\u4e8e 100,000 \u7684\u6559\u5e08\u3002</p> </li> <li> <p><code>GROUP BY dept_name</code>\uff1a    - \u5c06\u7ed3\u679c\u6309\u90e8\u95e8\u540d\u79f0\uff08<code>dept_name</code>\uff09\u8fdb\u884c\u5206\u7ec4\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u90e8\u95e8\u4f1a\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u884c\u3002</p> </li> <li> <p><code>COUNT(*) AS cnt</code>\uff1a    - \u5bf9\u6bcf\u4e2a\u90e8\u95e8\uff08<code>dept_name</code>\uff09\u8ba1\u7b97\u6ee1\u8db3\u6761\u4ef6\u7684\u6559\u5e08\u4eba\u6570\uff0c\u5e76\u5c06\u8fd9\u4e2a\u4eba\u6570\u547d\u540d\u4e3a <code>cnt</code>\u3002</p> </li> <li> <p><code>HAVING COUNT(*) &gt; 10</code>\uff1a    - \u8fc7\u6ee4\u5206\u7ec4\u540e\u7684\u7ed3\u679c\uff0c\u53ea\u4fdd\u7559\u90a3\u4e9b\u6559\u5e08\u4eba\u6570\uff08<code>cnt</code>\uff09\u5927\u4e8e 10 \u7684\u90e8\u95e8\u3002    - <code>HAVING</code> \u5b50\u53e5\u7528\u4e8e\u8fc7\u6ee4\u5206\u7ec4\u540e\u7684\u7ed3\u679c\uff0c\u800c <code>WHERE</code> \u5b50\u53e5\u7528\u4e8e\u8fc7\u6ee4\u5206\u7ec4\u524d\u7684\u884c\u3002</p> </li> <li> <p><code>ORDER BY cnt</code>\uff1a    - \u6309\u6559\u5e08\u4eba\u6570\uff08<code>cnt</code>\uff09\u5bf9\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f\u3002\u9ed8\u8ba4\u662f\u5347\u5e8f\u6392\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u3002</p> </li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#_3","title":"\u793a\u4f8b\uff1a","text":"<p>\u5047\u8bbe <code>instructor</code> \u8868\u4e2d\u6709\u4ee5\u4e0b\u6570\u636e\uff1a</p> ID name dept_name salary 1 Alice CS 120000 2 Bob CS 110000 3 Charlie CS 105000 4 David Math 95000 5 Eve Math 102000 6 Frank Math 98000 7 Grace Physics 130000 8 Heidi Physics 125000 9 Ivan Physics 115000 10 Judy Physics 110000 11 Kevin Physics 105000 12 Linda Physics 100000 13 Michael Physics 95000 14 Nancy Physics 90000 15 Oscar Physics 85000"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#_4","title":"\u67e5\u8be2\u6b65\u9aa4\uff1a","text":"<ol> <li> <p><code>WHERE salary &gt;= 100000</code>\uff1a    - \u8fc7\u6ee4\u51fa\u85aa\u6c34\u5927\u4e8e\u6216\u7b49\u4e8e 100,000 \u7684\u6559\u5e08\uff1a      | ID  | name     | dept_name | salary  |      |-----|----------|-----------|---------|      | 1   | Alice    | CS        | 120000  |      | 2   | Bob      | CS        | 110000  |      | 3   | Charlie  | CS        | 105000  |      | 5   | Eve      | Math      | 102000  |      | 7   | Grace    | Physics   | 130000  |      | 8   | Heidi    | Physics   | 125000  |      | 9   | Ivan     | Physics   | 115000  |      | 10  | Judy     | Physics   | 110000  |      | 11  | Kevin    | Physics   | 105000  |      | 12  | Linda    | Physics   | 100000  |</p> </li> <li> <p><code>GROUP BY dept_name</code> \u548c <code>COUNT(*) AS cnt</code>\uff1a    - \u6309\u90e8\u95e8\u5206\u7ec4\u5e76\u8ba1\u7b97\u6bcf\u4e2a\u90e8\u95e8\u7684\u6559\u5e08\u4eba\u6570\uff1a      | dept_name | cnt |      |-----------|-----|      | CS        | 3   |      | Math      | 1   |      | Physics   | 6   |</p> </li> <li> <p><code>HAVING COUNT(*) &gt; 10</code>\uff1a    - \u8fc7\u6ee4\u6389\u6559\u5e08\u4eba\u6570\u4e0d\u8d85\u8fc7 10 \u7684\u90e8\u95e8\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6240\u6709\u90e8\u95e8\u7684\u6559\u5e08\u4eba\u6570\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8e 10\uff0c\u6240\u4ee5\u7ed3\u679c\u96c6\u4e3a\u7a7a\u3002</p> </li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#_5","title":"\u603b\u7ed3\uff1a","text":"<ul> <li>\u67e5\u8be2\u7684\u76ee\u7684\u662f\u627e\u51fa\u90a3\u4e9b\u85aa\u6c34\u5927\u4e8e\u6216\u7b49\u4e8e 100,000 \u7684\u6559\u5e08\u4eba\u6570\u8d85\u8fc7 10 \u7684\u90e8\u95e8\uff0c\u5e76\u6309\u6559\u5e08\u4eba\u6570\u6392\u5e8f\u3002</li> <li>\u5982\u679c\u67d0\u4e2a\u90e8\u95e8\u7684\u6559\u5e08\u4eba\u6570\u8d85\u8fc7 10\uff0c\u7ed3\u679c\u5c06\u663e\u793a\u8be5\u90e8\u95e8\u7684\u540d\u79f0\u548c\u6559\u5e08\u4eba\u6570\u3002</li> <li>\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6ca1\u6709\u90e8\u95e8\u7684\u6559\u5e08\u4eba\u6570\u8d85\u8fc7 10\uff0c\u6240\u4ee5\u7ed3\u679c\u96c6\u4e3a\u7a7a\u3002 </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#3112-null-values-and-aggregates","title":"3.11.2 null values and aggregates","text":"arithmetic with aggregate functions"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#312-nested-subqueries","title":"3.12 nested subqueries","text":"<p>A subquery is a select-from-where expression that is nested within another query.</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#3121-set-membership","title":"3.12.1 set membership","text":"<p><code>in,not in</code></p> Example <p> </p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#3122-set-comparison","title":"3.12.2 set comparison","text":"<ul> <li><code>some</code> \u67d0\u4e9b\u6210\u5458</li> <li><code>all</code> \u6240\u6709\u6210\u5458</li> </ul> Example"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#3123-scalar-subquery","title":"3.12.3 scalar subquery","text":"<p>scalar(\u6807\u91cf) subquery is one whle is used where a single value is expected.</p> Example <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#3124-test-for-empty-relations","title":"3.12.4 test for empty relations","text":"<p>Example</p> <p> </p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#3125-test-for-absence-of-duplicate-tuples","title":"3.12.5 test for absence of duplicate tuples","text":"<ul> <li> <p>The unique construct tests whether a subquery has any duplicate tuples in its result.\u9a8c\u8bc1\u662f\u5426\u662f\u4e00\u4e2a\u96c6\u5408\uff0c\u800c\u975e\u591a\u91cd\u96c6\u3002</p> </li> <li> <p>Evaluates to \u201ctrue\u201d on an empty set.\u53ef\u4ee5\u5c06 unique \u7406\u89e3\u4e3a at most once.</p> </li> </ul> <p>Example</p> <p> </p> <p>Tip</p> <p> </p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#213-with-clause","title":"2.13 with clause","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#4-modification-of-the-database","title":"4 Modification of the Database","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#41-deletion","title":"4.1 deletion","text":"Example"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#42-insertion","title":"4.2 insertion","text":"Example <p>\u9664\u4e86\u57fa\u672c\u5199\u6cd5\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5728 insert \u540e\u8ddf\u67e5\u8be2\u8bed\u53e5\uff0c\u628a\u67e5\u8be2\u7ed3\u679c\u63d2\u5165\u5230\u8868\u91cc\u53bb\u3002</p> Example <p> \u628a\u8001\u5e08\u52a0\u5165\u5b66\u751f\u91cc\u9762</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/chapter3/#43-updates","title":"4.3 updates","text":"<p>update ... set ...</p> <p>The order is important. So it can be done better using the case statement.</p> Example <p></p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/Introduction/","title":"Introduction","text":"<p>\u300a\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u300b\u662f\u8ba1\u7b97\u673a\u4e13\u4e1a\u7684\u4e00\u95e8\u91cd\u8981\u4e13\u4e1a\u8bfe\uff0c\u4ece\u8ba1\u7b97\u673a\u7cfb\u7edf\u89d2\u5ea6\u4ecb\u7ecd\u8ba1\u7b97\u673a\u8bbe\u8ba1\u539f\u7406\u548c\u8bbe\u8ba1\u65b9\u6cd5\u3002</p> <p>\u8bfe\u7a0b\u5185\u5bb9\u5305\u62ec\uff1a 1. \u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u57fa\u672c\u6982\u5ff5\u3001\u8ba1\u7b97\u673a\u751f\u547d\u5468\u671f\u3001\u91cf\u5316\u8bbe\u8ba1\u539f\u7406\u548c\u8ba1\u7b97\u673a\u6027\u80fd\u8bc4\u4ef7\u65b9\u6cd5</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/chapter1/","title":"chapter1","text":""},{"location":"%E8%AE%B0%E5%BF%86/Introduction/","title":"Introduction","text":"<p>\u7269\u6b32\u6a2a\u6d41\u7684\u65f6\u4ee3\u4e0b\uff0c\u65e0\u6570\u7684\u6211\u4eec\uff0c\u88ab\u65f6\u5149\u7684\u6d2a\u6d41\u88f9\u631f\u524d\u8fdb\uff0c\u6d51\u6d51\u5669\u5669\u5730\u5ea6\u8fc7\u4eba\u751f\u4e2d\u672c\u5e94\u8be5\u662f\u6700\u6709\u60f3\u6cd5\u4e0e\u95ef\u52b2\u7684\u9752\u5e74\u751f\u6daf\u3002</p> <p>\u6709\u4e9b\u65f6\u5019\uff0c\u6709\u4e9b\u4e8b\u60c5\uff0c\u53ea\u80fd\u5728\u84e6\u7136\u56de\u9996\u4e2d\u6f2b\u6f2b\u56de\u6eaf\u3002\u90a3\u4e9b\u9519\u8fc7\u7684\uff0c\u5f97\u5230\u7684\uff0c\u9057\u61be\u7684\uff0c\u5e86\u5e78\u7684\uff0c\u96be\u4ee5\u540d\u72b6\u7684\uff0c\u523b\u9aa8\u94ed\u5fc3\u7684\uff0c\u7686\u662f\u5c18\u5c01\u5c81\u6708\u4e2d\u7684\u5b9d\u8d35\u56de\u5fc6\u3002</p> <p>\u65e2\u7136\u5982\u6b64\uff0c\u5c31\u8ba9\u5b83\u4eec\u98d8\u626c\u5728\u6de1\u6de1\u7684\u5fe7\u4f24\u4e2d\u5427~</p> <p>\u4e0d\u6b32\u6c42\uff0c\u4e0d\u4e89\u5947\u3002</p> <p>\u53ea\u613f\u5fc3\u6000\u6700\u521d\u7684\u5b88\u671b\uff0c\u884c\u8d70\u5411\u6700\u7ec8\u7684\u5730\u70b9\u3002</p> <p>\u4e0d\u6c42\u95fb\u8fbe\u4e8e\u83bd\u6797\uff0c\u4e0d\u6155\u70ed\u95f9\u4e8e\u4e61\u5cad\u3002</p> <p>\u662f\u4e3a\u5e8f\u3002</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/","title":"Introduction","text":"<p>\u6df7\u5408\u73ed\u8ba1\u7b97\u673a\u4e13\u4e1a\u7684\u901a\u8bc6\u57fa\u7840\u8bfe\u5f3a\u8c03\u52a0\u6df1\u6570\u7406\u6c34\u5e73\uff0c\u8fd9\u91cc\u5305\u542b\u4ee5\u4e0b\u51e0\u95e8\u8bfe\u7a0b\u3002</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/#h","title":"\u6570\u5b66\u5206\u6790(H)","text":"<p>\u975e\u5e38\u4ee4\u4eba\u96be\u5fd8\u7684\u9ad8\u7b49\u6570\u5b66\u4e4b\u65c5\uff01\u6ca1\u6709\u73b0\u6210\u7684\u7b14\u8bb0\u597d\u7528\uff01\u8fd9\u95e8\u8bfe\u7a0b\u91cc\u9762\uff0c\u6bcf\u4e00\u4e2a\u4eba\u7684\u7b14\u8bb0\u90fd\u662f\u6700\u9002\u5408\u81ea\u5df1\u4e14\u72ec\u4e00\u65e0\u4e8c\u7684\uff01</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/#h_1","title":"\u666e\u901a\u7269\u7406\u5b66(H)","text":"<p>\u6709\u70b9\u96be\u8bf4\u771f\u7684\uff0c\u4e2a\u4eba\u611f\u89c9\u666e\u7269\u4e00\u76f8\u5bf9\u8bba\u5185\u5bb9\u6bd4\u8f83\u62bd\u8c61\uff0c\u666e\u7269\u4e8c\u7684\u7535\u548c\u78c1\u975e\u5e38\u6709\u8da3\uff0c\u6240\u4ee5\u7b14\u8005\u666e\u7269\u4e00\u53d6\u5f97\u4e86\u4e00\u4e2a\u8d85\u70c2\u7684\u7ee9\u70b9\uff0c\u666e\u7269\u4e8c\u86ee\u4e0d\u9519\u7684\u3002\u8001\u5e08\u53ea\u6709PPT\uff0c\u6ca1\u6709\u6559\u6750\uff0c\u5728\u8fd9\u91cc\u62f7\u8d1d\u4e86\u4f18\u79c0\u540c\u5b66\u7684\u7b14\u8bb0\uff0c\u4f9b\u6b23\u8d4f\u3002</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/#_1","title":"\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1","text":"<p>\u4e0d\u7b97\u5f88\u96be\u7684\u4e00\u95e8\u8bfe\uff0c\u6ca1\u6709\u7b14\u8bb0\uff0c\u6211\u4e5f\u62f7\u8d1d\u4e86\u4f18\u79c0\u540c\u5b66\u7684\u3002</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/#_2","title":"\u79bb\u6563\u6570\u5b66","text":"<p>\u4e0b\u5b66\u671f\u5f00\u59cb\u5b66\u4e60\u8fd9\u95e8\u8bfe\uff0c\u6211\u8981\u52a0\u6cb9\uff01</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/#_3","title":"\u5de5\u7a0b\u56fe\u5b66","text":"<p>\u4e0b\u5b66\u671f\u5f00\u59cb\u5b66\u4e60\u8fd9\u95e8\u8bfe\uff0c\u6211\u8981\u52a0\u6cb9\u6cb9\uff01</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/","title":"\u6570\u5b66\u5206\u6790","text":"<p>\u8fd9\u91cc\u4ec0\u4e48\u4e5f\u6ca1\u6709\uff01\uff01\uff01</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AD%A6/","title":"\u666e\u901a\u7269\u7406\u5b66","text":"<p>\u8fd9\u91cc\u53ea\u6709\u5173\u4e8e\u666e\u901a\u7269\u7406\u5b66\u4e8c\u7684\u5185\u5bb9\uff01 \u53c2\u8003RoderickShao's notebook</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E5%B7%A5%E7%A8%8B%E5%9B%BE%E5%AD%A6/chapter1/","title":"chapter1","text":""},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E5%B7%A5%E7%A8%8B%E5%9B%BE%E5%AD%A6/chapter1/#21","title":"2.1 \u6295\u5f71\u6cd5\u53ca\u5176\u5206\u7c7b","text":"<p>\u4e2d\u5fc3\u6295\u5f71\u6cd5</p> <p></p> <p>\u5e73\u884c\u6295\u5f71\u6cd5</p> <p></p> <p></p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E5%B7%A5%E7%A8%8B%E5%9B%BE%E5%AD%A6/chapter1/#22","title":"2.2 \u70b9\u7684\u6295\u5f71","text":"<p>Warning</p> <p>\u7a7a\u95f4\u70b9\u7528\u5927\u5199\u5b57\u6bcd\u8868\u793a\uff0c\u70b9\u7684\u6295\u5f71\u7528\u5c0f\u5199\u5b57\u6bcd\u8868\u793a</p> <p></p> <p>Tip</p> <p>\u70b9\u7684\u6295\u5f71\u89c4\u5f8b\uff1aa'a\u5782\u76f4X\u8f74\uff0ca'a\"\u5782\u76f4Z\u8f74\uff0caa<code>x</code>=a\"a<code>z</code>(\u91cd\u8981)</p> <p></p> <p>\u70b9\u7684\u4e09\u9762\u6295\u5f71\u4e0e\u76f4\u89d2\u5750\u6807\u7684\u5173\u7cfb\uff1a - \u70b9\u7684\u6295\u5f71\u53cd\u6620\u4e86\u70b9\u7684\u5750\u6807\u503c - \u70b9\u7684\u4e00\u4e2a\u6295\u5f71\u53cd\u6620\u4e86\u70b9\u7684\u4e24\u4e2a\u5750\u6807\uff0c\u82e5\u5df2\u77e5\u70b9\u7684\u4e24\u4e2a\u6295\u5f71\uff0c\u5219\u70b9\u7684xyz\u4e09\u4e2a\u5750\u6807\u5c31\u53ef\u4ee5\u786e\u5b9a\u3002</p> <p>Question</p> <p></p> Answer <p></p> <p>\u6295\u5f71\u9762\u4e0e\u6295\u5f71\u8f74\u4e0a\u7684\u70b9</p> <p>\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u6295\u5f71\u9762\u4e0a\u7684\u70b9B,b\u5728X\u8f74\u4e0a,b\"\u5728Z\u8f74\u4e0a\uff0cb'\u6b63\u5e38\u3002\u5750\u6807\u8f74\u4e0a\u7684\u70b9D,d\u548cd'\u91cd\u5408\u5e76\u4f4d\u4e8eX\u8f74,d\"\u4e0e\u539f\u70b9\u91cd\u5408\u3002</p> <p></p> <p>Tip</p> <p></p> <p>\u91cd\u5f71\u70b9</p> <p> </p> \u76f4\u89d2\u8fb91 \u76f4\u89d2\u8fb92 \u659c\u8fb9 \u5939\u89d2 \u6c34\u5e73\u6295\u5f71 Z \u5b9e\u957f alpha"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E5%B7%A5%E7%A8%8B%E5%9B%BE%E5%AD%A6/chapter1/#23","title":"2.3 \u76f4\u7ebf\u7684\u6295\u5f71","text":"<p>\u4e09\u79cd\u6295\u5f71\u9762\u5e73\u884c\u7ebf\u7684\u7279\u6027</p> <p> </p> \u6b63\u5e73\u7ebf\u3001\u6c34\u5e73\u7ebf\u3001\u4fa7\u5e73\u7ebf\u4e09\u8005\u6bd4\u8f83 <p></p> <p> </p> \u6295\u5f71\u9762\u5782\u76f4\u7ebf\u7684\u6bd4\u8f83 <p></p> <p>\u4ece\u5c5e\u4e8eV\u9762\u7684\u76f4\u7ebf</p> <p></p> <p>\u4ece\u5c5e\u4e8eV\u6295\u5f71\u9762\u7684\u94c5\u5782\u7ebf</p> <p></p> <p>\u4ece\u5c5e\u4e8eX\u8f74\u7684\u76f4\u7ebf</p> <p></p> <p></p> <p>Question</p> <p></p> \u4e09\u9053\u4f8b\u9898\uff1a\u4e00\u822c\u76f4\u7ebf\u4e0e\u9762\u7684\u5939\u89d2 <p> </p> <p>Question</p> <p></p> \u4f8b\u9898 <p></p> <p></p> \u4e24\u9053\u7b80\u5355\u7684\u4f8b\u9898 <p> </p> <p></p> \u4f8b\u9898 <p></p> <p></p> \u4f8b\u9898 <p> </p> <p></p> <p>Tip</p> <p> </p> <p> </p> \u4e09\u9053\u4f8b\u9898 <p> </p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E5%B7%A5%E7%A8%8B%E5%9B%BE%E5%AD%A6/chapter2/","title":"chapter2 \u5e73\u9762\u7684\u6295\u5f71","text":"<p>\u6295\u5f71\u5782\u76f4\u9762</p> <p> </p> <p>\u6295\u5f71\u6c34\u5e73\u9762</p> <p> </p> <p>\u4e00\u822c\u4f4d\u7f6e\u5e73\u9762</p> <p></p> \u4e00\u9053\u503c\u5f97\u601d\u8003\u7684\u4f8b\u9898 <p> \u6700\u7ec8\u7b54\u6848\u662f2\u79cd\u60c5\u51b5\uff0c\u659c\u5411\u53f3\u4e0b\u65b9\u768445\u5ea6\u89d2\u65b9\u5411\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u753b\u4e0d\u4e0b\u4e86\uff0c\u4f46\u662f\u771f\u5b9e\u80fd\u591f\u5b58\u5728\u7684\u3002</p> <p></p> 2\u9053\u4f8b\u9898 <p> \u7b54\u6848\u5f53\u7136\u662f\u65e0\u7a77\u591a\u4e2a\u5566~  \u8fd9\u4e2a\u4e0d\u96be</p> <p></p> \u4e24\u9053\u8fd8\u53ef\u4ee5\u7684\u4f8b\u9898 <p>  \u4f8b\u4e09\u6709\u8da3\uff0c\u81ea\u5df1\u52a8\u624b\u753b\u753b\uff0c\u5c31\u4e0d\u7ed9\u7b54\u6848\u4e86</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E5%B7%A5%E7%A8%8B%E5%9B%BE%E5%AD%A6/chapter2/#_1","title":"\u76f4\u7ebf\u4e0e\u5e73\u9762\u7684\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb","text":""},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E5%B7%A5%E7%A8%8B%E5%9B%BE%E5%AD%A6/chapter2/#_2","title":"\u5e73\u884c\u95ee\u9898","text":""},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E5%B7%A5%E7%A8%8B%E5%9B%BE%E5%AD%A6/chapter2/#_3","title":"\u76f4\u7ebf\u4e0e\u5e73\u9762\u5e73\u884c","text":"\u4e09\u4e2a\u4f8b\u5b50"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E5%B7%A5%E7%A8%8B%E5%9B%BE%E5%AD%A6/chapter2/#_4","title":"\u4e24\u5e73\u9762\u5e73\u884c","text":"\u51e0\u9053\u4f8b\u9898"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E5%B7%A5%E7%A8%8B%E5%9B%BE%E5%AD%A6/chapter2/#_5","title":"\u76f8\u4ea4\u95ee\u9898","text":""},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E5%B7%A5%E7%A8%8B%E5%9B%BE%E5%AD%A6/chapter2/#_6","title":"\u76f4\u7ebf\u4e0e\u5e73\u9762\u76f8\u4ea4","text":"<p>\u4f8b\u9898\u4e24\u9053</p> <p>\u5e73\u9762\u5904\u4e8e\u7279\u6b8a\u4f4d\u7f6e  \u76f4\u7ebf\u5904\u4e8e\u7279\u6b8a\u4f4d\u7f6e </p> <p>Tip</p> <p>\u603b\u7ed3\u4e00\u4e0b\uff0c\u4ece\u7279\u6b8a\u89c6\u56fe\u5165\u624b\uff0c\u5728\u666e\u901a\u89c6\u56fe\u4e2d\u627e\u5230\u4ea4\u7ebf\u6216\u4ea4\u70b9\uff0c\u518d\u4ece\u666e\u901a\u89c6\u56fe\u7684\u79ef\u805a\u70b9\u5165\u624b\uff0c\u8f6c\u79fb\u5230\u7279\u6b8a\u89c6\u56fe\u4e2d\u7684\u76f8\u5173\u70b9\uff0c\u5224\u65ad\u8c01\u80fd\u88ab\u770b\u5230\uff0c\u8c01\u4e0d\u80fd\u88ab\u770b\u5230\u3002</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E5%B7%A5%E7%A8%8B%E5%9B%BE%E5%AD%A6/chapter2/#_7","title":"\u4e24\u5e73\u9762\u76f8\u4ea4","text":"\u4e24\u4e2a\u4f8b\u5b50 <p>Tip</p> <p>\u5c0f\u7ed3\u4e00\u4e0b </p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E5%B7%A5%E7%A8%8B%E5%9B%BE%E5%AD%A6/chapter2/#_8","title":"\u4e24\u5e73\u9762\u7684\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb","text":""},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E6%AF%9B%E6%A6%82/Introduction/","title":"Introduction","text":""},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/Introduction/","title":"Introduction","text":"<p>\u70b9\u51fb\u5c55\u5f00</p> <pre><code># \u8fd9\u662f\u6298\u53e0\u8d77\u6765\u7684\u4ee3\u7801\u5757\nprint(\"Hello, World!\")\n</code></pre> <p>\u70b9\u51fb\u5c55\u5f00</p> <p>\u8fd9\u662f\u6298\u53e0\u8d77\u6765\u7684\u5185\u5bb9\u3002</p> \u53ef\u9009\u63d0\u793a\u6807\u9898 <p>\u8fd9\u91cc\u662f\u6298\u53e0\u5185\u5bb9\u3002</p> \u9ed8\u8ba4\u5c55\u5f00\u7684\u63d0\u793a\u6807\u9898 <p>\u9ed8\u8ba4\u5c55\u5f00\u7684\u5185\u5bb9\u3002</p> \u5217\u8868\u793a\u4f8b <ul> <li>\u9879\u76ee 1</li> <li>\u9879\u76ee 2</li> <li>\u9879\u76ee 3</li> </ul> \u4efb\u52a1\u5217\u8868 <ul> <li> \u4efb\u52a1 1</li> <li> \u4efb\u52a1 2</li> <li> \u4efb\u52a1 3</li> </ul> \u91cd\u8981\u63d0\u793a <p>Danger</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5371\u9669\u63d0\u793a\u3002</p> <p>Danger</p> <pre><code>\u8fd9\u662f\u4e00\u4e2a\u5371\u9669\u63d0\u793a\u3002\n</code></pre> <p>Note</p> <p>\u8fd9\u662f\u4e00\u4e2a\u666e\u901a\u7684\u63d0\u793a\u3002</p> <p>Abstract</p> <p>\u8fd9\u662f\u4e00\u4e2a\u6458\u8981\u3002</p> <p>Info</p> <p>\u8fd9\u662f\u4e00\u4e2a\u4fe1\u606f\u63d0\u793a\u3002!!! info \u8fd9\u662f\u4e00\u4e2a\u4fe1\u606f\u63d0\u793a\u3002\\\\</p> <p>Tip</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5c0f\u8d34\u58eb\u3002</p> <p>Success</p> <p>\u8fd9\u662f\u4e00\u4e2a\u6210\u529f\u63d0\u793a\u3002</p> <p>Question</p> <p>\u8fd9\u662f\u4e00\u4e2a\u95ee\u9898\u3002</p> <p>Warning</p> <p>\u8fd9\u662f\u4e00\u4e2a\u8b66\u544a\u3002</p> <p>Failure</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5931\u8d25\u63d0\u793a\u3002</p> <p>Bug</p> <p>\u8fd9\u662f\u4e00\u4e2a Bug \u63d0\u793a\u3002</p> <p>Example</p> <p>\u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\u3002</p> <p>Quote</p> <p>\u8fd9\u662f\u4e00\u4e2a\u5f15\u7528\u3002</p> <p>\u5d4c\u5957\u793a\u4f8b</p> <ul> <li>\u5217\u8868\u9879 1</li> <li>\u5217\u8868\u9879 2</li> </ul> <pre><code>print(\"Hello, World!\")\n</code></pre> \u6298\u53e0\u8b66\u544a\u5757 <p>Warning</p> <p>\u8fd9\u662f\u4e00\u4e2a\u6298\u53e0\u7684\u8b66\u544a\u5757\u3002</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/chapter1/","title":"chapter1","text":""},{"location":"%E9%80%9A%E8%AF%86%E9%80%89%E4%BF%AE%E8%AF%BE/Introduction/","title":"Introduction","text":"<p>\u901a\u8bc6\u9009\u4fee\u8bfe\u9700\u8981\u670910.5\u5b66\u5206\uff0c\u5305\u62ec\u535a\u96c5\u6280\u827a\u3001\u901a\u8bc6\u6838\u5fc3\u3001\u901a\u8bc6\u9009\u4fee\u6a21\u5757\u7b49\u7b49\u3002</p> <p>\u6b64\u5916\uff0c\u8fd8\u6709\u521b\u65b0\u521b\u4e1a\u7c7b\u3001\u5fc3\u7406\u7c7b\u7b49\u5404\u79cd\u8bfe\u7a0b\uff0c\u6bcf\u4e00\u5c4a\u8fd8\u90fd\u4e0d\u4e00\u6837\uff0c\u672c\u4eba\u5c31\u628a\u81ea\u5df1\u4e0a\u8fc7\u7684\u8bfe\u7a0b\u653e\u8fdb\u6765\u5427\u3002</p>"}]}