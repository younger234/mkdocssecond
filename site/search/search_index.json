{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to Younger's Notebook!","text":""},{"location":"#_1","title":"\u968f\u4fbf\u804a\u804a","text":"<p>\u7b14\u8005\u662f\u4e00\u540d\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u4e13\u4e1a\u7684\u5b66\u751f\uff0c\u6765\u81ea\u6d59\u6c5f\u5927\u5b66\u7afa\u9662\u6df7\u5408\u73ed23\u7ea7\uff0c\u4eca\u5e74\u5927\u4e8c\u3002</p> <p>\u5728\u8fd9\u51e0\u5e74\u7684\u5b66\u4e60\u751f\u6d3b\u4e2d\uff0c\u65e9\u6709\u60f3\u901a\u8fc7\u535a\u5ba2\u7684\u5f62\u5f0f\uff0c\u5c06\u81ea\u5df1\u7684\u5b66\u4e60\u8d44\u6599\u548c\u5b66\u4e60\u5fc3\u5f97\u5206\u4eab\u5230\u7f51\u4e0a\u7684\u7ecf\u5386\u3002\u7ec8\u4e8e\u5728\u6b64\u4ed8\u8bf8\u4e8e\u5b9e\u8df5\uff0c\u5176\u5b9e\u6709\u4e9b\u8fdf\u4e86\uff0c\u90e8\u5206\u8bfe\u7a0b\u5c31\u53ea\u597d\u62f7\u8d1d\u5176\u4ed6\u4f18\u79c0\u540c\u5b66\u7684\u7b14\u8bb0\u4e86\u3002</p> <p>\u6211\u7684\u535a\u5ba2\u7a7a\u95f4\u91cc\u9762\u653e\u7f6e\u4e86\u5404\u95e8\u8bfe\u7a0b\u7684\u5b66\u4e60\u8d44\u6599\u3001\u7b14\u8bb0\u548c\u5386\u5e74\u5377\u7b49\uff0c\u5982\u6709\u9519\u8bef\uff0c\u6b22\u8fce\u5404\u4f4d\u6279\u8bc4\u4e0e\u6307\u6b63\uff01</p> <p>\u535a\u5ba2\u8fd8\u6709\u4e00\u4e9b\u6211\u81ea\u5df1\u7684\u968f\u7b14\u548c\u5927\u5b66\u751f\u6d3b\u7684\u611f\u60f3\uff0c\u5e0c\u671b\u5bf9\u5404\u4f4d\u6709\u5e2e\u52a9\uff01</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/","title":"CS106l","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#_1","title":"\u5199\u5728\u524d\u9762\u7684\u8bdd","text":"<p>\u9996\u5148\u662f\u8bfe\u7a0b\u7f51\u5740\uff0ccs106l</p> <p>\u5176\u6b21\u662fcpp.reference\u7f51\u7ad9 \u8bb0\u5f97\u6302\u68af\u5b50\u54e6</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture1beginning","title":"lecture1\uff1abeginning","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#for-the-std","title":"for the std","text":"<p>std and &lt; bits/stdc++.h &gt; the CSDN web is here,click this</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#find-the-sum-of-a-vector","title":"Find the sum of a vector","text":"<pre><code>//version 1\nvector&lt;int&gt; vec ={1,2,3};\nint sum =0;\nfor(auto val :vec){\n    sum +=val;\n}\n\n//version 2\nvector&lt;int&gt; vec={1,2,3};\nint sum=0;\nfor(const auto&amp;val  :vec){\n    sum +=val;\n}\n\n//version 3\nvector&lt;int&gt; vec={1,2,3};\nint sum= std::accummulate(vec.begin(),vec.end(),0);\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#hello-world","title":"Hello world!","text":"<pre><code>#include&lt;iostream&gt;\nint hello_cpp(){\n    std::cout&lt;&lt;\"hello world!\"&lt;&lt;std::endl;\n}\n\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\nint hello_c(){\n    printf(\"%s\",\"hello world!\");\n}\n//two versions are equal\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture-2","title":"lecture 2","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#string","title":"string","text":"<pre><code>int main(){\n    string str=\"Hello world!\";\n    cout::str::endl;//print the string\n    cout::str[1]::endl;//print \"e\"\n    str[1]='i';//change the char\n\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#stream","title":"stream","text":"<p>\u8f93\u51fa\u6d41 <pre><code>int main(){\n    ostringstream oss(\"Ito-En Green Tea\");\n    cout &lt;&lt; oss.str()&lt;&lt; endl;//Tto-En Green Tea;\n    oss &lt;&lt; \"16,9 Ounces\";//16.9 Ouncesn Tea\n    //\u8fd9\u4e2a\u6d41\u662f\u4ece\u5de6\u5f00\u59cb\u505abuffer\u8fdb\u884c\u66ff\u6362\u7684\n\n    ostringstream oss(\"Ito-En Green Tea\",ostringstream::ate);\n    cout &lt;&lt; oss.str()&lt;&lt; endl;//Tto-En Green Tea;\n    oss &lt;&lt; \"16,9 Ounces\";//\n    //\u8fd9\u4e2a\u6d41\u662f\u4ece\u53f3\u5f00\u59cb\u505abuffer\u8fdb\u884c\u66ff\u6362\u7684\n\n    isstringstream iss(\"16.9 Ounces\");\n    double amount;\n    string unit;\n    iss &gt;&gt; amount;//amount get 16.9 as a double\n    iss &gt;&gt; unit;\n    cout &lt;&lt; amount/2 &lt;&lt; endl; //8.45?\n\n    isstringstream iss(\"16.9 Ounces\");\n    int amount;\n    string unit;\n    iss &gt;&gt; amount;\n    iss &gt;&gt; unit;//this two lines can be combined as iss &gt;&gt; amount &gt;&gt; unit\n    cout &lt;&lt; amount/2 &lt;&lt; \" \" &lt;&lt; unit &lt;&lt; endl; //8 .9 \n    //\u4e00\u4e2a\u6307\u9488\u4ece\u5934\u5f00\u59cb\u5f80\u53f3\u79fb\u52a8\uff0cfirst stop at 6,and amount gets 16, then a bubble, then unit gets .9,so the result outputs 8 .9\n\n}\n</code></pre></p> <p>string to integer <pre><code>int stringToInteger(const string&amp; s){\n    istringstream iss(s);\n    int result;\n    iss &gt;&gt; result;\n\n    return result;\n}\n</code></pre></p> <p>we can use manipulators to pad the output. <pre><code>cout &lt;&lt; \"[\" &lt;&lt; setw(10) &lt;&lt; \"Ito\" &lt;&lt; \"]\";\n//output:[          Ito]\ncout &lt;&lt; \"[\" &lt;&lt; left &lt;&lt; setw(10) &lt;&lt; \"Ito\" &lt;&lt;  \"]\";\n//output:[Ito          ]\ncout &lt;&lt; \"[\" &lt;&lt; left &lt;&lt; setfill('-') &lt;&lt; setw(10) &lt;&lt; \"Ito\" &lt;&lt; \"]\";\n//output:[Ito----------]\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture-3-type-and-advanced-streams","title":"lecture 3: type and advanced streams","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#cin-and-cout","title":"cin and cout","text":"<pre><code>cout &lt;&lt; \"What is your name?\";\ncin &gt;&gt; name;\ngetline(cin,name);\n</code></pre> <pre><code>int getInteger(const string&amp; prompt){\n    string line;\n    getline(cin,line);\n\n    istringstream iss(line);\n    int val;\n    iss &gt;&gt; val;\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#auto","title":"auto","text":"<p>automatically help you be lazy</p> <pre><code>auto prices = make_pair(3.4,5); //pair&lt;double,int&gt;\nauto values = make_tuple(3,4,\"hi\"); //tuple&lt;int,int,char*&gt;\n\nprices.first = prices.second; //prices = {5.0,5};\nget&lt;0&gt;(values) = get&lt;1&gt;(values); //values = {4,4,\"hi\"};\n\nauto [a,b] = prices; //a,b are copies of 5.0 and 5;\nconst auto&amp; [x,y,z]=values; //x,y,z are const references to the 4,4, and \"hi\";\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture-4-sequence-container","title":"lecture 4: sequence container","text":"<p>review the structure first <pre><code>struct PriceRange{\n    int min;\n    int max;\n}\n\nstruct Course{\n    string code;\n    Time startTime;\n    Time endTime;\n    vector&lt;string&gt;instructors;\n}\n</code></pre></p> <p>initialization <pre><code>int main(){\n    vector&lt;int&gt; vec{3,1,4,1,5,9};\n    Course now{\"CS106L\",{15,30},{16,30},{\"Wang\",\"Zeng\"}};\n}\n</code></pre> <pre><code>int main(){\n    vector&lt;int&gt; vec1{3}; // vector = {3}\n    vector&lt;int&gt; vec2(3); // vector = {0,0,0}\n}\n</code></pre></p> <p>caution:Use Thoughtfully When should I use a stringstream? 1. Proccessing strings    1. simplify \"/./a/b/..\"to\"/a\" 2. Formatting input/output    1. ippercase,hex,and other stream manipulators 3. Parsing different types    1. stringToLinteger() from previous lectures</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#stl","title":"STL\u5e93","text":"<p>example of the bubble sort the usual type is here: <pre><code>int main(){\n    vector&lt;int&gt; vec(20);\n    for(size_t i=0;i&lt; vec.size(); i++){\n        vec[i]=rand();\n    }\n\n    doBubbleSort(vec);\n\n    for(size_t i=0;i&lt;vec.size();i++){\n        cout &lt;&lt; vec[i]  &lt;&lt; endl;\n    }\n}\n\nvoid doBubbleSort(vector&lt;int&gt; &amp;v){\n    for(size_t i=0;i&lt;v.size()-1;i++){\n        for(size_t j=0;j&lt;size(()-i-1;j++){\n            if(v[j]&gt;v[j+1]){\n                int temp =v[j];\n                v[j]=v[j+1];\n                v[j+1]=tmp;\n            }\n        }\n    }\n}\n</code></pre></p> <p>the STL type is here: <pre><code>int main(){\n    vector&lt;int&gt; vec(20);\n    std::generate(vec.begin(),vec.end(),rand);\n    std::sort(vec.begin(),vec.end());\n    std::copy(vec.begin(),vec.end(),std::ostream_iterator&lt;int&gt;(cout,\"\\n\"));\n}\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#sequence-container","title":"sequence container","text":"<p>provides access to sequences of elements includes: std::vector &lt; T &gt; std::dequet &lt; T &gt; std::list &lt; T &gt; std::array &lt; T &gt; std::forward_list &lt; T &gt;</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#stdvector-t","title":"std::vector&lt; T &gt;","text":"<p>a vector represents a sequence of elements of any type.You specify the type when using the vector: <pre><code>std::vector&lt; int &gt; vecInt;//vector of ints\nstd::vector&lt; string &gt; vecStr;//vector of string\nstd::vector&lt; mystruct &gt; vecStruct;//vector of mystructs\nstd::vector&lt; std::vector&lt; string &gt; &gt; vecOfVec // vector of vector&lt;string&gt;\n</code></pre></p> <p>summary of Stanford vector&lt; t &gt; vs std::vector&lt; T &gt; </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#stddeque-t","title":"std::deque&lt; T &gt;","text":"<p>cpp reference explain deque ,click here</p> <p><pre><code>#include &lt;deque&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    // Create a deque containing integers\n    std::deque&lt;int&gt; d = {7, 5, 16, 8};\n\n    // Add an integer to the beginning and end of the deque\n    d.push_front(13);\n    d.push_back(25);\n\n    // Iterate and print values of deque\n    for (int n : d)\n        std::cout &lt;&lt; n &lt;&lt; ' ';\n    std::cout &lt;&lt; '\\n';\n}\n</code></pre> <pre><code>output : 13 7 5 16 8 25\n</code></pre></p> <p>vector is the type of sequence that should be used by default...deque is the data structrue of choice when most insertions and deletions take place at the beginning or at the end of sequence.  </p> <p>in general,a graph could tell the difference between the vector and the deque </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#the-stack-and-the-queue","title":"the stack and the queue","text":"<p> so the stack and the queue are just a special case of the vector and the deque.</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture5-associative-container","title":"lecture5: Associative Container","text":"<p>have no idea of a sequence.  data is accessed using the key instead of indexes.  includes:  <pre><code>std::map&lt; T1,T2 &gt;\nstd::set&lt; T &gt;\nstd::unordered_map&lt; T1,T2 &gt;\nstd::unoedered_set&lt; T &gt;\n</code></pre>  map/set:Keys in sorted order,faster to iterate through a range of elements.</p> <p>Unordered map/set:faster to access individual elements by key.</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/Introduction/","title":"Introduction","text":"<p>\u63a8\u8350\u4e00\u4e2a\u597d\u7528\u7684\u81ea\u5b66\u7f51\u7ad9\uff0c\u524d\u4eba\u7ecf\u9a8c \u8bdd\u4e0d\u591a\u8bf4 \u5f00\u542f\u795e\u79d8\u7684CS\u5b66\u4e60\u4e4b\u65c5\u5427\uff01</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CUDA%E7%BC%96%E7%A8%8B/Introduction/","title":"Introduction","text":"<p>\u5f02\u6784\u5e76\u884c\u7f16\u7a0b-CUDA\u7f16\u7a0b\uff0cUIUC</p> <p>GPU\u7684\u7f16\u7a0b\u8bed\u8a00</p> <p>\u4e5f\u662f3DGS\u9700\u8981\u7684\uff0c\u5c1d\u8bd5\u81ea\u5df1\u5b66\u4e60\u4e00\u4e0b\u5427\uff0c\u6709\u70b9\u795e\u5947\u7684\u65b0\u8bed\u8a00...</p> <p>\u54d4\u7ad9\u5b66\u4e60\u7f51\u7ad9\u5728\u6b64\uff0cclick this</p> <p>\u90a3\u5c31\u5f00\u59cb\u795e\u79d8\u7684CUDA\u7f16\u7a0b\u4e4b\u65c5\u5427~</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/ADS/","title":"\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790","text":"<p>\u53c2\u8003\u4e24\u4e2a\u7b14\u8bb0\uff0c\u90fd\u633a\u8be6\u7ec6\u633a\u597d\u7684 RoderickShao's Notebook \u6216\u8005 \u4fee\u4f6c\u7684\u7b14\u8bb0</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/Introduction/","title":"Introduction","text":"<p>\u8ba1\u7b97\u673a\u4e13\u4e1a\u8bfe\u8fd8\u662f\u5f88\u6709\u6280\u672f\u58c1\u5792\u7684\uff0c\u6bcf\u95e8\u8bfe\u4e92\u6709\u8054\u7cfb\uff0c\u5404\u6210\u4f53\u7cfb\uff0c\u7b14\u8005\u4ecd\u5728\u4e0d\u65ad\u5b8c\u5584\u4e2d\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/","title":"\u6570\u5b57\u903b\u8f91\u8bbe\u8ba1","text":"<p>\u6211\u5728\u5b66\u4e60\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e3b\u8981\u53c2\u8003\u4fee\u4f6c\u7684\u7b14\u8bb0</p> <p>\u5b9e\u9a8c\u53c2\u8003\u8fd9\u91cc</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/","title":"\u6570\u636e\u7ed3\u6784\u57fa\u7840","text":"<p>\u666e\u901a\u57fa\u7840\u7684\u4e00\u95e8\u8bfe\uff0c\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u8ba4\u771f\u5c31\u884c\uff0c\u5347\u7ea7\u7248ADS\u624d\u9178\u723d</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/","title":"\u8ba1\u7b97\u673a\u7ec4\u6210","text":"<p>\u8bfe\u7a0b\u5185\u5bb9\u53c2\u8003RoderickShao's Notebook</p> <p>\u5b9e\u9a8c\u53c2\u8003\u8fd9\u4e2a</p>"},{"location":"%E8%AE%B0%E5%BF%86/Introduction/","title":"Introduction","text":"<p>\u7269\u6b32\u6a2a\u6d41\u7684\u65f6\u4ee3\u4e0b\uff0c\u65e0\u6570\u7684\u6211\u4eec\uff0c\u88ab\u65f6\u5149\u7684\u6d2a\u6d41\u88f9\u631f\u524d\u8fdb\uff0c\u6d51\u6d51\u5669\u5669\u5730\u5ea6\u8fc7\u4eba\u751f\u4e2d\u672c\u5e94\u8be5\u662f\u6700\u6709\u60f3\u6cd5\u4e0e\u95ef\u52b2\u7684\u9752\u5e74\u751f\u6daf\u3002</p> <p>\u6709\u4e9b\u65f6\u5019\uff0c\u6709\u4e9b\u4e8b\u60c5\uff0c\u53ea\u80fd\u5728\u84e6\u7136\u56de\u9996\u4e2d\u6f2b\u6f2b\u56de\u6eaf\u3002\u90a3\u4e9b\u9519\u8fc7\u7684\uff0c\u5f97\u5230\u7684\uff0c\u9057\u61be\u7684\uff0c\u5e86\u5e78\u7684\uff0c\u96be\u4ee5\u540d\u72b6\u7684\uff0c\u523b\u9aa8\u94ed\u5fc3\u7684\uff0c\u7686\u662f\u5c18\u5c01\u5c81\u6708\u4e2d\u7684\u5b9d\u8d35\u56de\u5fc6\u3002</p> <p>\u65e2\u7136\u5982\u6b64\uff0c\u5c31\u8ba9\u5b83\u4eec\u98d8\u626c\u5728\u6de1\u6de1\u7684\u5fe7\u4f24\u4e2d\u5427~</p> <p>\u4e0d\u6b32\u6c42\uff0c\u4e0d\u4e89\u5947\u3002</p> <p>\u53ea\u613f\u5fc3\u6000\u6700\u521d\u7684\u5b88\u671b\uff0c\u884c\u8d70\u5411\u6700\u7ec8\u7684\u5730\u70b9\u3002</p> <p>\u4e0d\u6c42\u95fb\u8fbe\u4e8e\u83bd\u6797\uff0c\u4e0d\u6155\u70ed\u95f9\u4e8e\u4e61\u5cad\u3002</p> <p>\u662f\u4e3a\u5e8f\u3002</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/","title":"Introduction","text":"<p>\u6df7\u5408\u73ed\u8ba1\u7b97\u673a\u4e13\u4e1a\u7684\u901a\u8bc6\u57fa\u7840\u8bfe\u5f3a\u8c03\u52a0\u6df1\u6570\u7406\u6c34\u5e73\uff0c\u8fd9\u91cc\u5305\u542b\u4ee5\u4e0b\u51e0\u95e8\u8bfe\u7a0b\u3002</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/#h","title":"\u6570\u5b66\u5206\u6790(H)","text":"<p>\u975e\u5e38\u4ee4\u4eba\u96be\u5fd8\u7684\u9ad8\u7b49\u6570\u5b66\u4e4b\u65c5\uff01\u6ca1\u6709\u73b0\u6210\u7684\u7b14\u8bb0\u597d\u7528\uff01\u8fd9\u95e8\u8bfe\u7a0b\u91cc\u9762\uff0c\u6bcf\u4e00\u4e2a\u4eba\u7684\u7b14\u8bb0\u90fd\u662f\u6700\u9002\u5408\u81ea\u5df1\u4e14\u72ec\u4e00\u65e0\u4e8c\u7684\uff01</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/#h_1","title":"\u666e\u901a\u7269\u7406\u5b66(H)","text":"<p>\u6709\u70b9\u96be\u8bf4\u771f\u7684\uff0c\u4e2a\u4eba\u611f\u89c9\u666e\u7269\u4e00\u76f8\u5bf9\u8bba\u5185\u5bb9\u6bd4\u8f83\u62bd\u8c61\uff0c\u666e\u7269\u4e8c\u7684\u7535\u548c\u78c1\u975e\u5e38\u6709\u8da3\uff0c\u6240\u4ee5\u7b14\u8005\u666e\u7269\u4e00\u53d6\u5f97\u4e86\u4e00\u4e2a\u8d85\u70c2\u7684\u7ee9\u70b9\uff0c\u666e\u7269\u4e8c\u86ee\u4e0d\u9519\u7684\u3002\u8001\u5e08\u53ea\u6709PPT\uff0c\u6ca1\u6709\u6559\u6750\uff0c\u5728\u8fd9\u91cc\u62f7\u8d1d\u4e86\u4f18\u79c0\u540c\u5b66\u7684\u7b14\u8bb0\uff0c\u4f9b\u6b23\u8d4f\u3002</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/#_1","title":"\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1","text":"<p>\u4e0d\u7b97\u5f88\u96be\u7684\u4e00\u95e8\u8bfe\uff0c\u6ca1\u6709\u7b14\u8bb0\uff0c\u6211\u4e5f\u62f7\u8d1d\u4e86\u4f18\u79c0\u540c\u5b66\u7684\u3002</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/#_2","title":"\u79bb\u6563\u6570\u5b66","text":"<p>\u4e0b\u5b66\u671f\u5f00\u59cb\u5b66\u4e60\u8fd9\u95e8\u8bfe\uff0c\u6211\u8981\u52a0\u6cb9\uff01</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/#_3","title":"\u5de5\u7a0b\u56fe\u5b66","text":"<p>\u4e0b\u5b66\u671f\u5f00\u59cb\u5b66\u4e60\u8fd9\u95e8\u8bfe\uff0c\u6211\u8981\u52a0\u6cb9\u6cb9\uff01</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/","title":"\u6570\u5b66\u5206\u6790","text":"<p>\u8fd9\u91cc\u4ec0\u4e48\u4e5f\u6ca1\u6709\uff01\uff01\uff01</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AD%A6/","title":"\u666e\u901a\u7269\u7406\u5b66","text":"<p>\u8fd9\u91cc\u53ea\u6709\u5173\u4e8e\u666e\u901a\u7269\u7406\u5b66\u4e8c\u7684\u5185\u5bb9\uff01 \u53c2\u8003RoderickShao's notebook</p>"},{"location":"%E9%80%9A%E8%AF%86%E9%80%89%E4%BF%AE%E8%AF%BE/Introduction/","title":"Introduction","text":"<p>\u901a\u8bc6\u9009\u4fee\u8bfe\u9700\u8981\u670910.5\u5b66\u5206\uff0c\u5305\u62ec\u535a\u96c5\u6280\u827a\u3001\u901a\u8bc6\u6838\u5fc3\u3001\u901a\u8bc6\u9009\u4fee\u6a21\u5757\u7b49\u7b49\u3002</p> <p>\u6b64\u5916\uff0c\u8fd8\u6709\u521b\u65b0\u521b\u4e1a\u7c7b\u3001\u5fc3\u7406\u7c7b\u7b49\u5404\u79cd\u8bfe\u7a0b\uff0c\u6bcf\u4e00\u5c4a\u8fd8\u90fd\u4e0d\u4e00\u6837\uff0c\u672c\u4eba\u5c31\u628a\u81ea\u5df1\u4e0a\u8fc7\u7684\u8bfe\u7a0b\u653e\u8fdb\u6765\u5427\u3002</p>"}]}