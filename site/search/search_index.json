{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to Younger's Notebook!","text":""},{"location":"#_1","title":"\u968f\u4fbf\u804a\u804a","text":"<p>\u7b14\u8005\u662f\u4e00\u540d\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u4e13\u4e1a\u7684\u5b66\u751f\uff0c\u6765\u81ea\u6d59\u6c5f\u5927\u5b66\u7afa\u9662\u6df7\u5408\u73ed23\u7ea7\uff0c\u4eca\u5e74\u5927\u4e8c\u3002</p> <p>\u5728\u8fd9\u51e0\u5e74\u7684\u5b66\u4e60\u751f\u6d3b\u4e2d\uff0c\u65e9\u6709\u60f3\u901a\u8fc7\u535a\u5ba2\u7684\u5f62\u5f0f\uff0c\u5c06\u81ea\u5df1\u7684\u5b66\u4e60\u8d44\u6599\u548c\u5b66\u4e60\u5fc3\u5f97\u5206\u4eab\u5230\u7f51\u4e0a\u7684\u7ecf\u5386\u3002\u7ec8\u4e8e\u5728\u6b64\u4ed8\u8bf8\u4e8e\u5b9e\u8df5\uff0c\u5176\u5b9e\u6709\u4e9b\u8fdf\u4e86\uff0c\u90e8\u5206\u8bfe\u7a0b\u5c31\u53ea\u597d\u62f7\u8d1d\u5176\u4ed6\u4f18\u79c0\u540c\u5b66\u7684\u7b14\u8bb0\u4e86\u3002</p> <p>\u6211\u7684\u535a\u5ba2\u7a7a\u95f4\u91cc\u9762\u653e\u7f6e\u4e86\u5404\u95e8\u8bfe\u7a0b\u7684\u5b66\u4e60\u8d44\u6599\u3001\u7b14\u8bb0\u548c\u5386\u5e74\u5377\u7b49\uff0c\u5982\u6709\u9519\u8bef\uff0c\u6b22\u8fce\u5404\u4f4d\u6279\u8bc4\u4e0e\u6307\u6b63\uff01</p> <p>\u535a\u5ba2\u8fd8\u6709\u4e00\u4e9b\u6211\u81ea\u5df1\u7684\u968f\u7b14\u548c\u5927\u5b66\u751f\u6d3b\u7684\u611f\u60f3\uff0c\u5e0c\u671b\u5bf9\u5404\u4f4d\u6709\u5e2e\u52a9\uff01</p>"},{"location":"LeetCode/Introduction/","title":"Introduction","text":"<p>\u529b\u6263\u529b\u6263\uff01\u52a0\u6cb9\u5427</p> <p>\u4e0d\u79ef\u8dec\u6b65\u65e0\u4ee5\u81f3\u5343\u91cc~~</p>"},{"location":"LeetCode/chapter1/","title":"1.\u4e24\u6570\u4e4b\u548c","text":"<p>\u54c8\u5e0c\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n) <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        unordered_map&lt;int,int&gt; hash;\n        int i;\n        for(i=0;i&lt;nums.size();i++){\n            auto it = hash.find(target-nums[i]);\n            if(it != hash.end()){\n                return {it-&gt;second,i};\n            }\n            hash[nums[i]]=i;\n        }\n        return {};\n    }\n};\n</code></pre> map\u7b2c\u4e00\u4e2a\u662f\u952e\u503c\uff0c\u7b2c\u4e8c\u4e2a\u662f\u503c\uff0c\u6211\u4eec\u7684\u54c8\u5e0c\u8868\u5c06\u5177\u4f53\u6570\u5b57\u4f5c\u4e3a\u952e\u503c\uff0c\u7d22\u5f15\u4f5c\u4e3a\u503c\uff0chash.find\u51fd\u6570\u627e\u952e\u503c\u7684\u590d\u6742\u5ea6\u4e3aO(1)\uff0c\u975e\u5e38\u597d\u7528\u3002\u82e5\u6ca1\u627e\u5230\uff0c\u5c31\u628a\u8fd9\u7ec4\u952e\u503c\u548c\u503c\u585e\u5165\u54c8\u5e0c\u8868\u4e2d\uff0c\u4ee5\u4fbf\u4e0b\u6b21\u67e5\u627e\u3002</p> <p>\u5173\u4e8eunordered_map\u7684\u5185\u5bb9\u3002</p> <p>\u793a\u4f8b\uff1a\u4f7f\u7528 <code>unordered_map</code> \u5b58\u50a8\u548c\u68c0\u7d22\u5b66\u751f\u5206\u6570</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;unordered_map&gt;\nint main() {\n    // \u521b\u5efa\u4e00\u4e2aunordered_map\uff0c\u952e\u662f\u5b66\u751f\u7684\u59d3\u540d\uff08string\u7c7b\u578b\uff09\uff0c\u503c\u662f\u5b66\u751f\u7684\u5206\u6570\uff08int\u7c7b\u578b\uff09\n    std::unordered_map&lt;std::string, int&gt; studentScores;\n    // \u63d2\u5165\u4e00\u4e9b\u5b66\u751f\u7684\u5206\u6570\n    studentScores[\"Alice\"] = 85;\n    studentScores[\"Bob\"] = 90;\n    studentScores[\"Charlie\"] = 78;\n    // \u67e5\u627e\u5e76\u8f93\u51faAlice\u7684\u5206\u6570\n    std::string studentName = \"Alice\";\n    auto search = studentScores.find(studentName);\n    if (search != studentScores.end()) {\n        std::cout &lt;&lt; studentName &lt;&lt; \"'s score is \" &lt;&lt; search-&gt;second &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; studentName &lt;&lt; \" not found\" &lt;&lt; std::endl;\n    }\n    // \u904d\u5386unordered_map\u5e76\u8f93\u51fa\u6240\u6709\u5b66\u751f\u7684\u5206\u6570\n    std::cout &lt;&lt; \"All students' scores:\" &lt;&lt; std::endl;\n    for (const auto&amp; pair : studentScores) {\n        std::cout &lt;&lt; pair.first &lt;&lt; \": \" &lt;&lt; pair.second &lt;&lt; std::endl;\n    }\n    // \u5c1d\u8bd5\u5220\u9664\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u952e\n    studentScores.erase(\"David\");\n    // \u5220\u9664Bob\u7684\u8bb0\u5f55\n    if (studentScores.erase(\"Bob\") &gt; 0) {\n        std::cout &lt;&lt; \"Bob's record has been removed.\" &lt;&lt; std::endl;\n    }\n    // \u518d\u6b21\u904d\u5386unordered_map\n    std::cout &lt;&lt; \"Students' scores after removal:\" &lt;&lt; std::endl;\n    for (const auto&amp; pair : studentScores) {\n        std::cout &lt;&lt; pair.first &lt;&lt; \": \" &lt;&lt; pair.second &lt;&lt; std::endl;\n    }\n    return 0;\n}\n</code></pre> <p>\u8be6\u89e3</p> <ol> <li>\u521b\u5efa <code>unordered_map</code>\uff1a    <pre><code>std::unordered_map&lt;std::string, int&gt; studentScores;\n</code></pre>    \u8fd9\u91cc\u521b\u5efa\u4e86\u4e00\u4e2a <code>unordered_map</code> \u5bb9\u5668\uff0c\u952e\u662f <code>std::string</code> \u7c7b\u578b\uff0c\u503c\u662f <code>int</code> \u7c7b\u578b\u3002</li> <li>\u63d2\u5165\u5143\u7d20\uff1a    <pre><code>studentScores[\"Alice\"] = 85;\nstudentScores[\"Bob\"] = 90;\nstudentScores[\"Charlie\"] = 78;\n</code></pre>    \u901a\u8fc7\u952e\u503c\u5bf9\u7684\u65b9\u5f0f\u63d2\u5165\u6570\u636e\u3002\u6bcf\u4e2a\u5b66\u751f\u7684\u59d3\u540d\u4f5c\u4e3a\u952e\uff0c\u5206\u6570\u4f5c\u4e3a\u503c\u3002</li> <li>\u67e5\u627e\u5143\u7d20\uff1a    <pre><code>auto search = studentScores.find(studentName);\n</code></pre>    \u4f7f\u7528 <code>find</code> \u65b9\u6cd5\u6765\u67e5\u627e\u952e\u4e3a \"Alice\" \u7684\u5143\u7d20\u3002\u5982\u679c\u627e\u5230\u4e86\uff0c<code>find</code> \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u6307\u5411\u8fd9\u4e2a\u5143\u7d20\uff1b\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u6307\u5411 <code>unordered_map</code> \u7684 <code>end()</code>\u3002</li> <li>\u8bbf\u95ee\u503c\uff1a    <pre><code>if (search != studentScores.end()) {\n    std::cout &lt;&lt; studentName &lt;&lt; \"'s score is \" &lt;&lt; search-&gt;second &lt;&lt; std::endl;\n}\n</code></pre>    \u5982\u679c\u627e\u5230\u4e86\u5143\u7d20\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee\u952e\u503c\u5bf9\u4e2d\u7684\u503c\uff08<code>search-&gt;second</code>\uff09\u3002</li> <li>\u904d\u5386 <code>unordered_map</code>\uff1a    <pre><code>for (const auto&amp; pair : studentScores) {\n    std::cout &lt;&lt; pair.first &lt;&lt; \": \" &lt;&lt; pair.second &lt;&lt; std::endl;\n}\n</code></pre>    \u4f7f\u7528\u8303\u56f4 <code>for</code> \u5faa\u73af\u904d\u5386 <code>unordered_map</code>\u3002<code>pair</code> \u662f\u4e00\u4e2a\u952e\u503c\u5bf9\uff0c<code>pair.first</code> \u662f\u952e\uff0c<code>pair.second</code> \u662f\u503c\u3002</li> <li>\u5220\u9664\u5143\u7d20\uff1a    <pre><code>studentScores.erase(\"David\");\n</code></pre>    \u5c1d\u8bd5\u5220\u9664\u952e\u4e3a \"David\" \u7684\u5143\u7d20\uff0c\u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002    <pre><code>if (studentScores.erase(\"Bob\") &gt; 0) {\n    std::cout &lt;&lt; \"Bob's record has been removed.\" &lt;&lt; std::endl;\n}\n</code></pre>    \u5220\u9664\u952e\u4e3a \"Bob\" \u7684\u5143\u7d20\uff0c<code>erase</code> \u65b9\u6cd5\u8fd4\u56de\u5220\u9664\u7684\u5143\u7d20\u6570\u91cf\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u56e0\u4e3a \"Bob\" \u5b58\u5728\uff0c\u6240\u4ee5\u8fd4\u56de 1\uff0c\u5e76\u8f93\u51fa\u5220\u9664\u4fe1\u606f\u3002</li> <li>\u518d\u6b21\u904d\u5386 <code>unordered_map</code>\uff1a    <pre><code>for (const auto&amp; pair : studentScores) {\n    std::cout &lt;&lt; pair.first &lt;&lt; \": \" &lt;&lt; pair.second &lt;&lt; std::endl;\n}\n</code></pre>    \u518d\u6b21\u904d\u5386 <code>unordered_map</code>\uff0c\u6b64\u65f6 \"Bob\" \u7684\u8bb0\u5f55\u5df2\u7ecf\u88ab\u5220\u9664\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u5c55\u793a\u4e86 <code>unordered_map</code> \u7684\u57fa\u672c\u7528\u6cd5\uff0c\u5305\u62ec\u63d2\u5165\u3001\u67e5\u627e\u3001\u904d\u5386\u548c\u5220\u9664\u64cd\u4f5c\u3002\u7531\u4e8e <code>unordered_map</code> \u4e0d\u4fdd\u8bc1\u5143\u7d20\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u8f93\u51fa\u7684\u987a\u5e8f\u53ef\u80fd\u4e0e\u63d2\u5165\u7684\u987a\u5e8f\u4e0d\u540c\u3002</li> </ol>"},{"location":"LeetCode/chapter1/#_1","title":"\u65e0\u91cd\u590d\u6570\u5b57\u7684\u6700\u957f\u5b50\u4e32","text":"<pre><code>class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        unordered_set&lt;char&gt; a;\n        int right=-1;\n        int i;\n        int ans=0;\n        int n=s.size();\n\n        for(i=0;i&lt;n;i++){           \n            if(i!=0){\n                a.erase(s[i-1]);\n            }\n\n            while(right&lt;n-1&amp;&amp;!a.count(s[right+1])){\n                a.insert(s[right+1]);\n                right++;\n            }\n\n\n            ans=max(ans,right-i+1);\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u8fd9\u9898\u4e2dunordered_set\u662f\u4e00\u4e32\u65e0\u5e8f\u4e32\uff0c\u63d2\u5165\u67e5\u627e\u7b49\u590d\u6742\u5ea6\u90fd\u662fO(1)\uff0c\u6700\u597d\u4e00\u5f00\u59cb\u5c31\u5b9a\u4e49int n=s.size()\uff0c\u540e\u9762\u90fd\u7528n\u4ee3\u66ff\uff0c\u5982\u679c\u4e0d\u662f\u8fd9\u6837\u53ef\u80fd\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3as.size()\u8fd4\u56desize_t\u3002\u540c\u65f6\u8fd8\u6709s.erase(),s.insert(),s.count()\u7b49\u51fd\u6570\u597d\u7528\uff0c\u641e\u6e05\u695a\u7528\u719f\u7ec3\u5373\u53ef\u3002</p>"},{"location":"LeetCode/chapter1/#_2","title":"\u6700\u957f\u56de\u6587\u5b50\u4e32","text":"<p><pre><code>class Solution {\npublic:\n    string longestPalindrome(string s) {\n        int n=s.size();\n        if(n&lt;=1) return s;\n\n        //vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n));\n        int dp[n][n];\n        int begin=0;\n        int maxlen =1;\n\n        for(int i=0;i&lt;n;i++) dp[i][i]=1;\n\n        for(int l=2;l&lt;=n;l++){\n            for(int i = 0;i &lt; n;i++){\n                int j= l+i-1;\n                if(j&gt;=n) break;\n                if(s[i]!=s[j]) {dp[i][j]=0;}\n                else{\n                    if(j-i&lt;3)dp[i][j]=1;\n                    else dp[i][j]=dp[i+1][j-1];\n                }\n\n\n                if(dp[i][j]&amp;&amp;j-i+1&gt;maxlen){\n                    begin=i;\n                    maxlen=j-i+1;\n                }\n            }\n        }\n\n        return s.substr(begin,maxlen);\n    }\n};\n</code></pre> \u52a8\u6001\u89c4\u5212\u90e8\u5206\u633a\u7ecf\u5178\u7684\uff0c\u53ef\u4ee5\u91cd\u65b0\u505a\u3002\u540c\u65f6\uff0c\u5173\u6ce8\u5b57\u7b26\u4e32\u5b50\u4e32\u7684\u8868\u793a\u4e3as.substr(begin,len).</p>"},{"location":"LeetCode/chapter1/#7","title":"7.\u6574\u6570\u53cd\u8f6c","text":"<pre><code>class Solution {\npublic:\n    int reverse(int x) {\n        int ans = 0;\n        int n;\n        while (x!=0){\n            if (ans &lt; INT_MIN / 10 || ans &gt; INT_MAX / 10) {\n                return 0;\n            }\n\n            n = x % 10;\n            x/=10;\n            ans = ans*10+n;\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u5728\u60a8\u63d0\u4f9b\u7684\u4ee3\u7801\u4e2d\uff0c<code>if (ans &lt; INT_MIN / 10 || ans &gt; INT_MAX / 10)</code> \u8fd9\u4e00\u884c\u662f\u7528\u6765\u68c0\u67e5\u6574\u6570\u6ea2\u51fa\u7684\u3002\u5728\u53cd\u8f6c\u6574\u6570\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c <code>ans</code> \u7684\u503c\u8d85\u51fa\u4e86 <code>int</code> \u7c7b\u578b\u7684\u8303\u56f4\uff0c\u90a3\u4e48\u4e58\u4ee5 10 \u5e76\u52a0\u4e0a\u65b0\u7684\u6570\u5b57 <code>n</code> \u5c06\u4f1a\u5bfc\u81f4\u6ea2\u51fa\u3002 \u8fd9\u91cc\u662f\u8be6\u7ec6\u89e3\u91ca\uff1a - <code>INT_MIN</code> \u548c <code>INT_MAX</code> \u662f\u5b9a\u4e49\u5728 <code>&lt;climits&gt;</code> \u5934\u6587\u4ef6\u4e2d\u7684\u5b8f\uff0c\u5206\u522b\u8868\u793a <code>int</code> \u7c7b\u578b\u80fd\u8868\u793a\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002 - \u5f53\u4f60\u5c1d\u8bd5\u53cd\u8f6c\u4e00\u4e2a\u6574\u6570\u65f6\uff0c\u4f8b\u5982\u5c06 <code>123</code> \u53cd\u8f6c\u4e3a <code>321</code>\uff0c\u6bcf\u6b21\u5faa\u73af\u4e2d\u4f60\u90fd\u4f1a\u5c06\u5f53\u524d\u7684 <code>ans</code> \u4e58\u4ee5 10\uff0c\u7136\u540e\u52a0\u4e0a\u65b0\u7684\u6570\u5b57\u3002\u5982\u679c <code>ans</code> \u5df2\u7ecf\u63a5\u8fd1 <code>INT_MAX</code> \u6216 <code>INT_MIN</code>\uff0c\u518d\u4e58\u4ee5 10 \u5c31\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6ea2\u51fa\u3002 \u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u4ee3\u7801\u5728\u6bcf\u6b21\u5faa\u73af\u4e4b\u524d\u68c0\u67e5 <code>ans</code> \u662f\u5426\u5728\u5b89\u5168\u8303\u56f4\u5185\u3002\u5177\u4f53\u6765\u8bf4\uff1a - <code>ans &lt; INT_MIN / 10</code> \u68c0\u67e5 <code>ans</code> \u662f\u5426\u5c0f\u4e8e <code>int</code> \u7c7b\u578b\u6700\u5c0f\u503c\u7684\u5341\u5206\u4e4b\u4e00\u3002\u5982\u679c\u662f\u8fd9\u6837\uff0c\u90a3\u4e48\u5728\u4e58\u4ee5 10 \u540e\u52a0\u4e0a\u4efb\u4f55\u8d1f\u6570\uff08\u56e0\u4e3a <code>n</code> \u662f <code>x</code> \u7684\u6700\u540e\u4e00\u4f4d\u6570\u5b57\uff0c<code>x</code> \u662f\u8d1f\u6570\u65f6 <code>n</code> \u4e5f\u662f\u8d1f\u6570\uff09\u90fd\u4f1a\u5bfc\u81f4\u6ea2\u51fa\u3002 - <code>ans &gt; INT_MAX / 10</code> \u68c0\u67e5 <code>ans</code> \u662f\u5426\u5927\u4e8e <code>int</code> \u7c7b\u578b\u6700\u5927\u503c\u7684\u5341\u5206\u4e4b\u4e00\u3002\u5982\u679c\u662f\u8fd9\u6837\uff0c\u90a3\u4e48\u5728\u4e58\u4ee5 10 \u540e\u52a0\u4e0a\u4efb\u4f55\u6b63\u6570\u90fd\u4f1a\u5bfc\u81f4\u6ea2\u51fa\u3002 \u5982\u679c <code>ans</code> \u8d85\u51fa\u4e86\u8fd9\u4e2a\u8303\u56f4\uff0c\u51fd\u6570\u5c31\u4f1a\u8fd4\u56de 0\uff0c\u8868\u793a\u53d1\u751f\u4e86\u6ea2\u51fa\uff0c\u53cd\u8f6c\u64cd\u4f5c\u65e0\u6cd5\u8fdb\u884c\u3002\u8fd9\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u6ea2\u51fa\u68c0\u67e5\u65b9\u6cd5\uff0c\u53ef\u4ee5\u786e\u4fdd\u5728\u53cd\u8f6c\u6574\u6570\u65f6\u4e0d\u4f1a\u8d85\u51fa <code>int</code> \u7c7b\u578b\u7684\u9650\u5236\u3002</p>"},{"location":"LeetCode/chapter1/#9","title":"9.\u56de\u6587\u6570","text":"<pre><code>class Solution {\npublic:\n    bool isPalindrome(int x) {\n        std::string a=to_string(x);\n        std::string b=a;\n        std::reverse(b.begin(),b.end());\n        //if(!std::strcmp(a,b)) return true;\n        //else return false;\n        return a==b;\n    }\n};\n</code></pre> <p>\u5173\u6ce8c\u98ce\u683c\u5b57\u7b26\u4e32\u548cc++\u6807\u51c6\u5b57\u7b26\u4e32\u7684\u533a\u522b\uff01</p> <p>C\u98ce\u683c\u5b57\u7b26\u4e32\u548cC++\u6807\u51c6\u5b57\u7b26\u4e32\uff08<code>std::string</code>\uff09\u5728\u591a\u4e2a\u65b9\u9762\u5b58\u5728\u5dee\u5f02\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4e3b\u8981\u7684\u533a\u522b\uff1a 1. \u7c7b\u578b\u548c\u5c01\u88c5:    - C\u98ce\u683c\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u4ee5 null \u5b57\u7b26 (<code>'\\0'</code>) \u7ed3\u5c3e\u7684\u5b57\u7b26\u6570\u7ec4\uff08<code>char[]</code>\uff09\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u7c7b\uff0c\u5b83\u5c01\u88c5\u4e86\u5b57\u7b26\u6570\u7ec4\u5e76\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u64cd\u4f5c\u5b57\u7b26\u4e32\u7684\u6210\u5458\u51fd\u6570\u3002 2. \u5185\u5b58\u7ba1\u7406:    - C\u98ce\u683c\u5b57\u7b26\u4e32\u9700\u8981\u624b\u52a8\u7ba1\u7406\u5185\u5b58\uff0c\u5305\u62ec\u5206\u914d\u3001\u91ca\u653e\u548c\u8c03\u6574\u5927\u5c0f\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u81ea\u52a8\u7ba1\u7406\u5185\u5b58\uff0c\u5b83\u4f1a\u6839\u636e\u9700\u8981\u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u3002 3. \u529f\u80fd:    - C\u98ce\u683c\u5b57\u7b26\u4e32\u7684\u529f\u80fd\u6709\u9650\uff0c\u901a\u5e38\u53ea\u80fd\u901a\u8fc7\u6807\u51c6\u5e93\u51fd\u6570\uff08\u5982 <code>strcpy</code>, <code>strlen</code>, <code>strcmp</code> \u7b49\uff09\u8fdb\u884c\u64cd\u4f5c\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u6210\u5458\u51fd\u6570\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e <code>append</code>, <code>find</code>, <code>replace</code>, <code>substr</code> \u7b49\uff0c\u4ee5\u53ca\u8fd0\u7b97\u7b26\u91cd\u8f7d\uff0c\u4f7f\u5f97\u5b57\u7b26\u4e32\u64cd\u4f5c\u66f4\u52a0\u65b9\u4fbf\u548c\u76f4\u89c2\u3002 4. \u5b89\u5168\u6027:    - C\u98ce\u683c\u5b57\u7b26\u4e32\u5bb9\u6613\u51fa\u9519\uff0c\u4f8b\u5982\u7f13\u51b2\u533a\u6ea2\u51fa\u3001\u5fd8\u8bb0\u6dfb\u52a0 null \u7ec8\u6b62\u5b57\u7b26\u7b49\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u66f4\u52a0\u5b89\u5168\uff0c\u56e0\u4e3a\u5b83\u4f1a\u68c0\u67e5\u8fb9\u754c\u5e76\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u9632\u6b62\u9519\u8bef\u3002 5. \u957f\u5ea6\u548c\u5bb9\u91cf:    - \u5bf9\u4e8eC\u98ce\u683c\u5b57\u7b26\u4e32\uff0c\u8981\u83b7\u53d6\u957f\u5ea6\u9700\u8981\u4f7f\u7528 <code>strlen</code> \u51fd\u6570\uff0c\u800c\u4e14\u6ca1\u6709\u76f4\u63a5\u7684\u65b9\u5f0f\u6765\u83b7\u53d6\u5bb9\u91cf\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u63d0\u4f9b\u4e86 <code>size()</code> \u6210\u5458\u51fd\u6570\u6765\u83b7\u53d6\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u4ee5\u53ca <code>capacity()</code> \u6765\u83b7\u53d6\u5f53\u524d\u5206\u914d\u7684\u5185\u5b58\u5bb9\u91cf\u3002 6. \u8fed\u4ee3\u5668:    - C\u98ce\u683c\u5b57\u7b26\u4e32\u6ca1\u6709\u63d0\u4f9b\u8fed\u4ee3\u5668\u6982\u5ff5\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u63d0\u4f9b\u4e86\u8fed\u4ee3\u5668\uff0c\u53ef\u4ee5\u7528\u4e8e\u6807\u51c6\u5e93\u7b97\u6cd5\uff0c\u5982 <code>std::sort</code> \u6216 <code>std::find</code>\u3002 7. \u6027\u80fd:    - C\u98ce\u683c\u5b57\u7b26\u4e32\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u66f4\u9ad8\u6548\uff0c\u5c24\u5176\u662f\u5728\u5904\u7406\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u65f6\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u7c7b\u5c01\u88c5\u5e26\u6765\u7684\u989d\u5916\u5f00\u9500\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u6027\u80fd\uff0c\u5c24\u5176\u662f\u5728\u590d\u6742\u64cd\u4f5c\u548c\u5185\u5b58\u7ba1\u7406\u65b9\u9762\u3002 8. \u517c\u5bb9\u6027:    - C\u98ce\u683c\u5b57\u7b26\u4e32\u53ef\u4ee5\u5728C\u548cC++\u4e2d\u4f7f\u7528\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u53ea\u80fd\u5728C++\u4e2d\u4f7f\u7528\u3002 9. \u6784\u9020\u548c\u9500\u6bc1:    - C\u98ce\u683c\u5b57\u7b26\u4e32\u901a\u5e38\u4e0d\u9700\u8981\u663e\u5f0f\u7684\u6784\u9020\u548c\u9500\u6bc1\u8fc7\u7a0b\u3002    - C++\u6807\u51c6\u5b57\u7b26\u4e32\u6709\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\uff0c\u5b83\u4eec\u5728\u521b\u5efa\u548c\u9500\u6bc1\u5bf9\u8c61\u65f6\u88ab\u8c03\u7528\u3002 \u8fd9\u4e9b\u533a\u522b\u4f7f\u5f97C++\u6807\u51c6\u5b57\u7b26\u4e32\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u66f4\u65b9\u4fbf\u3001\u66f4\u5b89\u5168\u3001\u66f4\u7075\u6d3b\uff0c\u800cC\u98ce\u683c\u5b57\u7b26\u4e32\u5728\u67d0\u4e9b\u7279\u5b9a\u7684\u5e94\u7528\u4e2d\u53ef\u80fd\u66f4\u8f7b\u91cf\u7ea7\u548c\u9ad8\u6548\u3002</p>"},{"location":"LeetCode/chapter1/#c","title":"\u5173\u4e8ec++\u6807\u51c6\u5b57\u7b26\u4e32\u51fd\u6570","text":"<p>csdn\u4e0a\u8bb2\u7684\u597d\uff0cclick here</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/","title":"CS106l","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#_1","title":"\u5199\u5728\u524d\u9762\u7684\u8bdd","text":"<p>\u9996\u5148\u662f\u8bfe\u7a0b\u7f51\u5740\uff0ccs106l</p> <p>\u5176\u6b21\u662fcpp.reference\u7f51\u7ad9 \u8bb0\u5f97\u6302\u68af\u5b50\u54e6</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture1beginning","title":"lecture1\uff1abeginning","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#for-the-std","title":"for the std","text":"<p>std and &lt; bits/stdc++.h &gt; the CSDN web is here,click this</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#find-the-sum-of-a-vector","title":"Find the sum of a vector","text":"<pre><code>//version 1\nvector&lt;int&gt; vec ={1,2,3};\nint sum =0;\nfor(auto val :vec){\n    sum +=val;\n}\n\n//version 2\nvector&lt;int&gt; vec={1,2,3};\nint sum=0;\nfor(const auto&amp;val  :vec){\n    sum +=val;\n}\n\n//version 3\nvector&lt;int&gt; vec={1,2,3};\nint sum= std::accummulate(vec.begin(),vec.end(),0);\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#hello-world","title":"Hello world!","text":"<pre><code>#include&lt;iostream&gt;\nint hello_cpp(){\n    std::cout&lt;&lt;\"hello world!\"&lt;&lt;std::endl;\n}\n\n#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\nint hello_c(){\n    printf(\"%s\",\"hello world!\");\n}\n//two versions are equal\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture-2","title":"lecture 2","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#string","title":"string","text":"<pre><code>int main(){\n    string str=\"Hello world!\";\n    cout::str::endl;//print the string\n    cout::str[1]::endl;//print \"e\"\n    str[1]='i';//change the char\n\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#stream","title":"stream","text":"<p>\u8f93\u51fa\u6d41 <pre><code>int main(){\n    ostringstream oss(\"Ito-En Green Tea\");\n    cout &lt;&lt; oss.str()&lt;&lt; endl;//Tto-En Green Tea;\n    oss &lt;&lt; \"16,9 Ounces\";//16.9 Ouncesn Tea\n    //\u8fd9\u4e2a\u6d41\u662f\u4ece\u5de6\u5f00\u59cb\u505abuffer\u8fdb\u884c\u66ff\u6362\u7684\n\n    ostringstream oss(\"Ito-En Green Tea\",ostringstream::ate);\n    cout &lt;&lt; oss.str()&lt;&lt; endl;//Tto-En Green Tea;\n    oss &lt;&lt; \"16,9 Ounces\";//\n    //\u8fd9\u4e2a\u6d41\u662f\u4ece\u53f3\u5f00\u59cb\u505abuffer\u8fdb\u884c\u66ff\u6362\u7684\n\n    isstringstream iss(\"16.9 Ounces\");\n    double amount;\n    string unit;\n    iss &gt;&gt; amount;//amount get 16.9 as a double\n    iss &gt;&gt; unit;\n    cout &lt;&lt; amount/2 &lt;&lt; endl; //8.45?\n\n    isstringstream iss(\"16.9 Ounces\");\n    int amount;\n    string unit;\n    iss &gt;&gt; amount;\n    iss &gt;&gt; unit;//this two lines can be combined as iss &gt;&gt; amount &gt;&gt; unit\n    cout &lt;&lt; amount/2 &lt;&lt; \" \" &lt;&lt; unit &lt;&lt; endl; //8 .9 \n    //\u4e00\u4e2a\u6307\u9488\u4ece\u5934\u5f00\u59cb\u5f80\u53f3\u79fb\u52a8\uff0cfirst stop at 6,and amount gets 16, then a bubble, then unit gets .9,so the result outputs 8 .9\n\n}\n</code></pre></p> <p>string to integer <pre><code>int stringToInteger(const string&amp; s){\n    istringstream iss(s);\n    int result;\n    iss &gt;&gt; result;\n\n    return result;\n}\n</code></pre></p> <p>we can use manipulators to pad the output. <pre><code>cout &lt;&lt; \"[\" &lt;&lt; setw(10) &lt;&lt; \"Ito\" &lt;&lt; \"]\";\n//output:[          Ito]\ncout &lt;&lt; \"[\" &lt;&lt; left &lt;&lt; setw(10) &lt;&lt; \"Ito\" &lt;&lt;  \"]\";\n//output:[Ito          ]\ncout &lt;&lt; \"[\" &lt;&lt; left &lt;&lt; setfill('-') &lt;&lt; setw(10) &lt;&lt; \"Ito\" &lt;&lt; \"]\";\n//output:[Ito----------]\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture-3-type-and-advanced-streams","title":"lecture 3: type and advanced streams","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#cin-and-cout","title":"cin and cout","text":"<pre><code>cout &lt;&lt; \"What is your name?\";\ncin &gt;&gt; name;\ngetline(cin,name);\n</code></pre> <pre><code>int getInteger(const string&amp; prompt){\n    string line;\n    getline(cin,line);\n\n    istringstream iss(line);\n    int val;\n    iss &gt;&gt; val;\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#auto","title":"auto","text":"<p>automatically help you be lazy</p> <pre><code>auto prices = make_pair(3.4,5); //pair&lt;double,int&gt;\nauto values = make_tuple(3,4,\"hi\"); //tuple&lt;int,int,char*&gt;\n\nprices.first = prices.second; //prices = {5.0,5};\nget&lt;0&gt;(values) = get&lt;1&gt;(values); //values = {4,4,\"hi\"};\n\nauto [a,b] = prices; //a,b are copies of 5.0 and 5;\nconst auto&amp; [x,y,z]=values; //x,y,z are const references to the 4,4, and \"hi\";\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture-4-sequence-container","title":"lecture 4: sequence container","text":"<p>review the structure first <pre><code>struct PriceRange{\n    int min;\n    int max;\n}\n\nstruct Course{\n    string code;\n    Time startTime;\n    Time endTime;\n    vector&lt;string&gt;instructors;\n}\n</code></pre></p> <p>initialization <pre><code>int main(){\n    vector&lt;int&gt; vec{3,1,4,1,5,9};\n    Course now{\"CS106L\",{15,30},{16,30},{\"Wang\",\"Zeng\"}};\n}\n</code></pre> <pre><code>int main(){\n    vector&lt;int&gt; vec1{3}; // vector = {3}\n    vector&lt;int&gt; vec2(3); // vector = {0,0,0}\n}\n</code></pre></p> <p>caution:Use Thoughtfully When should I use a stringstream? 1. Proccessing strings    1. simplify \"/./a/b/..\"to\"/a\" 2. Formatting input/output    1. ippercase,hex,and other stream manipulators 3. Parsing different types    1. stringToLinteger() from previous lectures</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#stl","title":"STL\u5e93","text":"<p>example of the bubble sort the usual type is here: <pre><code>int main(){\n    vector&lt;int&gt; vec(20);\n    for(size_t i=0;i&lt; vec.size(); i++){\n        vec[i]=rand();\n    }\n\n    doBubbleSort(vec);\n\n    for(size_t i=0;i&lt;vec.size();i++){\n        cout &lt;&lt; vec[i]  &lt;&lt; endl;\n    }\n}\n\nvoid doBubbleSort(vector&lt;int&gt; &amp;v){\n    for(size_t i=0;i&lt;v.size()-1;i++){\n        for(size_t j=0;j&lt;size(()-i-1;j++){\n            if(v[j]&gt;v[j+1]){\n                int temp =v[j];\n                v[j]=v[j+1];\n                v[j+1]=tmp;\n            }\n        }\n    }\n}\n</code></pre></p> <p>the STL type is here: <pre><code>int main(){\n    vector&lt;int&gt; vec(20);\n    std::generate(vec.begin(),vec.end(),rand);\n    std::sort(vec.begin(),vec.end());\n    std::copy(vec.begin(),vec.end(),std::ostream_iterator&lt;int&gt;(cout,\"\\n\"));\n}\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#sequence-container","title":"sequence container","text":"<p>provides access to sequences of elements includes: std::vector &lt; T &gt; std::dequet &lt; T &gt; std::list &lt; T &gt; std::array &lt; T &gt; std::forward_list &lt; T &gt;</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#stdvector-t","title":"std::vector&lt; T &gt;","text":"<p>a vector represents a sequence of elements of any type.You specify the type when using the vector: <pre><code>std::vector&lt; int &gt; vecInt;//vector of ints\nstd::vector&lt; string &gt; vecStr;//vector of string\nstd::vector&lt; mystruct &gt; vecStruct;//vector of mystructs\nstd::vector&lt; std::vector&lt; string &gt; &gt; vecOfVec // vector of vector&lt;string&gt;\n</code></pre></p> <p>summary of Stanford vector&lt; t &gt; vs std::vector&lt; T &gt; </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#stddeque-t","title":"std::deque&lt; T &gt;","text":"<p>cpp reference explain deque ,click here</p> <p><pre><code>#include &lt;deque&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    // Create a deque containing integers\n    std::deque&lt;int&gt; d = {7, 5, 16, 8};\n\n    // Add an integer to the beginning and end of the deque\n    d.push_front(13);\n    d.push_back(25);\n\n    // Iterate and print values of deque\n    for (int n : d)\n        std::cout &lt;&lt; n &lt;&lt; ' ';\n    std::cout &lt;&lt; '\\n';\n}\n</code></pre> <pre><code>output : 13 7 5 16 8 25\n</code></pre></p> <p>vector is the type of sequence that should be used by default...deque is the data structrue of choice when most insertions and deletions take place at the beginning or at the end of sequence.  </p> <p>in general,a graph could tell the difference between the vector and the deque </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#the-stack-and-the-queue","title":"the stack and the queue","text":"<p> so the stack and the queue are just a special case of the vector and the deque.</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture5-associative-container","title":"lecture5: Associative Container","text":"<p>have no idea of a sequence.  data is accessed using the key instead of indexes.  includes:  <pre><code>std::map&lt; T1,T2 &gt;\nstd::set&lt; T &gt;\nstd::unordered_map&lt; T1,T2 &gt;\nstd::unoedered_set&lt; T &gt;\n</code></pre>  map/set:Keys in sorted order,faster to iterate through a range of elements.</p> <p>Unordered map/set:faster to access individual elements by key.</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#iterator","title":"iterator","text":"<p>\u5728 C++ \u4e2d\uff0c\u8fed\u4ee3\u5668\u662f\u4e00\u79cd\u68c0\u67e5\u5bb9\u5668\u5185\u5143\u7d20\u5e76\u904d\u5386\u5bb9\u5668\u7684\u5bf9\u8c61\u3002\u8fed\u4ee3\u5668\u53ef\u4ee5\u88ab\u89c6\u4e3a\u6307\u5411\u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u6307\u9488\u3002\u5b83\u4eec\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u5f0f\u6765\u8bbf\u95ee\u5bb9\u5668\u4e2d\u7684\u6570\u636e\uff0c\u800c\u4e0d\u9700\u8981\u66b4\u9732\u5bb9\u5668\u7684\u5185\u90e8\u7ed3\u6784\u3002C++ \u6807\u51c6\u5e93\u4e2d\u7684\u6240\u6709\u5bb9\u5668\u7c7b\u578b\uff08\u5982 vector, list, map, set \u7b49\uff09\u90fd\u63d0\u4f9b\u4e86\u8fed\u4ee3\u5668\u3002</p> <p>\u4ee5\u4e0b\u662f\u5173\u4e8e C++ \u8fed\u4ee3\u5668\u7684\u4e00\u4e9b\u57fa\u672c\u6982\u5ff5\uff1a</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#_2","title":"\u8fed\u4ee3\u5668\u7684\u7c7b\u578b","text":"<p>\u8f93\u5165\u8fed\u4ee3\u5668: \u63d0\u4f9b\u4e86\u5bf9\u6570\u636e\u7684\u53ea\u8bfb\u8bbf\u95ee\u3002\u53ef\u4ee5\u7528\u6765\u8bfb\u53d6\u6570\u636e\uff0c\u4f46\u4e0d\u80fd\u7528\u6765\u4fee\u6539\u6570\u636e\u3002\u4f8b\u5982\uff0c\u6d41\u8fed\u4ee3\u5668\u5c31\u662f\u8f93\u5165\u8fed\u4ee3\u5668\u3002 \u8f93\u51fa\u8fed\u4ee3\u5668: \u63d0\u4f9b\u4e86\u5bf9\u6570\u636e\u7684\u53ea\u5199\u8bbf\u95ee\u3002\u53ef\u4ee5\u7528\u6765\u4fee\u6539\u6570\u636e\uff0c\u4f46\u4e0d\u80fd\u7528\u6765\u8bfb\u53d6\u6570\u636e\u3002 \u524d\u5411\u8fed\u4ee3\u5668: \u63d0\u4f9b\u4e86\u8bfb\u5199\u64cd\u4f5c\uff0c\u5e76\u4e14\u53ef\u4ee5\u5411\u524d\u63a8\u8fdb\u8fed\u4ee3\u5668\u3002\u4f46\u662f\uff0c\u5b83\u4e0d\u652f\u6301\u540e\u9000\u64cd\u4f5c\u3002 \u53cc\u5411\u8fed\u4ee3\u5668: \u9664\u4e86\u524d\u5411\u8fed\u4ee3\u5668\u7684\u529f\u80fd\u5916\uff0c\u8fd8\u652f\u6301\u5411\u540e\u79fb\u52a8\u8fed\u4ee3\u5668\u3002 \u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668: \u63d0\u4f9b\u4e86\u5b8c\u5168\u7684\u8bfb\u5199\u64cd\u4f5c\uff0c\u53ef\u4ee5\u5411\u524d\u5411\u540e\u79fb\u52a8\uff0c\u5e76\u4e14\u652f\u6301\u8df3\u8dc3\u8bbf\u95ee\uff08\u5982\u901a\u8fc7\u7d22\u5f15\u8bbf\u95ee\uff09\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#_3","title":"\u8fed\u4ee3\u5668\u7684\u57fa\u672c\u64cd\u4f5c","text":"<p>begin()\uff1a \u8fd4\u56de\u6307\u5411\u5bb9\u5668\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 end()\uff1a \u8fd4\u56de\u6307\u5411\u5bb9\u5668\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\uff0c\u901a\u5e38\u7528\u4e8e\u6807\u8bb0\u8fed\u4ee3\u5668\u7684\u7ed3\u675f\u3002 ++\uff1a \u7528\u6765\u63a8\u8fdb\u8fed\u4ee3\u5668\u5230\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002 \uff1a\u7528\u6765\u89e3\u5f15\u7528\u8fed\u4ee3\u5668\uff0c\u8bbf\u95ee\u5b83\u6240\u6307\u5411\u7684\u5143\u7d20\u3002 == \u548c !=\uff1a* \u7528\u6765\u6bd4\u8f83\u4e24\u4e2a\u8fed\u4ee3\u5668\u662f\u5426\u76f8\u7b49\u6216\u4e0d\u76f8\u7b49\u3002</p> <p>\u793a\u4f8b \u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f7f\u7528\u8fed\u4ee3\u5668\u904d\u5386 vector \u7684\u7b80\u5355\u793a\u4f8b\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n\nint main() {\n    std::vector&lt;int&gt; vec = {1, 2, 3, 4, 5};\n\n    // \u4f7f\u7528\u8fed\u4ee3\u5668\u904d\u5386 vector\n    for (std::vector&lt;int&gt;::iterator it = vec.begin(); it != vec.end(); ++it) {\n        std::cout &lt;&lt; *it &lt;&lt; ' ';\n    }\n    std::cout &lt;&lt; '\\n';\n\n    return 0;\n}\n</code></pre> \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 vector \u7684\u8fed\u4ee3\u5668\u6765\u904d\u5386\u5e76\u6253\u5370\u5bb9\u5668\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u3002</p> <p>C++11 \u8303\u56f4\u57fa\u4e8e\u7684 for \u5faa\u73af C++11 \u5f15\u5165\u4e86\u57fa\u4e8e\u8303\u56f4\u7684 for \u5faa\u73af\uff0c\u5b83\u53ef\u4ee5\u7b80\u5316\u8fed\u4ee3\u5668\u7684\u4f7f\u7528\uff1a <pre><code>for (int elem : vec) {\n    std::cout &lt;&lt; elem &lt;&lt; ' ';\n}\n</code></pre> \u8fd9\u4e2a\u5faa\u73af\u4f1a\u81ea\u52a8\u4e3a\u6bcf\u4e2a\u5143\u7d20\u521b\u5efa\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u5e76\u904d\u5386\u6574\u4e2a\u5bb9\u5668\u3002</p> <p>\u8fed\u4ee3\u5668\u662f C++ \u6807\u51c6\u5e93\u4e2d\u975e\u5e38\u6838\u5fc3\u7684\u6982\u5ff5\uff0c\u5b83\u4eec\u4f7f\u5f97\u7b97\u6cd5\u548c\u5bb9\u5668\u53ef\u4ee5\u72ec\u7acb\u5f00\u6765\uff0c\u63d0\u4f9b\u4e86\u66f4\u9ad8\u7684\u62bd\u8c61\u5c42\u6b21\u548c\u4ee3\u7801\u590d\u7528\u6027\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture-6advanced-iterators-and-containers","title":"lecture 6:advanced iterators and containers","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#review-of-the-iterator","title":"review of the iterator","text":"<p>four essential iterator operations:</p> <p>Create iterator: <pre><code>std::set&lt;int&gt;::iterator iter = mySet.begin();\n</code></pre> Dereference iterator to read value currently pointed to: <pre><code>int val = *iter;\n</code></pre></p> <p>Advance iterator\uff1a <pre><code>iter++; or ++iter;\n</code></pre></p> <p>Compare against another iterator(especially .end() iterator): <pre><code>if(iter == myset.end()) return;\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#pair-class","title":"pair class","text":"<p>A pair is simply two objects bundled together.</p> <p>syntax: <pre><code>std::pair&lt;string,int&gt;p;\np.first =\"phone number\";\np.second = 6507232300;\n</code></pre></p> <p>quicker ways to make a pair: <pre><code>std::pair&lt;string,int&gt; p{\"phone number\",6507232300};\nstd::make_pair(\"phone number\",6507232300);\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#map-iterators","title":"map iterators","text":"<p>example: <pre><code>map&lt;int,int&gt; m;\nmap&lt;int,int&gt;::iterator i = m.begin();\nmap&lt;int,int&gt;::iterator end = m.end();\nwhile(i != end){\n    cout &lt;&lt; (*i).first &lt;&lt; (*i).second &lt;&lt; endl;\n    i++;\n}\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#further-iterator-usage","title":"further iterator usage","text":"<p>example: <pre><code>map&lt;string,int&gt; MyMap;\nMyMap = readuserwords();//this function is already got.\n\nfor(auto [key,val] : MyMap){\n    cout &lt;&lt; key &lt;&lt; \",\" &lt;&lt;  val &lt;&lt; endl;\n}\n\n//the same \n\nfor(auto elem : Mymap){\n    cout &lt;&lt; elem.first &lt;&lt; \",\" &lt;&lt; elem.second &lt;&lt; endl;\n}\n</code></pre></p> <p>example: <pre><code>#include&lt;vector&gt;\n\nusing std::vector;\n\nvoid printVec(const vector&lt;int&gt; &amp;vec){\n    for (auto elem: vec){\n        cout&lt;&lt; elem &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n}\n\nint main(){\n    //sorting a vector\n    vector &lt;int&gt; vec{3,1,4,1,5,9,2,6};\n\n    printVec(vec);\n    std::sort(vec.begin(),vec.end());\n    //if we want to sort the first 4 ones, we can also use \"std::sort(vec.begin(),vec.begin()+4);\n    printVec(vec);\n\n    set&lt;int&gt; elems{3,1,4,1,5,9,2,6};\n    cout &lt;&lt; elems.size() &lt;&lt; endl;\n\n    //finding an element from a set\n    auto testit=std::find(elem.begin(),elems.end(),5);\n    if(testit ==elems.end()){//if not found, the point will continue to move to the last one in elems.\n        cout &lt;&lt; \"Not Found\" &lt;&lt; endl;\n    }else{\n        cout &lt;&lt; \"Found: \"&lt;&lt; testit &lt;&lt; endl;\n    }\n\n    set&lt;int&gt;::iterator iter = elems.lower_bound(4);\n    set&lt;int&gt;::iterator end = elems.upper_bound(6);\n    cout &lt;&lt; \"start: \" &lt;&lt; *iter &lt;&lt; \", end: \" &lt;&lt; *end &lt;&lt; endl;\n\n    for(; iter != end; ++iter){\n        cout &lt;&lt; *iter &lt;&lt; \" \";\n    }\n    cout &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre> notice: elems.end() is outside the elems!!!</p> <p>use the graphs in ppt:  </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#template-t","title":"&lt; template T&gt;","text":"<p><pre><code>template &lt;typename T&gt;\npair &lt;T,T&gt; my_minmax(T a,T b){\n    if(a&lt;b) return {a,b};\n    else return {b,a};\n}\n</code></pre> \u8fd9\u6bb5\u4ee3\u7801\u662f\u4e00\u4e2aC++\u6a21\u677f\u51fd\u6570\uff0c\u5b83\u7684\u4f5c\u7528\u662f\u8fd4\u56de\u4e24\u4e2a\u7ed9\u5b9a\u53c2\u6570a\u548cb\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u7ec4\u6210\u7684pair\u3002\u4e0b\u9762\u6211\u5c06\u8be6\u7ec6\u89e3\u91ca\u8fd9\u4e2a\u51fd\u6570\u7684\u5404\u4e2a\u90e8\u5206\uff1a</p> <p>\u6a21\u677f\u58f0\u660e:  <pre><code>template &lt;typename T&gt;\n</code></pre> \u8fd9\u884c\u4ee3\u7801\u58f0\u660e\u4e86\u4e00\u4e2a\u6a21\u677f\uff0cT\u662f\u4e00\u4e2a\u5360\u4f4d\u7b26\u7c7b\u578b\uff0c\u5b83\u5728\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u4f1a\u88ab\u5b9e\u9645\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u53c2\u6570\u7c7b\u578b\u6240\u66ff\u6362\u3002\u8fd9\u610f\u5473\u7740my_minmax\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u4efb\u4f55\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u53ea\u8981\u8fd9\u4e24\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u76f8\u540c\u3002</p> <p><pre><code>\u51fd\u6570\u8fd4\u56de\u7c7b\u578b:\npair &lt;T,T&gt;\n</code></pre> pair\u662fC++\u6807\u51c6\u5e93\u4e2d\u7684\u4e00\u4e2a\u6a21\u677f\u7c7b\uff0c\u7528\u4e8e\u5c06\u4e24\u4e2a\u503c\u7ec4\u5408\u6210\u4e00\u4e2a\u5355\u5143\u3002\u8fd9\u91ccpair\u8868\u793a\u8fd9\u4e2a\u5355\u5143\u4e2d\u7684\u4e24\u4e2a\u503c\u90fd\u662f\u540c\u4e00\u79cd\u7c7b\u578bT\u3002 <pre><code>\u51fd\u6570\u5b9a\u4e49:\nmy_minmax(T a, T b)\n</code></pre> \u8fd9\u662f\u51fd\u6570\u7684\u540d\u79f0\u548c\u53c2\u6570\u5217\u8868\u3002my_minmax\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570a\u548cb\uff0c\u5b83\u4eec\u7684\u7c7b\u578b\u90fd\u662fT\u3002 <pre><code>\u51fd\u6570\u4f53:\nif(a &lt; b) return {a, b};\nelse return {b, a};\n\u51fd\u6570\u4f53\u5305\u542b\u4e00\u4e2a\u7b80\u5355\u7684\u6761\u4ef6\u5224\u65ad\uff1a\n\u5982\u679ca\u5c0f\u4e8eb\uff0c\u90a3\u4e48a\u662f\u6700\u5c0f\u503c\uff0cb\u662f\u6700\u5927\u503c\uff0c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5305\u542ba\u548cb\u7684pair\u3002\n\u5982\u679ca\u4e0d\u5c0f\u4e8eb\uff08\u5373a\u5927\u4e8e\u6216\u7b49\u4e8eb\uff09\uff0c\u90a3\u4e48b\u662f\u6700\u5c0f\u503c\uff0ca\u662f\u6700\u5927\u503c\uff0c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5305\u542bb\u548ca\u7684pair\u3002\n</code></pre> \u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7\u6bd4\u8f83\u4e24\u4e2a\u53c2\u6570\u7684\u5927\u5c0f\uff0c\u7136\u540e\u4ee5pair\u7684\u5f62\u5f0f\u8fd4\u56de\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u5176\u529f\u80fd\u3002\u7531\u4e8e\u4f7f\u7528\u4e86\u6a21\u677f\uff0c\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u53ef\u4ee5\u6bd4\u8f83\u5927\u5c0f\u5173\u7cfb\u7684\u7c7b\u578b\uff0c\u4f8b\u5982\u6574\u6570\u3001\u6d6e\u70b9\u6570\u3001\u5b57\u7b26\u7b49\u3002 <p>\u4f7f\u7528\u793a\u4f8b\uff1a <pre><code>int main() {\n    auto result = my_minmax(10, 20); // result will be pair(10, 20)\n    // To access the minimum and maximum values:\n    int min = result.first;  // min will be 10\n    int max = result.second; // max will be 20\n    return 0;\n}\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cmy_minmax\u51fd\u6570\u88ab\u8c03\u7528\u6765\u6bd4\u8f83\u4e24\u4e2a\u6574\u657010\u548c20\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2apair\uff0c\u5176\u4e2d\u5305\u542b\u6700\u5c0f\u503c10\u548c\u6700\u5927\u503c20\u3002\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#template-function","title":"template function","text":"<p>A template function defines an implicit interface that each template parameter must satisfy.</p> <pre><code>template &lt;typename InputIterator, typename Datatype&gt;\nint countOccurences(InputIterator begin,InputIterator end,Datatype val){\n    int count= 0;\n    for (auto iter = begin;iter != end;iter++){\n        if(*iter == yal) ++count;\n    }\n    return count;\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture7-8function-and-algorithm","title":"lecture7-8\uff1aFunction and algorithm","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lambda","title":"lambda","text":"<pre><code>int main(){\n    int limit = getInterger(\"Minimum for A\");\n    vector&lt;int&gt; grades = readStudentGrades();\n    auto func =[limit] (auto val) {return val &gt;= limit;};\n    CountOccurences(grades.begin(),grades.end(),func)\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#anatomy-of-a-lambda-function","title":"Anatomy of a lambda function","text":"<pre><code>auto func = [capture-clause](parameters){\n    //body\n};\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#an-example","title":"An example","text":"<p>Lambda \u8868\u8fbe\u5f0f\uff08\u901a\u5e38\u7b80\u79f0\u4e3a \"lambda\"\uff09\u662f\u8bb8\u591a\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u4e00\u4e2a\u7279\u6027\uff0c\u5b83\u5141\u8bb8\u5f00\u53d1\u8005\u7f16\u5199\u5185\u8054\u7684\u533f\u540d\u51fd\u6570\uff0c\u5373\u4e0d\u9700\u8981\u660e\u786e\u6307\u5b9a\u51fd\u6570\u540d\u7684\u51fd\u6570\u3002Lambda \u8868\u8fbe\u5f0f\u5728\u8bed\u6cd5\u4e0a\u66f4\u7b80\u6d01\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u9700\u8981\u51fd\u6570\u5bf9\u8c61\u7684\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u3002\u4ee5\u4e0b\u662f\u5173\u4e8e lambda \u8868\u8fbe\u5f0f\u7684\u539f\u7406\u3001\u4f5c\u7528\u548c\u4e00\u4e9b\u5173\u952e\u70b9\u7684\u89e3\u91ca\uff1a</p> <p>\u539f\u7406</p> <p>Lambda \u8868\u8fbe\u5f0f\u7684\u539f\u7406\u57fa\u4e8e\u51e0\u4e2a\u6982\u5ff5\uff1a</p> <p>\u95ed\u5305\uff08Closure\uff09\uff1aLambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u6355\u83b7\u5176\u5468\u56f4\u4f5c\u7528\u57df\u4e2d\u7684\u53d8\u91cf\uff0c\u5373\u4f7f\u8fd9\u4e9b\u53d8\u91cf\u5728 lambda \u8868\u8fbe\u5f0f\u88ab\u5b9a\u4e49\u540e\u5df2\u7ecf\u8d85\u51fa\u4e86\u4f5c\u7528\u57df\u3002\u8fd9\u79cd\u80fd\u529b\u79f0\u4e3a\u95ed\u5305\u3002 \u533f\u540d\u51fd\u6570\uff1aLambda \u8868\u8fbe\u5f0f\u662f\u533f\u540d\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u6ca1\u6709\u540d\u5b57\u3002\u5b83\u4eec\u901a\u5e38\u662f\u5728\u9700\u8981\u7684\u5730\u65b9\u76f4\u63a5\u5b9a\u4e49\u548c\u4f7f\u7528\u7684\u3002</p> <p>\u8868\u8fbe\u5f0f\uff1aLambda \u8868\u8fbe\u5f0f\u901a\u5e38\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u53ef\u4ee5\u88ab\u8d4b\u503c\u7ed9\u53d8\u91cf\uff0c\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\uff0c\u6216\u8005\u76f4\u63a5\u8c03\u7528\u3002</p> <p>\u4f5c\u7528</p> <p>Lambda \u8868\u8fbe\u5f0f\u5728\u7f16\u7a0b\u4e2d\u6709\u591a\u79cd\u7528\u9014\uff1a</p> <p>\u7b80\u5316\u548c\u5185\u8054\u4ee3\u7801\uff1aLambda \u5141\u8bb8\u4f60\u5728\u9700\u8981\u51fd\u6570\u7684\u5730\u65b9\u76f4\u63a5\u7f16\u5199\u51fd\u6570\u903b\u8f91\uff0c\u51cf\u5c11\u4e86\u4ee3\u7801\u7684\u590d\u6742\u6027\u3002</p> <p>\u4e8b\u4ef6\u5904\u7406\uff1a\u5728 GUI \u7f16\u7a0b\u4e2d\uff0clambda \u8868\u8fbe\u5f0f\u5e38\u7528\u4e8e\u4e3a\u6309\u94ae\u70b9\u51fb\u7b49\u4e8b\u4ef6\u6307\u5b9a\u5904\u7406\u51fd\u6570\u3002</p> <p>\u6570\u636e\u5904\u7406\uff1a\u5728\u5904\u7406\u96c6\u5408\uff08\u5982\u5217\u8868\u3001\u6570\u7ec4\uff09\u65f6\uff0clambda \u53ef\u4ee5\u7528\u4f5c\u8fc7\u6ee4\u3001\u6620\u5c04\u6216\u6392\u5e8f\u7684\u56de\u8c03\u51fd\u6570\u3002</p> <p>\u5e76\u53d1\u7f16\u7a0b\uff1a\u5728\u591a\u7ebf\u7a0b\u7f16\u7a0b\u4e2d\uff0clambda \u53ef\u4ee5\u7528\u4f5c\u7ebf\u7a0b\u6267\u884c\u7684\u51fd\u6570\u3002</p> <p>\u81ea\u5b9a\u4e49\u884c\u4e3a\uff1a\u5728\u6807\u51c6\u5e93\u7b97\u6cd5\u4e2d\uff0clambda \u5141\u8bb8\u4f60\u81ea\u5b9a\u4e49\u6bd4\u8f83\u6216\u64cd\u4f5c\u884c\u4e3a\u3002</p> <p>\u793a\u4f8b \u4ee5\u4e0b\u662f\u4e00\u4e2a C++ \u4e2d\u7684 lambda \u8868\u8fbe\u5f0f\u793a\u4f8b\uff1a <pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;algorithm&gt;\nint main() {\n    std::vector&lt;int&gt; numbers = {1, 2, 3, 4, 5};\n    // \u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u6765\u6253\u5370\u6240\u6709\u5143\u7d20\n    std::for_each(numbers.begin(), numbers.end(), [](int x) {\n        std::cout &lt;&lt; x &lt;&lt; \" \";\n    });\n    std::cout &lt;&lt; std::endl;\n    // \u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u6765\u67e5\u627e\u7b2c\u4e00\u4e2a\u5076\u6570\n    auto it = std::find_if(numbers.begin(), numbers.end(), [](int x) {\n        return x % 2 == 0;\n    });\n    if (it != numbers.end()) {\n        std::cout &lt;&lt; \"\u7b2c\u4e00\u4e2a\u5076\u6570\u662f: \" &lt;&lt; *it &lt;&lt; std::endl;\n    }\n    return 0;\n}\n</code></pre> \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c <pre><code>[](int x) { std::cout &lt;&lt; x &lt;&lt; \" \"; } \u662f\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\uff0c\u5b83\u88ab\u4f20\u9012\u7ed9 std::for_each \u7b97\u6cd5\uff0c\u7528\u4e8e\u6253\u5370 numbers \u5411\u91cf\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u3002\u53e6\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f [](int x) { return x % 2 == 0; } \u88ab\u4f20\u9012\u7ed9 std::find_if \u7b97\u6cd5\uff0c\u7528\u4e8e\u67e5\u627e\u7b2c\u4e00\u4e2a\u5076\u6570\u3002\n</code></pre> \u5173\u952e\u70b9 \u6355\u83b7\u5217\u8868\uff1aLambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u6709\u4e00\u4e2a\u6355\u83b7\u5217\u8868\uff0c\u5b83\u6307\u5b9a\u4e86\u5982\u4f55\u6355\u83b7\u5916\u90e8\u4f5c\u7528\u57df\u4e2d\u7684\u53d8\u91cf\u3002\u6355\u83b7\u53ef\u4ee5\u662f\u503c\u6355\u83b7\u3001\u5f15\u7528\u6355\u83b7\u6216\u9690\u5f0f\u6355\u83b7\u3002 \u53c2\u6570\u5217\u8868\uff1aLambda \u8868\u8fbe\u5f0f\u53ef\u4ee5\u6709\u53c2\u6570\uff0c\u5c31\u50cf\u666e\u901a\u51fd\u6570\u4e00\u6837\u3002 \u8fd4\u56de\u7c7b\u578b\uff1aLambda \u8868\u8fbe\u5f0f\u7684\u8fd4\u56de\u7c7b\u578b\u53ef\u4ee5\u7701\u7565\uff0c\u7f16\u8bd1\u5668\u4f1a\u6839\u636e\u8fd4\u56de\u8bed\u53e5\u63a8\u65ad\u8fd4\u56de\u7c7b\u578b\u3002\u5982\u679c\u9700\u8981\u663e\u5f0f\u6307\u5b9a\u8fd4\u56de\u7c7b\u578b\uff0c\u53ef\u4ee5\u5728\u53c2\u6570\u5217\u8868\u540e\u9762\u52a0\u4e0a -&gt; \u7c7b\u578b\u3002 Lambda \u8868\u8fbe\u5f0f\u662f\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u4e2d\u4e00\u4e2a\u5f3a\u5927\u7684\u7279\u6027\uff0c\u5b83\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u7075\u6d3b\u6027\u548c\u8868\u8fbe\u529b\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#capture-by-value-or-by-reference","title":"capture by value(=) or by reference(&amp;)","text":"<p><pre><code>//capture all by value, except teas is by reference\nauto func1 = [=,&amp;teas](parameters)-&gt; return-value{\n    //body\n};\n</code></pre> <pre><code>//capture all by referene, except banned is by value\nauto func2 = [&amp;,banned](parameters)-&gt; return-value{\n    //body\n};\n</code></pre> </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#a-nice-examplefurther-insight-of-lambda","title":"a nice example:further insight of lambda","text":"<p><pre><code>int limit = 5;\nauto  isLessThanLimit =[limit] (auto val)-&gt;bool{\n    return val &lt; limit;\n}\n</code></pre> \u53ef\u4ee5\u7f29\u5199\u6210\u4ee5\u4e0b\u5f62\u5f0f\uff1a\uff08\u53bb\u6389bool\uff09\uff1b <pre><code>int limit = 5;\nauto  isLessThanLimit =[limit] (auto val){\n    return val &lt; limit;\n}\n</code></pre> \u5982\u679c\u6211\u4eec\u60f3\u627e\u4e00\u4e2a\u53d8\u91cf\u4f9d\u6b21\u9012\u589e\uff0c\u4f20\u5165\u5176\u5730\u5740\uff1a <pre><code>int limit = 5;\nint num_times_called = 0;\nauto  isLessThanLimit =[limit,&amp;num_times_called] (auto val){\n    ++num_times_called;\n    return val &lt; limit;\n}\n</code></pre></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lambda_1","title":"\u8fed\u4ee3\u5668\u3001\u4e00\u5143\u8c13\u8bcd\u51fd\u6570\u3001lambda\u8868\u8fbe\u5f0f\u7684\u4e00\u4e2a\u4f8b\u5b50","text":"<p>\u5728 C++ \u4e2d\uff0c<code>template&lt;typename InputIt, typename UnaryPred&gt;</code> \u662f\u4e00\u4e2a\u6a21\u677f\u58f0\u660e\uff0c\u5b83\u7528\u4e8e\u5b9a\u4e49\u4e00\u4e2a\u6a21\u677f\u51fd\u6570\u6216\u6a21\u677f\u7c7b\uff0c\u8fd9\u4e2a\u6a21\u677f\u53ef\u4ee5\u63a5\u53d7\u4e24\u4e2a\u6a21\u677f\u53c2\u6570\uff1a 1. <code>InputIt</code>\uff1a\u8fd9\u4e2a\u53c2\u6570\u901a\u5e38\u7528\u4e8e\u6307\u5b9a\u8f93\u5165\u8fed\u4ee3\u5668\u7684\u7c7b\u578b\u3002\u8f93\u5165\u8fed\u4ee3\u5668\u662f\u4e00\u79cd\u80fd\u591f\u7528\u4e8e\u8bfb\u53d6\u5e8f\u5217\u4e2d\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u7c7b\u578b\u3002\u5b83\u4eec\u5fc5\u987b\u652f\u6301\u81f3\u5c11\u4e00\u6b21\u7684\u9012\u589e\u64cd\u4f5c\uff08\u4ee5\u8bbf\u95ee\u5e8f\u5217\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\uff09\u4ee5\u53ca\u89e3\u5f15\u7528\u64cd\u4f5c\uff08\u4ee5\u8bbf\u95ee\u8fed\u4ee3\u5668\u6240\u6307\u5411\u7684\u5143\u7d20\uff09\u3002 2. <code>UnaryPred</code>\uff1a\u8fd9\u4e2a\u53c2\u6570\u7528\u4e8e\u6307\u5b9a\u4e00\u4e2a\u4e00\u5143\u8c13\u8bcd\u51fd\u6570\u7684\u7c7b\u578b\u3002\u4e00\u5143\u8c13\u8bcd\u662f\u4e00\u4e2a\u53ef\u8c03\u7528\u7684\u8868\u8fbe\u5f0f\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\u5e76\u8fd4\u56de\u4e00\u4e2a\u53ef\u4ee5\u89e3\u91ca\u4e3a\u5e03\u5c14\u503c\u7684\u503c\uff08\u901a\u5e38\u662f <code>bool</code> \u7c7b\u578b\uff09\u3002\u5728\u7b97\u6cd5\u4e2d\uff0c\u4e00\u5143\u8c13\u8bcd\u901a\u5e38\u7528\u4e8e\u6307\u5b9a\u4e00\u4e2a\u6761\u4ef6\uff0c\u7b97\u6cd5\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u6761\u4ef6\u6765\u6d4b\u8bd5\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u3002 \u4ee5\u4e0b\u662f\u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e24\u4e2a\u6a21\u677f\u53c2\u6570\u7684\u51fd\u6570\u6a21\u677f\u793a\u4f8b\uff0c\u8be5\u51fd\u6570\u7528\u4e8e\u8ba1\u7b97\u6ee1\u8db3\u7ed9\u5b9a\u8c13\u8bcd\u6761\u4ef6\u7684\u5143\u7d20\u6570\u91cf\uff1a <pre><code>template&lt;typename InputIt, typename UnaryPred&gt;\ntypename std::iterator_traits&lt;InputIt&gt;::difference_type\ncount_if(InputIt first, InputIt last, UnaryPred pred) {\n    typename std::iterator_traits&lt;InputIt&gt;::difference_type count = 0;\n    for (; first != last; ++first) {\n        if (pred(*first)) {\n            ++count;\n        }\n    }\n    return count;\n}\n</code></pre> \u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff1a - <code>InputIt</code> \u662f\u8f93\u5165\u8fed\u4ee3\u5668\u7684\u7c7b\u578b\uff0c\u6bd4\u5982 <code>std::vector&lt;int&gt;::iterator</code>\u3002 - <code>UnaryPred</code> \u662f\u4e00\u5143\u8c13\u8bcd\u7684\u7c7b\u578b\uff0c\u6bd4\u5982\u4e00\u4e2a lambda \u8868\u8fbe\u5f0f\u6216\u8005\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u3002 - <code>std::iterator_traits&lt;InputIt&gt;::difference_type</code> \u662f\u4e00\u4e2a\u7c7b\u578b\uff0c\u5b83\u80fd\u591f\u8868\u793a\u4e24\u4e2a\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u901a\u5e38\u7528\u4e8e\u8ba1\u6570\u3002 \u8fd9\u4e2a <code>count_if</code> \u51fd\u6570\u6a21\u677f\u63a5\u53d7\u4e00\u4e2a\u8303\u56f4 <code>[first, last)</code> \u548c\u4e00\u4e2a\u8c13\u8bcd <code>pred</code>\uff0c\u7136\u540e\u904d\u5386\u8fd9\u4e2a\u8303\u56f4\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\u5e94\u7528\u8c13\u8bcd\u3002\u5982\u679c\u8c13\u8bcd\u8fd4\u56de <code>true</code>\uff0c\u5219\u589e\u52a0\u8ba1\u6570\u3002 \u4f7f\u7528\u8fd9\u4e2a\u6a21\u677f\u51fd\u6570\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a <pre><code>#include &lt;vector&gt;\n#include &lt;iostream&gt;\nint main() {\n    std::vector&lt;int&gt; vec = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n\n    // \u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u4f5c\u4e3a\u4e00\u5143\u8c13\u8bcd\uff0c\u8ba1\u7b97\u5076\u6570\u7684\u6570\u91cf\n    auto even_count = count_if(vec.begin(), vec.end(), [](int x) { return x % 2 == 0; });\n\n    std::cout &lt;&lt; \"Number of even elements: \" &lt;&lt; even_count &lt;&lt; std::endl;\n\n    return 0;\n}\n</code></pre> \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c<code>count_if</code> \u51fd\u6570\u6a21\u677f\u88ab\u7528\u6765\u8ba1\u7b97 <code>vec</code> \u4e2d\u5076\u6570\u7684\u6570\u91cf\u3002Lambda \u8868\u8fbe\u5f0f <code>[](int x) { return x % 2 == 0; }</code> \u4f5c\u4e3a\u4e00\u5143\u8c13\u8bcd\uff0c\u68c0\u67e5\u4e00\u4e2a\u6574\u6570\u662f\u5426\u4e3a\u5076\u6570\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#algorithm","title":"algorithm","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#remove","title":"remove","text":"<p>std::remove does not change the size of the container! The algorithm is not a member o std::vector(or any other collection) so it can't change its size member.</p> <p>erase-remove idiom <pre><code>v.erase(std::remove_if(\n    v.begin(),v.end(),pred),\n    v.end()\n);\n</code></pre> \u8fd9\u6bb5\u4ee3\u7801\u662fC++\u4e2d\u7528\u4e8e\u79fb\u9664\u5bb9\u5668<code>v</code>\u4e2d\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\uff08\u7531\u51fd\u6570\u5bf9\u8c61<code>pred</code>\u6307\u5b9a\uff09\u7684\u5143\u7d20\u7684\u5e38\u89c1\u6a21\u5f0f\u3002\u8fd9\u91cc\u662f\u5206\u6b65\u89e3\u91ca\uff1a 1. <code>std::remove_if</code>\u662f\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5b83\u63a5\u53d7\u4e09\u4e2a\u53c2\u6570\uff1a\u5f00\u59cb\u8fed\u4ee3\u5668<code>v.begin()</code>\uff0c\u7ed3\u675f\u8fed\u4ee3\u5668<code>v.end()</code>\uff0c\u548c\u4e00\u4e2a\u8c13\u8bcd\u51fd\u6570<code>pred</code>\u3002\u8c13\u8bcd<code>pred</code>\u662f\u4e00\u4e2a\u53ef\u4ee5\u8c03\u7528\u7684\u5bf9\u8c61\uff08\u6bd4\u5982\u51fd\u6570\u3001\u51fd\u6570\u6307\u9488\u6216\u8005\u91cd\u8f7d\u4e86<code>operator()</code>\u7684\u7c7b\u5bf9\u8c61\uff09\uff0c\u5b83\u63a5\u53d7\u5bb9\u5668\u7684\u5143\u7d20\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u3002 2. <code>std::remove_if</code>\u7b97\u6cd5\u4f1a\u904d\u5386\u6307\u5b9a\u8303\u56f4\u5185\u7684\u5143\u7d20\uff0c\u5e76\u5c06\u4e0d\u6ee1\u8db3\u8c13\u8bcd<code>pred</code>\uff08\u5373<code>pred(element)</code>\u8fd4\u56de<code>false</code>\uff09\u7684\u5143\u7d20\u79fb\u52a8\u5230\u5e8f\u5217\u7684\u524d\u9762\u3002\u7b97\u6cd5\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u6700\u540e\u4e00\u4e2a\u4e0d\u88ab\u79fb\u9664\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002 3. <code>v.erase</code>\u662f\u4e00\u4e2a\u6210\u5458\u51fd\u6570\uff0c\u5b83\u7528\u4e8e\u4ece\u5bb9\u5668\u4e2d\u5220\u9664\u5143\u7d20\u3002\u8fd9\u91cc\u5b83\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f<code>std::remove_if</code>\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\uff0c\u5b83\u6307\u5411\u7b2c\u4e00\u4e2a\u5e94\u8be5\u88ab\u79fb\u9664\u7684\u5143\u7d20\uff1b\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5bb9\u5668\u7684\u7ed3\u675f\u8fed\u4ee3\u5668<code>v.end()</code>\u3002 \u6240\u4ee5\uff0c\u6574\u4e2a\u8868\u8fbe\u5f0f<code>v.erase(std::remove_if(v.begin(), v.end(), pred), v.end())</code>\u7684\u5de5\u4f5c\u6d41\u7a0b\u5982\u4e0b\uff1a - \u4f7f\u7528<code>std::remove_if</code>\u627e\u51fa\u6240\u6709\u9700\u8981\u79fb\u9664\u7684\u5143\u7d20\uff0c\u5e76\u5c06\u4e0d\u9700\u8981\u79fb\u9664\u7684\u5143\u7d20\u79fb\u52a8\u5230\u5bb9\u5668\u7684\u524d\u9762\u3002 - \u4f7f\u7528<code>v.erase</code>\u5220\u9664\u90a3\u4e9b\u88ab\u79fb\u52a8\u5230\u5bb9\u5668\u672b\u5c3e\u7684\u5143\u7d20\u3002 \u6700\u7ec8\u7684\u7ed3\u679c\u662f\uff0c\u5bb9\u5668<code>v</code>\u4e2d\u6240\u6709\u6ee1\u8db3\u8c13\u8bcd<code>pred</code>\u7684\u5143\u7d20\u90fd\u88ab\u79fb\u9664\u4e86\uff0c\u5bb9\u5668\u7684\u5927\u5c0f\u4e5f\u76f8\u5e94\u5730\u51cf\u5c0f\u4e86\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c<code>std::remove_if</code>\u5e76\u4e0d\u5b9e\u9645\u5220\u9664\u5143\u7d20\uff0c\u5b83\u53ea\u662f\u5c06\u4e0d\u9700\u8981\u5220\u9664\u7684\u5143\u7d20\u79fb\u52a8\u5230\u5e8f\u5217\u7684\u524d\u9762\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u903b\u8f91\u672b\u5c3e\u7684\u8fed\u4ee3\u5668\u3002\u5b9e\u9645\u7684\u5220\u9664\u64cd\u4f5c\u662f\u7531<code>erase</code>\u65b9\u6cd5\u5b8c\u6210\u7684\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture9-stl-summary","title":"lecture9: STL summary","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#ifstream","title":"\u6587\u4ef6\u8bfb\u53d6 ifstream","text":"<p><code>ifstream</code> \u662f C++ \u4e2d\u7528\u4e8e\u8f93\u5165\u6587\u4ef6\u6d41\u7684\u7c7b\uff0c\u5b83\u662f\u4ece <code>fstream</code> \u7c7b\u6d3e\u751f\u800c\u6765\u7684\uff0c\u7528\u4e8e\u4ece\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\u3002\u4ee5\u4e0b\u662f <code>ifstream</code> \u7684\u57fa\u672c\u7528\u6cd5\uff1a</p> <ol> <li>\u5305\u542b\u5934\u6587\u4ef6 \u9996\u5148\uff0c\u4f60\u9700\u8981\u5305\u542b <code>&lt;fstream&gt;</code> \u5934\u6587\u4ef6\uff0c\u8fd9\u662f\u4f7f\u7528 <code>ifstream</code> \u7684\u524d\u63d0\u3002 <pre><code>#include &lt;fstream&gt;\n</code></pre></li> <li> <p>\u521b\u5efa <code>ifstream</code> \u5bf9\u8c61 \u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a <code>ifstream</code> \u5bf9\u8c61\u6765\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u3002 <pre><code>ifstream inputFile(\"example.txt\");\n</code></pre></p> </li> <li> <p>\u68c0\u67e5\u6587\u4ef6\u662f\u5426\u6210\u529f\u6253\u5f00 \u5728\u4f7f\u7528\u6587\u4ef6\u6d41\u4e4b\u524d\uff0c\u5e94\u5f53\u68c0\u67e5\u6587\u4ef6\u662f\u5426\u6210\u529f\u6253\u5f00\u3002 <pre><code>if (!inputFile.is_open()) {\n    cerr &lt;&lt; \"\u65e0\u6cd5\u6253\u5f00\u6587\u4ef6\uff01\" &lt;&lt; endl;\n    return -1; // \u6216\u8005\u5176\u4ed6\u9519\u8bef\u5904\u7406\n}\n</code></pre></p> </li> <li>\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9 \u4f60\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u65b9\u6cd5\u6765\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u7528\u7684\u65b9\u6cd5\uff1a</li> </ol> <p>\u4f7f\u7528 <code>&gt;&gt;</code> \u8fd0\u7b97\u7b26 <pre><code>string line;\nwhile (inputFile &gt;&gt; line) {\n    cout &lt;&lt; line &lt;&lt; endl;\n}\n</code></pre></p> <p>\u4f7f\u7528 <code>getline()</code> \u51fd\u6570 <pre><code>string line;\nwhile (getline(inputFile, line)) {\n    cout &lt;&lt; line &lt;&lt; endl;\n}\n</code></pre></p> <p>\u8bfb\u53d6\u5b57\u7b26 <pre><code>char c;\nwhile (inputFile.get(c)) {\n    cout &lt;&lt; c;\n}\n</code></pre></p> <ol> <li>\u5173\u95ed\u6587\u4ef6 \u5f53\u4f60\u5b8c\u6210\u6587\u4ef6\u64cd\u4f5c\u540e\uff0c\u5e94\u5f53\u5173\u95ed\u6587\u4ef6\u3002 <pre><code>inputFile.close();\n</code></pre></li> </ol> <p>\u5b8c\u6574\u793a\u4f8b \u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\uff0c\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 <code>ifstream</code> \u8bfb\u53d6\u4e00\u4e2a\u6587\u672c\u6587\u4ef6\u7684\u5185\u5bb9\u3002 <pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\nusing namespace std;\nint main() {\n    ifstream inputFile(\"example.txt\");\n    if (!inputFile.is_open()) {\n        cerr &lt;&lt; \"\u65e0\u6cd5\u6253\u5f00\u6587\u4ef6\uff01\" &lt;&lt; endl;\n        return -1;\n    }\n    string line;\n    while (getline(inputFile, line)) {\n        cout &lt;&lt; line &lt;&lt; endl;\n    }\n    inputFile.close();\n    return 0;\n}\n</code></pre></p> <p>\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u7a0b\u5e8f\u5c1d\u8bd5\u6253\u5f00\u540d\u4e3a \"example.txt\" \u7684\u6587\u4ef6\uff0c\u5e76\u9010\u884c\u8bfb\u53d6\u5185\u5bb9\uff0c\u7136\u540e\u8f93\u51fa\u5230\u6807\u51c6\u8f93\u51fa\u3002\u6700\u540e\uff0c\u5173\u95ed\u6587\u4ef6\u6d41\u3002 \u5728\u4f7f\u7528\u6587\u4ef6\u6d41\u65f6\uff0c\u5e94\u5f53\u6ce8\u610f\u5f02\u5e38\u5904\u7406\u548c\u8d44\u6e90\u7ba1\u7406\uff0c\u6bd4\u5982\u4f7f\u7528 C++ RAII \u7279\u6027\u786e\u4fdd\u6587\u4ef6\u5728\u9000\u51fa\u4f5c\u7528\u57df\u65f6\u80fd\u591f\u88ab\u6b63\u786e\u5173\u95ed\u3002\u5728\u73b0\u4ee3 C++ \u4e2d\uff0c\u63a8\u8350\u4f7f\u7528 <code>std::ifstream</code> \u7684 RAII \u7279\u6027\uff0c\u8fd9\u6837\u4f60\u5c31\u4e0d\u9700\u8981\u663e\u5f0f\u8c03\u7528 <code>close()</code> \u65b9\u6cd5\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture-10classes-and-const-correctness","title":"lecture 10:Classes and const correctness","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#count-a-string-in-another-string","title":"count a string in another string","text":"<pre><code>int countOccurences(const string &amp;word ,const string &amp; text ){\n    string tofind =\" \"+word+\" \";\n\n    //std::search\n    auto curr = text.begin();\n    auto end = text.end();\n    int count = 0;\n\n    while( curr!=end){\n        auto found = std::search(curr,end,word.begin(),word.end());\n\n        if(found==end)break;\n\n        ++count;\n        curr=find+1;//the correct step may be \"curr=find+word.size()\";\n\n    }\n    return count;\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#stdsearch","title":"std::search","text":"<p><code>std::search</code> \u662f C++ \u6807\u51c6\u5e93\u4e2d\u7684\u4e00\u4e2a\u7b97\u6cd5\uff0c\u7528\u4e8e\u5728\u7ed9\u5b9a\u8303\u56f4\u5185\u67e5\u627e\u5b50\u5e8f\u5217\u3002\u5b83\u5b9a\u4e49\u5728 <code>&lt;algorithm&gt;</code> \u5934\u6587\u4ef6\u4e2d\u3002\u4ee5\u4e0b\u662f <code>std::search</code> \u7684\u57fa\u672c\u7528\u6cd5\u548c\u5b83\u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u7684\u4f5c\u7528\uff1a \u57fa\u672c\u7528\u6cd5\uff1a <pre><code>template &lt;class ForwardIterator1, class ForwardIterator2&gt;\nForwardIterator1 search(ForwardIterator1 first1, ForwardIterator1 last1,\n                       ForwardIterator2 first2, ForwardIterator2 last2);\n</code></pre> <code>std::search</code> \u63a5\u53d7\u56db\u4e2a\u8fed\u4ee3\u5668\u53c2\u6570\uff1a - <code>first1</code> \u548c <code>last1</code> \u5b9a\u4e49\u4e86\u8981\u641c\u7d22\u7684\u8303\u56f4\uff08\u5373\u4e3b\u5e8f\u5217\uff09\u3002 - <code>first2</code> \u548c <code>last2</code> \u5b9a\u4e49\u4e86\u8981\u67e5\u627e\u7684\u5b50\u5e8f\u5217\u3002 \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u5728\u4e3b\u5e8f\u5217\u4e2d\u627e\u5230\u5b50\u5e8f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\u5b50\u5e8f\u5217\uff0c\u5219\u8fd4\u56de <code>last1</code>\u3002 \u5728\u4ee3\u7801\u4e2d\u7684\u4f5c\u7528\uff1a \u5728\u63d0\u4f9b\u7684\u4ee3\u7801\u6bb5\u4e2d\uff0c<code>std::search</code> \u88ab\u7528\u4e8e\u5728\u6587\u672c <code>text</code> \u4e2d\u67e5\u627e\u5355\u8bcd <code>word</code>\uff1a <pre><code>auto found = std::search(curr, end, word.begin(), word.end());\n</code></pre> \u8fd9\u91cc\uff1a - <code>curr</code> \u662f\u5f53\u524d\u641c\u7d22\u5f00\u59cb\u7684\u4f4d\u7f6e\uff0c\u521d\u59cb\u65f6\u6307\u5411 <code>text</code> \u7684\u5f00\u59cb\u3002 - <code>end</code> \u662f <code>text</code> \u7684\u7ed3\u675f\u8fed\u4ee3\u5668\u3002 - <code>word.begin()</code> \u548c <code>word.end()</code> \u5206\u522b\u662f\u5355\u8bcd <code>word</code> \u7684\u5f00\u59cb\u548c\u7ed3\u675f\u8fed\u4ee3\u5668\u3002 <code>std::search</code> \u5c06\u4ece <code>curr</code> \u5f00\u59cb\u5728 <code>text</code> \u4e2d\u67e5\u627e <code>word</code> \u7684\u5e8f\u5217\u3002\u5982\u679c\u627e\u5230\u4e86 <code>word</code>\uff0c<code>found</code> \u5c06\u6307\u5411 <code>text</code> \u4e2d <code>word</code> \u7684\u5f00\u59cb\u4f4d\u7f6e\uff1b\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c<code>found</code> \u5c06\u7b49\u4e8e <code>end</code>\u3002 \u5728\u5faa\u73af\u4e2d\uff0c\u6bcf\u6b21\u627e\u5230 <code>word</code> \u540e\uff0c<code>curr</code> \u5e94\u8be5\u66f4\u65b0\u4e3a <code>found</code> \u4e4b\u540e\u7684\u4f4d\u7f6e\uff0c\u4ee5\u4fbf\u7ee7\u7eed\u5728\u5269\u4f59\u7684\u6587\u672c\u4e2d\u67e5\u627e <code>word</code>\u3002\u4f46\u662f\uff0c\u5982\u4e4b\u524d\u63d0\u5230\u7684\uff0c\u4ee3\u7801\u4e2d\u7684 <code>curr = found + 1;</code> \u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u5b83\u53ea\u524d\u8fdb\u4e86\u4e00\u4e2a\u5b57\u7b26\u800c\u4e0d\u662f\u6574\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u3002\u6b63\u786e\u7684\u66f4\u65b0\u5e94\u8be5\u662f <code>curr = found + word.size();</code>\u3002 <code>std::search</code> \u4f7f\u7528\u7684\u662f\u9ed8\u8ba4\u7684\u76f8\u7b49\u6bd4\u8f83\u64cd\u4f5c\uff0c\u5373 <code>operator==</code>\u3002\u5982\u679c\u9700\u8981\u4e0d\u540c\u7684\u6bd4\u8f83\u65b9\u5f0f\uff0c\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u989d\u5916\u7684\u6bd4\u8f83\u51fd\u6570\u6216\u5bf9\u8c61\u7ed9 <code>std::search</code>\u3002</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#_4","title":"\u6c42\u5411\u91cf\u70b9\u79ef","text":"<pre><code>int dotProduct(const vector&lt;int&gt;&amp; vec1, const vector&lt;int&gt; &amp; vec2){\n    return std::inner_product(vec1.begin(),vec1.end(),vec2.begin(),0);\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#const","title":"const","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#a-const-pointer","title":"a const pointer","text":"<p>using pointers with const is a little tricky</p> <p>when in doubt,read right to left</p> <pre><code>//constantcpointer to a non-constant int\nint * const p;\n\n//non-constnt pointer to a constant int\nconst int *p;\nint const *p;\n\n//constant pointer to a constant int\nconst int *const p;\nint const * const p;\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#const-iterators","title":"const iterators","text":"<pre><code>const vector&lt;int&gt;::iterator itr = v.begin();\n*itr = 5; //ok! changing what itr points to\n++itr; //bad! can't modify itr\n\nvector&lt;int&gt;::const_iterator itr = v.begin();\n*itr = 5; //bad! can't change value of itr\n++itr; //ok! changing v\nint value = *itr; //ok! reading from itr\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#challenge-mode","title":"challenge mode","text":"<pre><code>const int* const myClassMethod(const int * const &amp; param) const;\n</code></pre> <p>\u8fd9\u4e2a\u51fd\u6570\u58f0\u660e\u5305\u542b\u4e86\u591a\u4e2a <code>const</code> \u5173\u952e\u5b57\uff0c\u6bcf\u4e2a\u90fd\u626e\u6f14\u7740\u4e0d\u540c\u7684\u89d2\u8272\u3002\u4e0b\u9762\u662f\u5bf9\u6bcf\u4e2a <code>const</code> \u7684\u89e3\u91ca\uff1a</p> <ol> <li> <p><code>const int* const</code>\uff1a    - \u7b2c\u4e00\u4e2a <code>const</code> \u8868\u793a\u8fd4\u56de\u7c7b\u578b\u662f\u4e00\u4e2a\u6307\u5411\u5e38\u91cf\u6574\u6570\u7684\u6307\u9488\u3002\u8fd9\u610f\u5473\u7740\u901a\u8fc7\u8fd4\u56de\u7684\u6307\u9488\u4e0d\u80fd\u4fee\u6539\u6307\u5411\u7684\u6574\u6570\u503c\u3002    - \u7b2c\u4e8c\u4e2a <code>const</code> \u8868\u793a\u8fd4\u56de\u7684\u6307\u9488\u672c\u8eab\u662f\u4e00\u4e2a\u5e38\u91cf\u6307\u9488\uff0c\u8fd9\u610f\u5473\u7740\u4e0d\u80fd\u66f4\u6539\u6307\u9488\u7684\u5730\u5740\uff0c\u5373\u8fd4\u56de\u7684\u6307\u9488\u503c\u4e0d\u80fd\u88ab\u8d4b\u7ed9\u5176\u4ed6\u6307\u9488\u53d8\u91cf\u3002</p> </li> <li> <p><code>myClassMethod</code>\uff1a    - \u8fd9\u662f\u51fd\u6570\u7684\u540d\u79f0\u3002</p> </li> <li> <p><code>(const int * const &amp; param)</code>\uff1a    - \u7b2c\u4e00\u4e2a <code>const</code> \u8868\u793a\u53c2\u6570 <code>param</code> \u662f\u4e00\u4e2a\u6307\u5411\u5e38\u91cf\u6574\u6570\u7684\u6307\u9488\uff0c\u610f\u5473\u7740\u5728\u51fd\u6570\u5185\u90e8\u4e0d\u80fd\u901a\u8fc7 <code>param</code> \u6307\u9488\u4fee\u6539\u5b83\u6240\u6307\u5411\u7684\u503c\u3002    - \u7b2c\u4e8c\u4e2a <code>const</code> \u8868\u793a <code>param</code> \u672c\u8eab\u662f\u4e00\u4e2a\u5e38\u91cf\u6307\u9488\uff0c\u4f46\u5728\u8fd9\u91cc\u4e0e\u5f15\u7528\u7ed3\u5408\u4f7f\u7528\u65f6\uff0c\u5b83\u8868\u793a\u5f15\u7528\u7684\u662f\u4e00\u4e2a\u5e38\u91cf\u6307\u9488\uff0c\u5373\u4e0d\u80fd\u901a\u8fc7\u5f15\u7528\u6539\u53d8 <code>param</code> \u7684\u503c\u3002    - <code>&amp;</code> \u8868\u793a\u53c2\u6570\u662f\u901a\u8fc7\u5f15\u7528\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4f20\u9012\u7684\u662f\u53c2\u6570\u7684\u522b\u540d\uff0c\u800c\u4e0d\u662f\u53c2\u6570\u7684\u526f\u672c\u3002\u867d\u7136\u5f15\u7528\u672c\u8eab\u4e0d\u5141\u8bb8\u6539\u53d8\uff0c\u4f46\u7531\u4e8e <code>param</code> \u662f\u4e00\u4e2a\u6307\u5411\u5e38\u91cf\u7684\u6307\u9488\u7684\u5f15\u7528\uff0c\u56e0\u6b64\u4f60\u4e5f\u4e0d\u80fd\u901a\u8fc7\u5f15\u7528\u6765\u6539\u53d8\u6307\u9488\u7684\u503c\u3002</p> </li> <li> <p>\u6700\u540e\u4e00\u4e2a <code>const</code>\uff1a    - \u8fd9\u4e2a <code>const</code> \u51fa\u73b0\u5728\u51fd\u6570\u58f0\u660e\u7684\u672b\u5c3e\uff0c\u8868\u793a\u8fd9\u4e2a\u6210\u5458\u51fd\u6570\u662f\u5e38\u91cf\u6210\u5458\u51fd\u6570\u3002\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u4f53\u5185\u4e0d\u80fd\u4fee\u6539\u7c7b\u7684\u4efb\u4f55\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf\uff0c\u5e76\u4e14\u4e0d\u80fd\u8c03\u7528\u7c7b\u4e2d\u4efb\u4f55\u975e <code>const</code> \u6210\u5458\u51fd\u6570\u3002 \u7efc\u4e0a\u6240\u8ff0\uff0c\u8fd9\u4e2a\u51fd\u6570\u58f0\u660e\u8868\u660e <code>myClassMethod</code> \u662f\u4e00\u4e2a\u5e38\u91cf\u6210\u5458\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u6307\u5411\u5e38\u91cf\u6574\u6570\u7684\u5e38\u91cf\u6307\u9488\u7684\u5f15\u7528\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5e38\u91cf\u6574\u6570\u7684\u5e38\u91cf\u6307\u9488\u3002\u5728\u6574\u4e2a\u51fd\u6570\u8c03\u7528\u8fc7\u7a0b\u4e2d\uff0c\u901a\u8fc7\u6307\u9488\u6216\u5f15\u7528\u90fd\u4e0d\u80fd\u4fee\u6539\u4f20\u9012\u7684\u6574\u6570\u503c\uff0c\u4e5f\u4e0d\u80fd\u4fee\u6539\u6307\u9488\u6216\u5f15\u7528\u672c\u8eab\u3002\u8fd4\u56de\u7684\u6307\u9488\u4e5f\u4e0d\u80fd\u7528\u4e8e\u4fee\u6539\u6307\u5411\u7684\u6570\u636e\uff0c\u4e14\u8fd4\u56de\u7684\u6307\u9488\u503c\u672c\u8eab\u4e0d\u80fd\u88ab\u66f4\u6539\u3002</p> </li> </ol>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture11operator-overlap","title":"lecture11:operator overlap","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#_5","title":"+=","text":"<pre><code>vector&lt;string&gt; &amp; vector&lt;string&gt;::operator+=(const int&amp; element){\n    push_back(element);\n    return *this;\n}\n\nvector&lt;string&gt;&amp; vector&lt;string&gt;::operator+=(const vector&lt;int&gt;&amp; other){\n    for(int val : other) push_back(val);\n    return *this;\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#_6","title":"+","text":"<pre><code>vector&lt;string&gt; operator+(const vector&lt;string&gt;&amp; vec,const string&amp; element){\n    vector&lt;string&gt; copy = vec;\n    copy+= element;\n    return copy;\n}\n\nvector&lt;string&gt; operator+(const vector&lt;string&gt;&amp; lhs,const vector&lt;string&gt;&amp; rhs){\n    vector&lt;string&gt; copy = lhs;\n    copy += rhs;\n    return copy;\n}\n</code></pre>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#_7","title":"[]","text":"<p><pre><code>string&amp; vector&lt;string&gt;::operator[](size_t index){\n    return _elems[index];\n}\n\nconst string&amp; vector&lt;string&gt;::operator[](size_t index) const{\n    return _elems[index];\n}\n</code></pre> \u5728\u6210\u5458\u51fd\u6570\u7684\u58f0\u660e\u4e2d\uff0c\u6700\u540e\u7684<code>const</code>\u5173\u952e\u5b57\u662f\u7528\u6765\u6307\u660e\u8be5\u51fd\u6570\u4e0d\u4f1a\u4fee\u6539\u8c03\u7528\u5b83\u7684\u5bf9\u8c61\u3002\u8fd9\u4e2a<code>const</code>\u662f\u51fd\u6570\u7b7e\u540d\u7684\u4e00\u90e8\u5206\uff0c\u79f0\u4e3a\u6210\u5458\u51fd\u6570\u7684\u5e38\u91cf\u6027(constness)\u3002\u4ee5\u4e0b\u662f\u5173\u4e8e\u8fd9\u4e2a<code>const</code>\u5173\u952e\u5b57\u7684\u8be6\u7ec6\u89e3\u91ca\u548c\u5982\u679c\u7701\u7565\u5b83\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a</p> <p><code>const</code>\u5173\u952e\u5b57\u7684\u4f5c\u7528</p> <p>\u5728\u51fd\u6570<code>const string&amp; vector&lt;string&gt;::operator[](size_t index) const</code>\u4e2d\uff0c\u6700\u540e\u7684<code>const</code>\u8868\u660e\uff1a - \u8fd9\u4e2a\u51fd\u6570\u627f\u8bfa\u4e0d\u4f1a\u4fee\u6539\u8c03\u7528\u5b83\u7684\u5bf9\u8c61\u7684\u72b6\u6001\uff08\u5373\uff0c\u4e0d\u4f1a\u4fee\u6539\u5bf9\u8c61\u7684\u4efb\u4f55\u6210\u5458\u53d8\u91cf\uff09\u3002 - \u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u88ab\u4e00\u4e2aconst\u5bf9\u8c61\u8c03\u7528\u3002</p> <p>\u5982\u679c\u7701\u7565<code>const</code>\u4f1a\u53d1\u751f\u4ec0\u4e48 \u5982\u679c\u7701\u7565\u4e86\u6700\u540e\u7684<code>const</code>\uff0c\u51fd\u6570\u58f0\u660e\u5c06\u53d8\u4e3a\uff1a</p> <p><pre><code>const string&amp; vector&lt;string&gt;::operator[](size_t index){\n    return _elems[index];\n}\n</code></pre> \u4ee5\u4e0b\u662f\u7701\u7565<code>const</code>\u540e\u4f1a\u53d1\u751f\u7684\u60c5\u51b5\uff1a 1. \u4e0d\u80fd\u901a\u8fc7const\u5bf9\u8c61\u8c03\u7528\uff1a\u5982\u679c\u4e00\u4e2a<code>vector&lt;string&gt;</code>\u5bf9\u8c61\u88ab\u58f0\u660e\u4e3aconst\uff0c\u4f60\u5c06\u65e0\u6cd5\u4f7f\u7528\u8fd9\u4e2a\u6ca1\u6709<code>const</code>\u7684<code>operator[]</code>\u6765\u8bbf\u95ee\u5b83\u7684\u5143\u7d20\uff0c\u56e0\u4e3aconst\u5bf9\u8c61\u53ea\u80fd\u8c03\u7528const\u6210\u5458\u51fd\u6570\u3002 <pre><code>const vector&lt;string&gt; vec = {\"apple\", \"banana\", \"cherry\"};\nstring fruit = vec[0]; // \u9519\u8bef\uff1a\u4e0d\u80fd\u8c03\u7528\u975econst operator[]\u901a\u8fc7const\u5bf9\u8c61\n</code></pre> 2. \u53ef\u80fd\u4f1a\u4fee\u6539\u5bf9\u8c61\uff1a\u6ca1\u6709<code>const</code>\u4fee\u9970\u7684\u6210\u5458\u51fd\u6570\u53ef\u80fd\u4f1a\u4fee\u6539\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\uff0c\u8fd9\u8fdd\u53cd\u4e86const\u5bf9\u8c61\u7684\u4e0d\u53d8\u6027\u539f\u5219\u3002\u867d\u7136\u5728\u8fd9\u4e2a\u7279\u5b9a\u7684\u4f8b\u5b50\u4e2d\uff0c\u51fd\u6570\u8fd4\u56de\u7684\u662f\u6210\u5458\u6570\u7ec4\u7684\u5f15\u7528\uff0c\u5e76\u4e14\u51fd\u6570\u4f53\u672c\u8eab\u6ca1\u6709\u4fee\u6539\u4efb\u4f55\u4e1c\u897f\uff0c\u4f46\u662f\u7701\u7565<code>const</code>\u4f1a\u5141\u8bb8\u672a\u6765\u5bf9\u51fd\u6570\u7684\u5b9e\u73b0\u8fdb\u884c\u4fee\u6539\uff0c\u4ece\u800c\u53ef\u80fd\u4f1a\u4e0d\u5c0f\u5fc3\u8fdd\u53cdconst\u7684\u627f\u8bfa\u3002 3. \u4ee3\u7801\u610f\u56fe\u4e0d\u660e\u786e\uff1a\u7701\u7565<code>const</code>\u53ef\u80fd\u4f1a\u8ba9\u5176\u4ed6\u5f00\u53d1\u8005\u8bef\u89e3\u51fd\u6570\u7684\u610f\u56fe\uff0c\u8ba4\u4e3a\u51fd\u6570\u53ef\u80fd\u4f1a\u4fee\u6539\u5bf9\u8c61\u7684\u72b6\u6001\u3002 \u603b\u4e4b\uff0c\u7701\u7565\u6700\u540e\u7684<code>const</code>\u4f1a\u9650\u5236\u51fd\u6570\u7684\u4f7f\u7528\u8303\u56f4\uff0c\u5e76\u53ef\u80fd\u5bfc\u81f4\u4ee3\u7801\u7684\u610f\u56fe\u4e0d\u660e\u786e\u3002\u5728C++\u4e2d\uff0c\u6b63\u786e\u4f7f\u7528<code>const</code>\u662f\u7f16\u5199\u6e05\u6670\u3001\u5b89\u5168\u4ee3\u7801\u7684\u91cd\u8981\u90e8\u5206\u3002</p> <p>general rule of thumb:member vs non-member</p> <p>if binary operator and treats both operands equally(eg.both unchanged) implement as non-member(maybe friend).Examples:+,&lt;.</p> <p>if binary operator and not both equally(changes lhs),implement as member (allows easy access to lhs private members).Examples:+=.</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture12special-member-function","title":"lecture12:special member function","text":"<p>which special member function is called with each line?</p> <p><pre><code>StringVector function(StringVector vec0){\n    StringVector vec1;\n    StringVector vec2{\"Ito\",\"En\",\"Green\"};\n    StringVector vec3();\n    StringVector vec4(vec2);\n    StringVector vec5{};\n    StringVector vec6{vec3+vec4};\n    StringVector vec7 = vec4;\n    vec7=vec2;\n    return vec7;\n}\n</code></pre> \u5728C++\u4e2d\uff0c\u7279\u6b8a\u6210\u5458\u51fd\u6570\uff08\u4e5f\u79f0\u4e3a\u6784\u9020\u51fd\u6570\u3001\u6790\u6784\u51fd\u6570\u3001\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3001\u79fb\u52a8\u6784\u9020\u51fd\u6570\u3001\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\u548c\u79fb\u52a8\u8d4b\u503c\u8fd0\u7b97\u7b26\uff09\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u88ab\u81ea\u52a8\u8c03\u7528\u3002\u4e0b\u9762\u662f\u5bf9\u60a8\u63d0\u4f9b\u7684\u4ee3\u7801\u884c\u4e2d\u4f7f\u7528\u7684\u7279\u6b8a\u6210\u5458\u51fd\u6570\u7684\u8be6\u7ec6\u89e3\u91ca\uff1a</p> <p>(1) <code>StringVector vec1;</code> - \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff1a\u8c03\u7528\u4e86StringVector\u7684\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5bf9\u8c61\u3002 (2) <code>StringVector vec2{\"Ito\",\"En\",\"Green\"};</code> - \u5217\u8868\u521d\u59cb\u5316\u6784\u9020\u51fd\u6570\uff1a\u8c03\u7528\u4e86\u63a5\u53d7\u521d\u59cb\u5316\u5217\u8868\u7684\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u5305\u542b\u4e09\u4e2a\u5b57\u7b26\u4e32\u7684\u5bf9\u8c61\u3002 (3) <code>StringVector vec3();</code> - \u8fd9\u4e00\u884c\u5b9e\u9645\u4e0a\u58f0\u660e\u4e86\u4e00\u4e2a\u51fd\u6570<code>vec3</code>\uff0c\u5b83\u8fd4\u56de<code>StringVector</code>\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u521b\u5efa\u4e00\u4e2a<code>StringVector</code>\u5bf9\u8c61\u3002\u8981\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5bf9\u8c61\uff0c\u5e94\u8be5\u5199\u6210<code>StringVector vec3;</code>\uff0c\u8fd9\u6837\u4f1a\u8c03\u7528\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002 (4) <code>StringVector vec4(vec2);</code> - \u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff1a\u8c03\u7528\u4e86StringVector\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u521b\u5efavec4\uff0c\u5b83\u662fvec2\u7684\u4e00\u4e2a\u526f\u672c\u3002 (5) <code>StringVector vec5{};</code> - \u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff1a\u4f7f\u7528\u4e86\u5927\u62ec\u53f7\u521d\u59cb\u5316\uff0c\u4f46\u56e0\u4e3a\u6ca1\u6709\u63d0\u4f9b\u521d\u59cb\u5316\u5217\u8868\uff0c\u6240\u4ee5\u8c03\u7528\u4e86\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5bf9\u8c61\u3002 (6) <code>StringVector vec6{vec3+vec4};</code> - \u5047\u8bbe<code>+</code>\u64cd\u4f5c\u7b26\u8fd4\u56de\u4e86\u4e00\u4e2a<code>StringVector</code>\u7c7b\u578b\u7684\u4e34\u65f6\u5bf9\u8c61\uff0c\u90a3\u4e48\u8fd9\u91cc\u4f1a\u8c03\u7528\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09\uff0c\u5426\u5219\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u4ece\u4e34\u65f6\u5bf9\u8c61\u521b\u5efavec6\u3002 (7) <code>StringVector vec7 = vec4;</code> - \u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff1a\u4f7f\u7528\u4e86\u62f7\u8d1d\u521d\u59cb\u5316\uff0c\u8c03\u7528\u4e86\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u521b\u5efavec7\uff0c\u5b83\u662fvec4\u7684\u4e00\u4e2a\u526f\u672c\u3002 (8) <code>vec7=vec2;</code> - \u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\uff1a\u8c03\u7528\u4e86\u62f7\u8d1d\u8d4b\u503c\u8fd0\u7b97\u7b26\u6765\u5c06vec2\u7684\u5185\u5bb9\u8d4b\u503c\u7ed9vec7\u3002 (9) <code>return vec7;</code> - \u5982\u679c\u7f16\u8bd1\u5668\u652f\u6301\u8fd4\u56de\u503c\u4f18\u5316\uff08RVO\uff09\uff0c\u90a3\u4e48\u53ef\u80fd\u4e0d\u4f1a\u8c03\u7528\u4efb\u4f55\u7279\u6b8a\u6210\u5458\u51fd\u6570\uff0c\u56e0\u4e3avec0\u53ef\u4ee5\u76f4\u63a5\u5728\u8c03\u7528\u8005\u90a3\u91cc\u6784\u9020\u3002 - \u5982\u679c\u6ca1\u6709RVO\uff0c\u90a3\u4e48\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u8fd4\u56de\u503c\u7684\u526f\u672c\uff0c\u6216\u8005\u8c03\u7528\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff08\u5982\u679c\u652f\u6301\u7684\u8bdd\uff09\u3002 \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u5b9a\u4e49\u8fd9\u4e9b\u7279\u6b8a\u6210\u5458\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u4f1a\u4e3a\u7c7b\u751f\u6210\u9ed8\u8ba4\u7684\u7248\u672c\u3002\u5982\u679c\u7c7b\u4e2d\u5305\u542b\u7684\u8d44\u6e90\u9700\u8981\u7279\u5b9a\u7684\u7ba1\u7406\uff08\u4f8b\u5982\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\uff09\uff0c\u5219\u901a\u5e38\u9700\u8981\u81ea\u5b9a\u4e49\u8fd9\u4e9b\u7279\u6b8a\u6210\u5458\u51fd\u6570\u3002</p> <p></p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture13move-semantics","title":"lecture13:move semantics","text":"<pre><code>StrVector readNames(size_t size);\n\nint main(){\n    StrVector name1 = readNames(54321234);\n    StrVector name2;\n    name2 = readNames(54321234);\n}\n\nStrVector readNames(size_t size){\n    StrVector names(size,\"Ito\");\n    return names;\n}\n\n//\u6784\u9020\u51fd\u6570\u8c03\u7528\u6b21\u6570\uff1aname1 \u7684\u79fb\u52a8\u6784\u9020 (1 \u6b21) + name2 \u7684\u9ed8\u8ba4\u6784\u9020 (1 \u6b21) + name2 \u7684\u8d4b\u503c\u5bfc\u81f4\u7684\u6784\u9020 (4 \u6b21\uff0c\u5982\u679c\u8d4b\u503c\u8fd0\u7b97\u7b26\u662f\u9ad8\u6548\u5b9e\u73b0\u7684\uff0c\u53ea\u6784\u9020\u65b0\u5143\u7d20\uff0c\u4e0d\u590d\u5236\u65e7\u5143\u7d20\uff09= 6 \u6b21\u3002\n</code></pre> <p>csdn\u91cc\u9762\u8bb2\u7684\u633a\u597d\uff0c\u5173\u4e8e\u5de6\u503c\u3001\u53f3\u503c\u3001\u5de6\u53f3\u503c\u5f15\u7528\u7684\uff0cclick here</p> <p>why r-values are to move semantics.</p> <p>an object that is an I-value is not disposible, so you can copy from,but definitely can't move them.</p> <p>an object that is an r-value is dispensible, so you can either copy or move from.</p> <p></p> <p>\u6709\u70b9\u6ca1\u5b66\u660e\u767d\u5509~~</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture14inheritancescreencast","title":"lecture14\uff1aInheritance(Screencast)","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#namespace","title":"namespace","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#inheritance","title":"Inheritance","text":"<p>some ppts about interface,a,little complex  </p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CS106l/#lecture15inheritance-and-template","title":"lecture15:inheritance and template","text":""},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/Introduction/","title":"Introduction","text":"<p>\u63a8\u8350\u4e00\u4e2a\u597d\u7528\u7684\u81ea\u5b66\u7f51\u7ad9\uff0c\u524d\u4eba\u7ecf\u9a8c \u8bdd\u4e0d\u591a\u8bf4 \u5f00\u542f\u795e\u79d8\u7684CS\u5b66\u4e60\u4e4b\u65c5\u5427\uff01</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CUDA%E7%BC%96%E7%A8%8B/Introduction/","title":"Introduction","text":"<p>\u5f02\u6784\u5e76\u884c\u7f16\u7a0b-CUDA\u7f16\u7a0b\uff0cUIUC</p> <p>GPU\u7684\u7f16\u7a0b\u8bed\u8a00</p> <p>\u4e5f\u662f3DGS\u9700\u8981\u7684\uff0c\u5c1d\u8bd5\u81ea\u5df1\u5b66\u4e60\u4e00\u4e0b\u5427\uff0c\u6709\u70b9\u795e\u5947\u7684\u65b0\u8bed\u8a00...</p> <p>\u54d4\u7ad9\u5b66\u4e60\u7f51\u7ad9\u5728\u6b64\uff0cclick this</p> <p>\u90a3\u5c31\u5f00\u59cb\u795e\u79d8\u7684CUDA\u7f16\u7a0b\u4e4b\u65c5\u5427~</p>"},{"location":"%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BE/CUDA%E7%BC%96%E7%A8%8B/lecture1/","title":"Lecture1","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/ADS/","title":"\u9ad8\u7ea7\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u5206\u6790","text":"<p>\u53c2\u8003\u4e24\u4e2a\u7b14\u8bb0\uff0c\u90fd\u633a\u8be6\u7ec6\u633a\u597d\u7684 RoderickShao's Notebook \u6216\u8005 \u4fee\u4f6c\u7684\u7b14\u8bb0</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/Introduction/","title":"Introduction","text":"<p>\u8ba1\u7b97\u673a\u4e13\u4e1a\u8bfe\u8fd8\u662f\u5f88\u6709\u6280\u672f\u58c1\u5792\u7684\uff0c\u6bcf\u95e8\u8bfe\u4e92\u6709\u8054\u7cfb\uff0c\u5404\u6210\u4f53\u7cfb\uff0c\u7b14\u8005\u4ecd\u5728\u4e0d\u65ad\u5b8c\u5584\u4e2d\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E5%AD%97%E9%80%BB%E8%BE%91%E8%AE%BE%E8%AE%A1/","title":"\u6570\u5b57\u903b\u8f91\u8bbe\u8ba1","text":"<p>\u6211\u5728\u5b66\u4e60\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e3b\u8981\u53c2\u8003\u4fee\u4f6c\u7684\u7b14\u8bb0</p> <p>\u5b9e\u9a8c\u53c2\u8003\u8fd9\u91cc</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/","title":"\u6570\u636e\u7ed3\u6784\u57fa\u7840","text":"<p>\u666e\u901a\u57fa\u7840\u7684\u4e00\u95e8\u8bfe\uff0c\u6ca1\u5565\u597d\u8bf4\u7684\uff0c\u8ba4\u771f\u5c31\u884c\uff0c\u5347\u7ea7\u7248ADS\u624d\u9178\u723d</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/","title":"\u8ba1\u7b97\u673a\u7ec4\u6210","text":"<p>\u8bfe\u7a0b\u5185\u5bb9\u53c2\u8003RoderickShao's Notebook</p> <p>\u5b9e\u9a8c\u53c2\u8003\u8fd9\u4e2a</p>"},{"location":"%E8%AE%B0%E5%BF%86/Introduction/","title":"Introduction","text":"<p>\u7269\u6b32\u6a2a\u6d41\u7684\u65f6\u4ee3\u4e0b\uff0c\u65e0\u6570\u7684\u6211\u4eec\uff0c\u88ab\u65f6\u5149\u7684\u6d2a\u6d41\u88f9\u631f\u524d\u8fdb\uff0c\u6d51\u6d51\u5669\u5669\u5730\u5ea6\u8fc7\u4eba\u751f\u4e2d\u672c\u5e94\u8be5\u662f\u6700\u6709\u60f3\u6cd5\u4e0e\u95ef\u52b2\u7684\u9752\u5e74\u751f\u6daf\u3002</p> <p>\u6709\u4e9b\u65f6\u5019\uff0c\u6709\u4e9b\u4e8b\u60c5\uff0c\u53ea\u80fd\u5728\u84e6\u7136\u56de\u9996\u4e2d\u6f2b\u6f2b\u56de\u6eaf\u3002\u90a3\u4e9b\u9519\u8fc7\u7684\uff0c\u5f97\u5230\u7684\uff0c\u9057\u61be\u7684\uff0c\u5e86\u5e78\u7684\uff0c\u96be\u4ee5\u540d\u72b6\u7684\uff0c\u523b\u9aa8\u94ed\u5fc3\u7684\uff0c\u7686\u662f\u5c18\u5c01\u5c81\u6708\u4e2d\u7684\u5b9d\u8d35\u56de\u5fc6\u3002</p> <p>\u65e2\u7136\u5982\u6b64\uff0c\u5c31\u8ba9\u5b83\u4eec\u98d8\u626c\u5728\u6de1\u6de1\u7684\u5fe7\u4f24\u4e2d\u5427~</p> <p>\u4e0d\u6b32\u6c42\uff0c\u4e0d\u4e89\u5947\u3002</p> <p>\u53ea\u613f\u5fc3\u6000\u6700\u521d\u7684\u5b88\u671b\uff0c\u884c\u8d70\u5411\u6700\u7ec8\u7684\u5730\u70b9\u3002</p> <p>\u4e0d\u6c42\u95fb\u8fbe\u4e8e\u83bd\u6797\uff0c\u4e0d\u6155\u70ed\u95f9\u4e8e\u4e61\u5cad\u3002</p> <p>\u662f\u4e3a\u5e8f\u3002</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/","title":"Introduction","text":"<p>\u6df7\u5408\u73ed\u8ba1\u7b97\u673a\u4e13\u4e1a\u7684\u901a\u8bc6\u57fa\u7840\u8bfe\u5f3a\u8c03\u52a0\u6df1\u6570\u7406\u6c34\u5e73\uff0c\u8fd9\u91cc\u5305\u542b\u4ee5\u4e0b\u51e0\u95e8\u8bfe\u7a0b\u3002</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/#h","title":"\u6570\u5b66\u5206\u6790(H)","text":"<p>\u975e\u5e38\u4ee4\u4eba\u96be\u5fd8\u7684\u9ad8\u7b49\u6570\u5b66\u4e4b\u65c5\uff01\u6ca1\u6709\u73b0\u6210\u7684\u7b14\u8bb0\u597d\u7528\uff01\u8fd9\u95e8\u8bfe\u7a0b\u91cc\u9762\uff0c\u6bcf\u4e00\u4e2a\u4eba\u7684\u7b14\u8bb0\u90fd\u662f\u6700\u9002\u5408\u81ea\u5df1\u4e14\u72ec\u4e00\u65e0\u4e8c\u7684\uff01</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/#h_1","title":"\u666e\u901a\u7269\u7406\u5b66(H)","text":"<p>\u6709\u70b9\u96be\u8bf4\u771f\u7684\uff0c\u4e2a\u4eba\u611f\u89c9\u666e\u7269\u4e00\u76f8\u5bf9\u8bba\u5185\u5bb9\u6bd4\u8f83\u62bd\u8c61\uff0c\u666e\u7269\u4e8c\u7684\u7535\u548c\u78c1\u975e\u5e38\u6709\u8da3\uff0c\u6240\u4ee5\u7b14\u8005\u666e\u7269\u4e00\u53d6\u5f97\u4e86\u4e00\u4e2a\u8d85\u70c2\u7684\u7ee9\u70b9\uff0c\u666e\u7269\u4e8c\u86ee\u4e0d\u9519\u7684\u3002\u8001\u5e08\u53ea\u6709PPT\uff0c\u6ca1\u6709\u6559\u6750\uff0c\u5728\u8fd9\u91cc\u62f7\u8d1d\u4e86\u4f18\u79c0\u540c\u5b66\u7684\u7b14\u8bb0\uff0c\u4f9b\u6b23\u8d4f\u3002</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/#_1","title":"\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1","text":"<p>\u4e0d\u7b97\u5f88\u96be\u7684\u4e00\u95e8\u8bfe\uff0c\u6ca1\u6709\u7b14\u8bb0\uff0c\u6211\u4e5f\u62f7\u8d1d\u4e86\u4f18\u79c0\u540c\u5b66\u7684\u3002</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/#_2","title":"\u79bb\u6563\u6570\u5b66","text":"<p>\u4e0b\u5b66\u671f\u5f00\u59cb\u5b66\u4e60\u8fd9\u95e8\u8bfe\uff0c\u6211\u8981\u52a0\u6cb9\uff01</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/Introduction/#_3","title":"\u5de5\u7a0b\u56fe\u5b66","text":"<p>\u4e0b\u5b66\u671f\u5f00\u59cb\u5b66\u4e60\u8fd9\u95e8\u8bfe\uff0c\u6211\u8981\u52a0\u6cb9\u6cb9\uff01</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/","title":"\u6570\u5b66\u5206\u6790","text":"<p>\u8fd9\u91cc\u4ec0\u4e48\u4e5f\u6ca1\u6709\uff01\uff01\uff01</p>"},{"location":"%E9%80%9A%E8%AF%86%E5%9F%BA%E7%A1%80%E8%AF%BE/%E6%99%AE%E9%80%9A%E7%89%A9%E7%90%86%E5%AD%A6/","title":"\u666e\u901a\u7269\u7406\u5b66","text":"<p>\u8fd9\u91cc\u53ea\u6709\u5173\u4e8e\u666e\u901a\u7269\u7406\u5b66\u4e8c\u7684\u5185\u5bb9\uff01 \u53c2\u8003RoderickShao's notebook</p>"},{"location":"%E9%80%9A%E8%AF%86%E9%80%89%E4%BF%AE%E8%AF%BE/Introduction/","title":"Introduction","text":"<p>\u901a\u8bc6\u9009\u4fee\u8bfe\u9700\u8981\u670910.5\u5b66\u5206\uff0c\u5305\u62ec\u535a\u96c5\u6280\u827a\u3001\u901a\u8bc6\u6838\u5fc3\u3001\u901a\u8bc6\u9009\u4fee\u6a21\u5757\u7b49\u7b49\u3002</p> <p>\u6b64\u5916\uff0c\u8fd8\u6709\u521b\u65b0\u521b\u4e1a\u7c7b\u3001\u5fc3\u7406\u7c7b\u7b49\u5404\u79cd\u8bfe\u7a0b\uff0c\u6bcf\u4e00\u5c4a\u8fd8\u90fd\u4e0d\u4e00\u6837\uff0c\u672c\u4eba\u5c31\u628a\u81ea\u5df1\u4e0a\u8fc7\u7684\u8bfe\u7a0b\u653e\u8fdb\u6765\u5427\u3002</p>"}]}